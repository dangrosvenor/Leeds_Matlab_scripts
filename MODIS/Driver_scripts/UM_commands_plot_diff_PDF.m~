%% Plot diff if requested

if plot_diff==1 %& length(UM_time_out.P_save)>1        
    
    for idiff_case=1:length(idiff_cases)

        idiff_A = idiff_cases{idiff_case}(1);
        idiff_B = idiff_cases{idiff_case}(2);

        dat_modis = UM_time_out{idiff_A}.datUM_timemean{1};


        if iclear_sky_only == 1
            dat_modis(LWP_volcano>thresh_lwp_clearsky)=NaN;
        end
        if icoarsen_diff==1
            %reset these in case  have already smoothed once
            gcm_Plat2D_edges_UM = UM_time_out{idiff_A}.gcm_Plat2D_edges_UM;
            gcm_Plon2D_edges_UM = UM_time_out{idiff_A}.gcm_Plon2D_edges_UM;
            gcm_Plat2D_UM = UM_time_out{idiff_A}.gcm_Plat2D_UM;
            gcm_Plon2D_UM = UM_time_out{idiff_A}.gcm_Plon2D_UM;

            coarsen_method = '2d smoothing filter'; N = 128; M=N;  %Smoothing
            coarsen_method = 'gridpoint blocks';N = 64; M=N; %Coarse graining to NxM gridpoint blocks (rather than smoothing)
            %coarsen_method = 'lat lon blocks'; dlat_target=0.25; dlon_target=0.25;

            coarse_grain_UM; %script for this (operates on dat_modis and the lat/lon arrays)
        end
        dat_modisA = dat_modis;
        N_dat_modisA = N_dat_modis;

        dat_modis = UM_time_out{idiff_B}.datUM_timemean{1};;
        if iclear_sky_only == 1
            dat_modis(LWP_no_volcano > thresh_lwp_clearsky)=NaN;
        end
        if icoarsen_diff==1
            %reset these in case  have already smoothed once
            gcm_Plat2D_edges_UM = UM_time_out{idiff_B}.gcm_Plat2D_edges_UM;
            gcm_Plon2D_edges_UM = UM_time_out{idiff_B}.gcm_Plon2D_edges_UM;
            gcm_Plat2D_UM = UM_time_out{idiff_B}.gcm_Plat2D_UM;
            gcm_Plon2D_UM = UM_time_out{idiff_B}.gcm_Plon2D_UM;

            coarsen_method = '2d smoothing filter'; N = 128; M=N;  %Smoothing
            coarsen_method = 'gridpoint blocks';N = 64; M=N; %Coarse graining to NxM gridpoint blocks (rather than smoothing)
            %coarsen_method = 'lat lon blocks'; dlat_target=0.25; dlon_target=0.25;

            coarse_grain_UM; %script for this
        end
        dat_modisB = dat_modis;
        N_dat_modisB = N_dat_modis;

        % Take the difference of smoothed fields
        dat_modis = dat_modisA - dat_modisB;

        %ignore the blocks if either run has fewer than thresh_clear clear-sky (poor sample)
        if iclear_sky_only == 1
            frac_clearA = N_dat_modisA ./ (N*M);
            frac_clearB = N_dat_modisB ./ (N*M);
            thresh_clear = 0.1;
            dat_modis( frac_clearA < thresh_clear | frac_clearB < thresh_clear ) = NaN;
        end



        %     if icoarsen_diff==1
        %         %reset these in case  have already smoothed once
        %             gcm_Plat2D_edges_UM = UM_time_out.gcm_Plat2D_edges_UM;
        %             gcm_Plon2D_edges_UM = UM_time_out.gcm_Plon2D_edges_UM;
        %             gcm_Plat2D_UM = UM_time_out.gcm_Plat2D_UM;
        %             gcm_Plon2D_UM = UM_time_out.gcm_Plon2D_UM;
        %
        %         coarsen_method = '2d smoothing filter'; N = 128; M=N;  %Smoothing
        %         coarsen_method = 'gridpoint blocks';N = 64; M=N; %Coarse graining to NxM gridpoint blocks (rather than smoothing)
        %         %coarsen_method = 'lat lon blocks'; dlat_target=0.25; dlon_target=0.25;
        %
        %         coarse_grain_UM; %script for this
        %     end

        if iprc_diff==1
            %        diff_dat = dat_modis;
            %         dat_modis = UM_time_out.P_save{2}; %No volcano case
            %         if icoarsen_diff==1
            %             %reset these since have already smoothed once
            %             gcm_Plat2D_edges_UM = UM_time_out.gcm_Plat2D_edges_UM;
            %             gcm_Plon2D_edges_UM = UM_time_out.gcm_Plon2D_edges_UM;
            %             gcm_Plat2D_UM = UM_time_out.gcm_Plat2D_UM;
            %             gcm_Plon2D_UM = UM_time_out.gcm_Plon2D_UM;
            %
            %             coarsen_method = '2d smoothing filter'; N = 128; M=N;  %Smoothing
            %             coarsen_method = 'gridpoint blocks';N = 64; M=N; %Coarse graining to NxM gridpoint blocks (rather than smoothing)
            %             %            coarsen_method = 'lat lon blocks'; dlat_target=0.25; dlon_target=0.25;
            %
            %             coarse_grain_UM; %script for this (works on dat_modis)
            %         end

            %Percentage change relative to smoothed no volcano data
            %But only if have reasonable amount of LWP
            dat_modis(dat_modisB<thresh_diff)=NaN;
            %        dat_modis = 100*diff_dat./dat_modis;
            dat_modis = 100*dat_modis./dat_modisB;

            
            diff_str{idiff_case} = [UM_time_out{1}.UM_case_out.labs_UM(idiff_A).l ' minus ' UM_time_out{1}.UM_case_out.labs_UM(idiff_B).l];
            titlenam_driver = [UM_time_out{1}.UM_case_out.VAR_NAME_STR ' % difference for ' time_str ' for ' diff_str{idiff_case} ' at ' z_str];
            units_str_plot = '%';

        else
            time_str='';
            z_str='';
            diff_str{idiff_case} = [UM_time_out{1}.UM_case_out.labs_UM(idiff_A).l ' minus ' UM_time_out{1}.UM_case_out.labs_UM(idiff_B).l];
            titlenam_driver = [UM_time_out{1}.UM_case_out.VAR_NAME_STR ' difference for ' time_str ' for ' diff_str{idiff_case} ' at ' z_str];            
            units_str_plot = UM_time_in.var_units_str;

        end

        if iclear_sky_only==1
            titlenam_driver = [titlenam_driver ' CLEAR-SKY ONLY using LWP_thresh.LT.' num2str(thresh_lwp_clearsky) ' gm-2'];
        end


        %--- run the file to set up the defaults
        plot_global_maps_defaults

        irestrict_domain=UM_time_in.irestrict_domain_DRIVER; %whether to restrict the domain or not
        

        thresh_LAT = UM_time_in.LAT_val_DRIVER;
        thresh_LON = UM_time_in.LON_val_DRIVER;

        %--- set some options for these particular plot loops
        set_screening = {'none'};
        modis_data_plot = 'Map of 2D data from outside driver script';

        %         iset_min_clim=1;
        %         clim_min=0;
        %         iset_max_clim=1;
        %         clim_max=300;
        %
        %         isave_plot=0;
        %         iplot_markers=0;



        %Set various things
        %        time = time_matlab(it_driver);
        %Round to the nearest minute as sometimes get 18:59:59
        %        time_str = datestr(round(time*24*60)/24/60,'dd-mmm-yyyy HH:MM');
%        time_str = UM_time_out.time_str;
        %        if iz>-1
        %            z_str = ['at ' num2str(z_um(iz)/1000,'%.2f') ' km '];
        %        else
        %            z_str ='';
        %        end
%        z_str = UM_time_out.z_str;



        mod_data_type='AMSRE';
        gcm_str_select='UM';
        %        daynum_timeseries3_UM = [1:length(time)];
        %        gcm_time_UTC_UM = [1:length(time)];

        %        gcm_Plon2D_UM = lons2D_driver;
        %        gcm_Plat2D_UM = lats2D_driver;

        %        [gcm_Plat2D_edges_UM, gcm_Plon2D_edges_UM]=get_edges_lat_lon(lats2D_driver,lons2D_driver);



        %        i_dpcolor=1;
        ifull_swath=0;
        igcm_screen=0;
        gcm_time_matlab_UM = 1;
        gcm_time_UTC_UM = 1;
        daynum_timeseries3_UM = 1;
        modisyear_timeseries3_UM = 1;




        %--- Apply override flags
        ioverride_plotglobal_thresh=1; %Override most of the options (what to plot, etc.)
        % iocean_only=1;
        ioverride_time_selection=0; %Override the times to include
        ioverride_plotglobal_loc=1; %Override the location of the plot window
        ioverride_years_time_screen=0; %Override years for screening?
        
        iset_min_clim=UM_map.iset_min_clim;  %flags for setting the colorscale limits or not
        iset_max_clim=UM_map.iset_max_clim;
        clim_min = UM_map.clim_min;
        clim_max = UM_map.clim_max;        

        %---  Run plot script and save
        plot_global_maps
        if UM_map.isave_plot==1
            saveas_ps_fig_emf(gcf,[savename],'',0,1,0,'',[],0);
%            close(gcf);
        end
        
dat_modis_save{idiff_case} = dat_modis;        

    end

    
end



%%% PDF plot

if plot_pdf_diff==1 %& length(UM_time_out.P_save)>1
    
    for idat_driver=1:2
    
          %--- run the file to set up the defaults
%        plot_global_maps_defaults   
         watervap_defaults
         pdf2D_defaults
         
        
         LAT_val = UM_time_in.LAT_val_DRIVER;
         LON_val = UM_time_in.LON_val_DRIVER;   
         
         gcm_str = 'UM';
         
         gcm_time_matlab_UM = 1;
         gcm_time_UTC_UM = 1;
         daynum_timeseries3_UM = 1;
         modisyear_timeseries3_UM = 1;
         
        %--- set some options for these particular plot loops
%        set_screening = {'none'};
%        modis_data_plot = 'Map of 2D data from outside driver script';
        i577 = 'MODIS_plot_UW';
        
        logflag=0;
        dlogflag=0;
        

                        

%        screen_type = 'gcm_screening';

        %                            x_axis_vals = 'LWP+RWP GCM grid-box mean'; %dummy data
        x_axis_vals = 'Dummy data'; %dummy data
%        y_axis_vals = 'UM LWP';
         y_axis_vals = 'General y-axis no ilat simple'; %'General GCM-style';
         datatype = 'gcm_data';
         
        ylabelstr = ['SW TOA W m^{-2}'];
        Ybins = Ybins_DRIVER; ichoose_Ybins=1;    
%        Y_driver = UM_time_out.P_save{idat_driver};
        Y_driver = dat_modis_save{idat_driver};         %difference

        
        graph = 977; %new 1D PDF from 2D histo data - can choose either axis
                                %(for watervap)
                                
        axis1D = 'y';                                
        
        logbin_norm = logbin_norm_driver;
        i_plot_norm=i_plot_norm_driver;
        i_div_bin_widths=i_div_bin_widths_driver;
        pdf_type = pdf_type_driver;
                                
%        gcm_str = gcm_str_last_loaded;        

        
 % --------- Override flags for 2D PDF --------
        ioverride_pdf=1;
        %iocean_only=1;
        man_choose_plotTimeHeight_graph=1;
        ioverride_location_selection=1;
        ioverride_pdf_varchoose = 1;

        % --------- Override flags for watervap --------
        man_choose_water_graph=1;    %for watervap 
        
        %---  Run plot script and save
        plotTimeHeightVap3
        close(gcf);
        waterVapourMay2005
        close(gcf);
        
        %store the PDF data
         switch pdf_type_driver
            case 'normal'
                ydat_import(idat_driver) = ydat_norm; %Use the non-cumulative PDF data
                xdat_import(idat_driver) = xdat_norm;
            case 'cumulative'
                ydat_import(idat_driver) = ydat_cum;
                xdat_import(idat_driver) = xdat_cum;
         end
        
       
%        labs_import(idat_driver).l = UM_map.labs_UM(idat_driver).l;
%        labs_import(idat_driver).l = diff_str{idat_driver};
 
        %Replace with a use defined string with a shorter name (e.g. Low
        %aerosol and high aerosol
        labs_import(idat_driver).l = diff_str_DRIVER{idat_driver};
        
        xlab_import = xlab;
        ylab_import = ylab;
        
    



    end
    
    
%% ------------------------------
% ------ plot the combined PDF using case 0 of watervap --------
% ------------------------------


%--- run the file to set up the defaults
watervap_defaults

%--- set some options for this particular plot
graph=0; %graph choice in watervap
titlenam = 'SW PDFs';
xlab='SW TOA UM_time_in.var_units_str';
xlab = [\Delta' xlab_pdf_DRIVER ' ' UM_time_in.var_units_str];
ylab = ylab_import;



xlims=0;
xlimits=[0 100];

izlim=0;
zmin=1500;
zmax=3000;

lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

isave_plot=0;

%idate_ticks_fix=1;
%iaxis_square=0; %switch to make axis square
ichoose_styles=1;

%line_pattern = line_pattern_DRIVER;  line_colour=line_colour_DRIVER; marker_style=marker_style_DRIVER;

line_pattern = UM_time_out{1}.UM_case_out.line_patternUM;  line_colour=UM_time_out{1}.UM_case_out.line_colourUM; marker_style=UM_time_out{1}.UM_case_out.marker_styleUM;

%---  Main script to do plots and save
DRIVER_lineplot_watervap

switch pdf_type_driver
    case 'cumulative'
        set(gca,'xscale','log');
%        set(gca,'xlim',[10 800]);
    case 'normal'
%        set(gca,'xscale','log');
%        set(gca,'xlim',[9 800]);
end
        
        
        
        
        if isave_plot==1
            saveas_ps_fig_emf(gcf,[savename],'',0,1);
            close(gcf);
        end
   
     









                            

                            
                            

                            
                
                    


end
  
    
    
