if ~exist('man_choose_water_graph')
    graph=40;  %ice_budget
    graph=46;  %timeseries_dan
    %graph=45;  %av vert wind
    %graph=61; %wind profilew


    %graph=57; %emm and LEM comparisons, inc. adiabatic LWC

    %graph=56; %vapour eq model plots

    %graph=3; %SF4 vapour data
    %graph=48; %total water before/after plots
    %graph=482; %mean TTL as function of ice sat MR
    %graph=483; %tot and mean TTL from TwoD slices (2d/3d comparison)
    %graph=484; %tot and vap changes from TwoD (low/high CCN)
    %graph=485; %tot and vap changes from TwoD (3D/2D)
    %graph=4852; %tot and vap changes from TwoD (2D)
    %graph=486; %tot and vap changes from TwoD (1km/2km)
    %graph=487; %vap from several 3d cases for vapour and water
    %graph=4872; %vap from two 3d cases for temp change
    %graph=4873; %min vap from two 3d cases
    %graph=4874; %vap/tot from 3d CCN cases
    %graph=4875; %min vap from two 3d cases (general comparison for any runs)
    %graph=4876; %mean vap and tot change for N 3D runs (27Jul07)



    %graph=488; %vapour plots from TwoD (averaged over the 500km either side of y=0)
    %graph=44; %maxw
    %graph=53; %potemp perturbations (percentile plots to check temps)
    %graph=54; %ice sat mr LEM
    %graph=62; %aerosol distribution
    %graph=63; %vapour ozone
    %graph=64; %DMI ozonesondes
    %graph=65;
    %graph=17; %top adown cumulative (weighted) means of total water, etc.
    %graph=66; %3d min
    %graph=67; %tracerflux
    %graph=68; %eddy heat flux contribution
    %graph=69; %mass flux of updraught
    %graph=70; %max ice no.
    %graph=71; %average speeds for Manchester 10k
    %graph=72; %running time breakdown
    %graph=73; %MAC3 plots
    %graph=74; %WRF max profiles
    %graph=744; %WRF maean profiles
    %graph=75; %WRF wind speed
    %graph=76; %WRF wind dir
    %graph=77; %max LEM Q-wfield profiles
%    graph=78; %general WRF plots
    %graph=79; %WRF constant lat/lon slice
%    graph=80; %WRF lat/lon slice of mean contributions to melt
    %graph=81; %WRF distance/lon vs. variable plots
    %graph=82; %houghton/Smith hydraulic plots
    %graph=83; % WRF microphysics for ice heteorogeneous freezing, Bigg's immersion droplet freezing and contact nucleation
    %graph=84; % Froude number as function of depth (thi) for continuous stratification
%    graph=85; % IN concentrations
    %graph=86; % Profiles different locations from the cross section
    
    graph=87; % CAS/CIP size distributions
%    graph=88; % Particle separation distributions
%    graph=89; % Aircraft profiles

    %graph=399; %DMI sounding and ice sat and LEM vapour profile

%    graph=90; % ACPIM vs Matlab profiles
%     graph=91; %CAS/hotwire analysis
%     graph=92; %CAS/hotwire analysis - overall means of all flights
%     graph=93; %CAS number analysis vs mode size
%     graph=94;
     
    time_highlight_path=[];
    
    iytick_relabel=0; %flag to say whether to relabel the y-axis ticks (e.g. for log plot)
    y_axis_type=''; %default
    x_axis_type='';
    i_set_dateticks=0;
    
    xlims=0;
    fsize=14;

else    clear man_choose_water_graph %clear for next time
end

add_ground_height=0.62;

scrsz=get(0,'ScreenSize');
%posit=[9 50 scrsz(3)/1.01 scrsz(4)/1.13];
%posit=[9 50 scrsz(3)/1.9 scrsz(4)/2.1];  %used 22nd Jan, 2009
posit=[9 50 scrsz(3)/1.4 scrsz(4)/1.6];

if ~exist('ifull_screen') | ifull_screen==0
    posit=[9 50 scrsz(3)/1.4 scrsz(4)/1.6];
else
    clear ifull_screen
    posit=[1 -scrsz(2)*0.95 scrsz(3) scrsz(4)];
end

if ~exist('i_highlight_path') | i_highlight_path==0
    time_highlight_path=[];
else
    clear i_highlight_path
end
if ~exist('iadd_terrain') | iadd_terrain==0
    iadd_terrain2=0;
else
    iadd_terrain2=1;
    clear iadd_terrain
end
if ~exist('iplot_latlon') | iplot_latlon==0
    iplot_latlon2=0;
else
    iplot_latlon2=1;
    clear iplot_latlon
end


if ~exist('highlight_type')
    highlight_type='fill';
end
    

lwidth=3; %line width
dual=0;
izlim=0; %flag to say that want y axis limited by zmin and zmax
ixtime=0; %flag set to one when x-axis is time so that times over 24hrs are changed
ititle=1; %flag to give graph a title of titlenam
xloc=0;
add_points=0; %flag to say whether to add labelled points on a plot
no_title=0; %switch to remove the title
iaxis_square=1; %switch to make axis square
%to run from 00:00
ixtick_relabel=0; %flag to say whether to relabel the y-axis ticks (e.g. for log plot)
%x_axis_type=''; %default
iplot_3D=0;




idatetick=0; %flag to put times as HH:MM instead of decimal time
iexecute_script=0; %flag to say whether to execute a script at the end with name script_name
iadd_line=0; %add a line defined by addlineX and addlineY

ixdir=0; %set to -1 to reverse x direction
iydir=0; %same for ydir

f=1e6*28.97/18; %conversion between MR and ppmv - use 18 for water vapour and 48 for ozone
%  Ms=1/6*pi*rhoS*Ds.^3;
% 
% 
% a=find(times~=0);
% dt(2:length(times))=times(2:end)-times(1:end-1);
% dt(a(1))=dt(a(2));
% a=find(times==0);
% dt(a)=1; %avoi5d divide by zero
% dtt=repmat(dt,[150 1]);
% dtt2=repmat(dtt,[1 1 14]);
% dtt3=permute(dtt2,[1 3 2]);

secyA=0;
secyB=0;
lab2='';


if ~exist('subplotting'); subplotting=0; end
if ~exist('idir'); idir=1; end
if ~exist('file_type'); file_type=''; end
    
if ~exist('justplot')
    justplot=0;
end

if justplot==0

clear labs xdat ydat diff xpos ypos point_labs
figname='Vapour graph';
gridon=1; %switch for grid default =1 - note probs with grid when resizing due to extra ticks.s
zmax=25;
zmin=0;
%lor=0;  %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
noplot=0;
logflag=0;
lor=1;  %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
nmark=0; %no. of markers - set to -1 for markers for every point
idirlabel=0; %flag to put directory of run in bottom left corner
savename='';

%xlab='Water Vapour Mixing Ratio (ppmv)';
%ylab='Height (km)';
     
     
    


switch graph
    case 9999999
        % template to copy for new graph
        
        tstr=Times(time,:);
        iund=findstr('_',tstr);
        tstr(iund)=' ';          
        titlenam = ['XXX for ' tstr];
        
        figname=titlenam;
        savename=figname;

        xlims=0;
        xlimits=1000*[0 0.025];
        
        izlim=1;
        zmin=1500;
        zmax=3000;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

        ylab='Height (m)';
        xlab= 'WRF ice number concentration (L^{-1})';



        lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        idat=0;
        
        HGT=WRFUserARW(nca(1).nc,'Z',time,ilat(iloc),ilon(iloc));

        idat=idat+1;
        xdat(idat).x=0.005*exp(0.304*(-tc)); %
        ydat(idat).y=HGT; %
        labs(idat).l='';
        
case 94  %run case 'CAS hotwire matches' in scatter_plot first
        % CAS number analysis
        
        iaxis_square=0; %switch to make axis square
    
        
                
        xlims=1;
        xlimits=[-2 35];
        
        izlim=0;
        zmin=0;
        zmax=4;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.
        xlab= 'Mode CAS diameter (\mum)';
        
        
     

        lor=2; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        idat=0;                
        
        ithresh=1;        
        
        
        type_plot_num='median';
%        type_plot_num='number';
        
        switch type_plot_num
            case 'median'
                titlenam = ['CAS numbers vs mode, concentration threshold ' num2str(ithresh)];
                ylab='Meidan total droplet number (cm^{-3})';
            case 'number'
                titlenam = ['CAS number datapoints vs mode, concentration threshold ' num2str(ithresh)];
                ylab='Number datapoints for meidan total droplet number';
        end
        
        
        
        
        for idat=1:length(lwc_ratio_dat)
             xdat(idat).x=0.5*(CAS_bins(1:end-1) + CAS_bins(2:end)); %
             labs(idat).l=['Flight ' num2str(lwc_ratio_dat(idat).flight)];        
             switch ithresh
                 case 1
                      switch type_plot_num
                         case 'median'
                             ydat(idat).y=lwc_ratio_dat(idat).median_ratio;
                         case 'number'
                             ydat(idat).y=lwc_ratio_dat(idat).nvals;
                     end
                     figname=['Conc. threshold (1) ' titlenam]; 
                 case 2
                     switch type_plot_num
                         case 'median'
                             ydat(idat).y=lwc_ratio_dat(idat).median_ratio2;
                         case 'number'
                             ydat(idat).y=lwc_ratio_dat(idat).nvals2;
                     end
                     figname=['Conc. threshold (2) ' titlenam];                    
                 case 3
                     switch type_plot_num
                         case 'median'
                             ydat(idat).y=lwc_ratio_dat(idat).median_ratio3;
                         case 'number'
                             ydat(idat).y=lwc_ratio_dat(idat).nvals3;
                     end
                     figname=['Conc. threshold (3) ' titlenam];  
                 case 4
                      switch type_plot_num
                         case 'median'
                             ydat(idat).y=lwc_ratio_dat(idat).median_ratio4;
                         case 'number'
                             ydat(idat).y=lwc_ratio_dat(idat).nvals4;
                     end
                     figname=['Conc. threshold (4) ' titlenam]; 
                 case 5
                      switch type_plot_num
                         case 'median'
                             ydat(idat).y=lwc_ratio_dat(idat).median_ratio5;
                         case 'number'
                             ydat(idat).y=lwc_ratio_dat(idat).nvals5;
                      end
                     figname=['Conc. threshold (5) ' titlenam];   
                 case 6
                     switch type_plot_num
                         case 'median'
                             ydat(idat).y=lwc_ratio_dat(idat).median_ratio6;
                         case 'number'
                             ydat(idat).y=lwc_ratio_dat(idat).nvals6;
                     end
                     figname=['Conc. threshold (6) ' titlenam];   

                     
             end

             
        end
        
        
        
           
        
        savename=figname;
        
        
        
 case 93  %run case 'CAS hotwire matches' in scatter_plot first
        % CAS number analysis - overall means
            
        xlims=0;
        xlimits=1000*[0 0.025];
               
        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

        
        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio;
            ratio_array(ilwc,:) = ydata;
            Nratio_array(ilwc,:) = lwc_ratio_dat(ilwc).nvals;
        end

        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio2;
            ratio_array2(ilwc,:) = ydata;
            Nratio_array2(ilwc,:) = lwc_ratio_dat(ilwc).nvals2;            
        end

        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio3;
            ratio_array3(ilwc,:) = ydata;
            Nratio_array3(ilwc,:) = lwc_ratio_dat(ilwc).nvals3;            
        end
        
        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio4;
            ratio_array4(ilwc,:) = ydata;
            Nratio_array4(ilwc,:) = lwc_ratio_dat(ilwc).nvals4;            
        end
        
        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio5;
            ratio_array5(ilwc,:) = ydata;
            Nratio_array5(ilwc,:) = lwc_ratio_dat(ilwc).nvals5;            
        end
        
        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio6;
            ratio_array6(ilwc,:) = ydata;
            Nratio_array6(ilwc,:) = lwc_ratio_dat(ilwc).nvals6;            
        end

         

        xlab= 'Mode CAS diameter (\mum)';
        
        ylab='Mean of meidan ratio CAS to hotwire';
        ylab='Mean no. datapoints for meidan ratio CAS to hotwire';
%        ylab='Mean of meidan ratio CAS to hotwire - campaign in 2 halves';

        titlenam = [ylab ' for all flights'];
        
        figname=titlenam;
        savename=figname;
       
        
        switch ylab
            case 'Mean of meidan ratio CAS to hotwire'
                izlim=0;
                zmin=0;
                zmax=4;
                lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

                idat=0;

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array,1);
                labs(idat).l=['ALL points'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array2,1);
                labs(idat).l=['>25% of max'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array3,1);
                labs(idat).l=['>50% of max'];
                
                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array4,1);
                labs(idat).l=['>65% of max'];
                
                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array5,1);
                labs(idat).l=['>75% of max'];
                
                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array6,1);
                labs(idat).l=['>85% of max'];

            case 'Mean no. datapoints for meidan ratio CAS to hotwire'
                izlim=0;
                zmin=0;
                zmax=4;
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane                

                idat=0;

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array,1);
                labs(idat).l=['ALL points'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array2,1);
                labs(idat).l=['>25% of max'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array3,1);
                labs(idat).l=['>50% of max'];
                
                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array4,1);
                labs(idat).l=['>65% of max'];
                
                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array5,1);
                labs(idat).l=['>75% of max'];
                
                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array6,1);
                labs(idat).l=['>85% of max'];
                
            case 'Mean of meidan ratio CAS to hotwire - campaign in 2 halves'
                izlim=1;
                zmin=0;
                zmax=4;
                lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

                idat=0;
                
                
                ithresh=3;      
                
                titlenam = ['CAS to hotwire ratio median, lwc threshold ' num2str(ithresh)];
                
                switch ithresh
                    case 1
                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array(1:7,:),1);
                        labs(idat).l=['108 and before'];

                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array(8:end,:),1);
                        labs(idat).l=['Post 108'];
                        
                        figname=['LWC threshold (1) ' titlenam];  
                        
                    case 2
                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array2(1:7,:),1);
                        labs(idat).l=['108 and before'];

                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array2(8:end,:),1);
                        labs(idat).l=['Post 108'];
                        
                        figname=['LWC threshold (2) ' titlenam];  
                        
                    case 3                       
                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array3(1:7,:),1);
                        labs(idat).l=['108 and before'];

                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array3(8:end,:),1);
                        labs(idat).l=['Post 108'];
                        
                        figname=['LWC threshold (3) ' titlenam];  
                
                end

        
        end
        
        
        
   case 92  %run case 'CAS hotwire matches' in scatter_plot first
        % CAS/hotwire analysis - overall means
        
    
    

        xlims=0;
        xlimits=1000*[0 0.025];
        
       

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

        
        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio;
            ratio_array(ilwc,:) = ydata;
            Nratio_array(ilwc,:) = lwc_ratio_dat(ilwc).nvals;
        end

        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio2;
            ratio_array2(ilwc,:) = ydata;
            Nratio_array2(ilwc,:) = lwc_ratio_dat(ilwc).nvals2;            
        end

        for ilwc=1:length(lwc_ratio_dat)
            ydata=lwc_ratio_dat(ilwc).median_ratio3;
            ratio_array3(ilwc,:) = ydata;
            Nratio_array3(ilwc,:) = lwc_ratio_dat(ilwc).nvals3;            
        end

         

        xlab= 'Mode CAS diameter (\mum)';
        
        ylab='Mean of meidan ratio CAS to hotwire';
        ylab='Mean no. datapoints for meidan ratio CAS to hotwire';
        ylab='Mean of meidan ratio CAS to hotwire - campaign in 2 halves';

        titlenam = [ylab ' for all flights'];
        
        figname=titlenam;
        savename=figname;
       
        
        switch ylab
            case 'Mean of meidan ratio CAS to hotwire'
                izlim=1;
                zmin=0;
                zmax=4;
                lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

                idat=0;

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array,1);
                labs(idat).l=['CAS 0.02, HW 0.05'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array2,1);
                labs(idat).l=['CAS 0.02, HW 0.1'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(ratio_array3,1);
                labs(idat).l=['CAS 0.1, HW 0.1'];

            case 'Mean no. datapoints for meidan ratio CAS to hotwire'
                izlim=0;
                zmin=0;
                zmax=4;
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane                

                idat=0;

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array,1);
                labs(idat).l=['CAS 0.02, HW 0.05'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array2,1);
                labs(idat).l=['CAS 0.02, HW 0.1'];

                idat=idat+1;
                xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                ydat(idat).y=meanNoNan2(Nratio_array3,1);
                labs(idat).l=['CAS 0.1, HW 0.1'];
                
            case 'Mean of meidan ratio CAS to hotwire - campaign in 2 halves'
                izlim=1;
                zmin=0;
                zmax=4;
                lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

                idat=0;
                
                
                ithresh=3;      
                
                titlenam = ['CAS to hotwire ratio median, lwc threshold ' num2str(ithresh)];
                
                switch ithresh
                    case 1
                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array(1:7,:),1);
                        labs(idat).l=['108 and before'];

                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array(8:end,:),1);
                        labs(idat).l=['Post 108'];
                        
                        figname=['LWC threshold (1) ' titlenam];  
                        
                    case 2
                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array2(1:7,:),1);
                        labs(idat).l=['108 and before'];

                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array2(8:end,:),1);
                        labs(idat).l=['Post 108'];
                        
                        figname=['LWC threshold (2) ' titlenam];  
                        
                    case 3                       
                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array3(1:7,:),1);
                        labs(idat).l=['108 and before'];

                        idat=idat+1;
                        xdat(idat).x=0.5*(CAS_bins(1:end-1)+CAS_bins(2:end)); %
                        ydat(idat).y=meanNoNan2(ratio_array3(8:end,:),1);
                        labs(idat).l=['Post 108'];
                        
                        figname=['LWC threshold (3) ' titlenam];  
                
                end

        
        end
             
        
     
        
        
        
        
    case 91  %run case 'CAS hotwire matches' in scatter_plot first
        % CAS/hotwire analysis
        
        iaxis_square=0; %switch to make axis square
    
        
                
        xlims=1;
        xlimits=[-2 35];
        
        izlim=1;
        zmin=0;
        zmax=4;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.
        xlab= 'Mode CAS diameter (\mum)';
        
        
        ylab='Meidan ratio CAS to hotwire';

        lor=2; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        idat=0;                
        
        ithresh=2;        
        titlenam = ['CAS to hotwire ratio median, lwc threshold ' num2str(ithresh)];
        
        for idat=1:length(lwc_ratio_dat)
             xdat(idat).x=0.5*(CAS_bins(1:end-1) + CAS_bins(2:end)); %
             labs(idat).l=['Flight ' num2str(lwc_ratio_dat(idat).flight)];        
             switch ithresh
                 case 1
                     ydat(idat).y=lwc_ratio_dat(idat).median_ratio;
                     figname=['LWC threshold (1) ' titlenam];
                 case 2
                     ydat(idat).y=lwc_ratio_dat(idat).median_ratio2;
                     figname=['LWC threshold (2) ' titlenam];                     
                 case 3
                     ydat(idat).y=lwc_ratio_dat(idat).median_ratio3;
                     figname=['LWC threshold (3) ' titlenam];                     
             end

             
        end
        
        savename=figname;
        
        
        
        
    case 90
        % ACPIM profiles
        
%        tstr=Times(time,:);
%        iund=findstr('_',tstr);
%        tstr(iund)=' ';          
        
        xlims=0;
        
        izlim=1;
        zmin=1500;
        zmax=5000;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

        
            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        ylab='Height (m)';        
        
        xlab= 'Cloud water Mixing Ratio (g m^{-3})';
%        xlab= 'Droplet Concentration (cm^{-3})';
%        xlab= 'Potential temperature (K)';        
%        xlab= 'Water vapour (g kg^{-1})';   
%        xlab= 'RH';   
%        xlab='Pressure (hPa)';


        DT=0.5; %ACPIM timestep - should make Acpim output this
        time_plot=79; %seconds
        time_plot=100.5; %seconds
%        time_plot=0; %seconds
        
        %Matlab model index
        it2=findheight_nearest(time,time_plot);
        
        %ACPIM index
        it=time_plot/DT +1; %assuming that it=1 is time=0
        if size(acpim.qc,2)==1 %if a parcel run
            it = [1:size(acpim.qc,1)];
            zInit = 2455; %initial height of parcel (m) if a parcel run
        %if doing a parcel run then change the Matlab wave model
        %indices to be all the time indices for the right starting height
            it2 = [1:size(LWC_humi_ALL,2)];            
            iz_wave = findheight_nearest(YY(:,1),zInit);
        else
            iz_wave=[1:size(YY,1)];
            zInit=0;
        end
        
        
        
        %ACPIM density array
        rho=density(acpim.P,acpim.T);
        
        
        
        idat=0;
        
        switch xlab
            case 'Cloud water Mixing Ratio (g m^{-3})'
                idat=idat+1;                
                xdat(idat).x=1000*acpim.qc(it,:).*rho(it,:); %convert to g/m3 from kg/kg
%                xdat(idat).x=1000*acpim.qc(it,:); %convert to g/m3 from kg/kg                
                ydat(idat).y=acpim.Z(it,:)+zInit; %
                labs(idat).l='ACPIM';                               
                
                idat=idat+1;
%                xdat(idat).x=LWChumi_reg(:,it2); %
%                xdat(idat).x=max(LWChumi_reg(:,:),[],2); %  
%                ydat(idat).y=z;
                
                xdat(idat).x=LWC_humi_ALL(iz_wave,it2); %                
                ydat(idat).y=YY(iz_wave,it2); %
                labs(idat).l='Wave model humicap';
                
%                 idat=idat+1;                
%                 xdat(idat).x=LWC_fp_ALL(iz_wave,it2); %                
%                 ydat(idat).y=YY(iz_wave,it2); %
%                 labs(idat).l='Wave model humicap';
                

                %aircraft LWC - max LWC with height profiles
                idat=idat+1;
                %aircraft CAS lwc timeseries
                set_column_numbers_for_flight_data; %gives col_alt, etc.
                indsCAS=1:length(CAS_time_all);
                lwc_air = interp1(CIP_time_all,LWC_CAS_all',CAS_time_all(indsCAS));
                z_air = interp1(dat_flt(:,1)/1e3,dat_flt(:,col_alt),CAS_time_all(indsCAS))';
                %bin the lwc into height bins
                zbins = [0:25:5000];
                [meanvals,maxvals,max_inds,mid_bins]=bin_data(z_air,lwc_air,zbins);
                maxvals(maxvals>3)=0; %remove the dodgy point
                
                xdat(idat).x = maxvals;
                ydat(idat).y = mid_bins;
                labs(idat).l='Hotwire LWC max';
                
                xlims=1;
                xlimits=[-0.2 0.8];
                
            case 'Droplet Concentration (cm^{-3})'
                idat=idat+1;
                xdat(idat).x=1e-6*acpim.conc2(it,:).*rho(it,:); %convert to #/cm3 from #/kg
                ydat(idat).y=acpim.Z(it,:)+zInit; %
                labs(idat).l='ACPIM';                               
                               
%                 %aircraft LWC - max LWC with height profiles
%                 idat=idat+1;
%                 %aircraft CAS lwc timeseries
%                 set_column_numbers_for_flight_data; %gives col_alt, etc.
%                 indsCAS=1:length(CAS_time_all);
%                 lwc_air = interp1(CIP_time_all,LWC_CAS_all',CAS_time_all(indsCAS));
%                 z_air = interp1(dat_flt(:,1)/1e3,dat_flt(:,col_alt),CAS_time_all(indsCAS))';
%                 %bin the lwc into height bins
%                 zbins = [0:25:5000];
%                 [meanvals,maxvals,max_inds,mid_bins]=bin_data(z_air,lwc_air,zbins);
%                 maxvals(maxvals>3)=0; %remove the dodgy point
                
%                 xdat(idat).x = maxvals;
%                 ydat(idat).y = mid_bins;
%                 labs(idat).l='Hotwire LWC max';

                    xlims=0;
                    xlimits=[0 0.8];
                    
            case 'Potential temperature (K)'
                idat=idat+1;
                xdat(idat).x=acpim.T(it,:).*(1e5./acpim.P(it,:)).^0.286; %
                ydat(idat).y=acpim.Z(it,:)+zInit; %
                labs(idat).l='ACPIM';    
                
                idat=idat+1;
%                xdat(idat).x=pot_reg(:,it2); %
                 xdat(idat).x=pot_wave(iz_wave,it2); %
%                ydat(idat).y=z; %
                ydat(idat).y=YY(iz_wave,it2); %
                labs(idat).l='Wave model';
                
            case 'Water vapour (g kg^{-1})'
                idat=idat+1;
                qsat_acpim = SatVapPress(acpim.T(it,:),'buck2','liq',acpim.P(it,:),1)/f;
                xdat(idat).x=acpim.R(it,:).*qsat_acpim; %convert to #/cm3 from #/kg
                ydat(idat).y=acpim.Z(it,:)+zInit; %
                labs(idat).l='ACPIM';    
                
                idat=idat+1;
%                xdat(idat).x=qv_humi_reg(:,it2); %
%                ydat(idat).y=z; %

                xdat(idat).x=qv_wave_humi(iz_wave,it2);
                ydat(idat).y=YY(iz_wave,it2); %
                
                labs(idat).l='Wave model';
                
             case 'RH'
                idat=idat+1;                
                xdat(idat).x=acpim.R(it,:); %
                ydat(idat).y=acpim.Z(it,:)+zInit; %
                labs(idat).l='ACPIM';    
                
                idat=idat+1;
%                xdat(idat).x=qv_humi_reg(:,it2); %
%                ydat(idat).y=z; %
                qsat_wave = SatVapPress(Tad_humi_ALL(iz_wave,it2)+273.15,'buck2','liq',PY(iz_wave,it2),1)/f;
%                qsat_wave = SatVapPress(Tad_humi_ALL(iz_wave,it2)+273.15,'goff','liq',PY(iz_wave,it2),1)/f;                
                xdat(idat).x=qv_wave_humi(iz_wave,it2) ./ qsat_wave;
                ydat(idat).y=YY(iz_wave,it2); %
                
                labs(idat).l='Wave model';    
                
            case 'Pressure (hPa)'
                idat=idat+1;
                xdat(idat).x=100*acpim.P(it,:); %convert to #/cm3 from #/kg
                ydat(idat).y=acpim.Z(it,:)+zInit; %
                labs(idat).l='ACPIM';    
                
                idat=idat+1;
%                xdat(idat).x=qv_humi_reg(:,it2); %
%                ydat(idat).y=z; %

                xdat(idat).x=100*PY(iz_wave,it2);
                ydat(idat).y=YY(iz_wave,it2); %
                
                labs(idat).l='Wave model';
                
        end
   
        titlenam = ['ACPIM plots at t=' num2str(time_plot) ' s'];
        figname=[titlenam '-' xlab];
        savename=figname;
        
case 89
        % profiles from aircraft        
        
       
        xlims=0;
        xlimits=1000*[0 0.025];
        
        izlim=0;
        zmin=1500;
        zmax=3000;

        nmark=0; %-1 means that all points have markers. Otherwise only plot the number specified.
        lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
        
        ylab='Height (m)';
%        ylab='Potential Temperature (K)';
%        ylab='Equivalent Potential Temperature (K)';
        
        eval_str=['dat_flt=dat_flt' flight_no ';'] %run the CAS read first or manually set flight_no 
        eval(eval_str);
        
        if ~exist('man_choose_case89_xlab')

            xlab= 'Temperature (^{o}C)';
%            xlab= 'Potential temperature (K)';       
            xlab='Vapour mixing ratio (kg kg^{-1}) from frost point hygrometer';
            xlab='Vapour mixing ratio (kg kg^{-1}) from humicap';       
%             xlab= 'Pressure (hPa)';
             xlab= 'Wind speed (m s^{-1})';
            xlab= 'Wind direction (degrees)';
%            xlab= 'Total ice number (L ^{-1})';    
%            xlab='Mean ice size (microns)';
%            xlab='Total CIP mass Jonny (mg m^{-3})';
%            xlab='Total CIP number Jonny (cm^{-3})';
%            xlab='Ice+small CIP number Jonny (L^{-1})';
            
            %set the times to plot from the timeseries for the profile
            %set to [] for all times.
            times=[14.65 14.835; 15.285 16.097]/24;
            %        times=[14.7075 14.835];
            %        times=[14.81 14.835];
            times=[14.05 14.67]/24;
            times=[13.25 14]/24;
            times=[13+35/60 14+10/60]/24;
            times=[14+0/60 14+20/60]/24;
            times=[21.6772 22.0281]/24; %flight 102 end profile
            times=[19.6861 20.3949]/24; %flight 102 start profile            
            times=[19.6861 20.3949;21.6772 22.0281]/24; %flight 102 start profile        
            
            
            times=[];



            ihighlight_cloud=0;
        else
            clear man_choose_case89_xlab
        end

        
       
            
            
            tstr=date_str;
            iund=findstr('_',tstr);
            tstr(iund)=' ';
            titlenam = ['Profile of ' xlab ' at ' tstr ' for flight ' flight_no];

            figname=titlenam;
            savename=figname;

        
clear indsALL
        if length(times)==0
            indsALL(1).i=1:length(dat_flt(:,1));
            times=0; %so that size(times,1)=1 (as used later)
        else
            for i_inds=1:size(times,1)
                [time_0,time_1]=findheight_nearest(dat_flt(:,1)/1000/3600/24,times(i_inds,1),times(i_inds,2));
                indsALL(i_inds).i=time_0:time_1;
            end
        end
        
        if size(dat_flt,2)==15
            %for flt_19
            col_temp=6;
            col_alt=11;
            col_lat=2;
            col_lon=3;
            col_press=4;
            col_wind=9;
            col_winddir=10;
        else
            %for Feb2010 flights
            col_temp=5;
            col_alt=12;
            col_lat=2;
            col_lon=3;
            col_press=6;
            col_wind=9;
            col_winddir=10;
            col_frostpoint_hygro=7;
            col_frostpoint_humi=8;
            col_airspeed=4;
        end

                idat=0;
                
        for idat2=1:size(times,1)
            
            switch ylab
                case 'Potential Temperature (K)'
                    idat=idat+1;
                    inds=indsALL(idat).i;
                    T=dat_flt(inds,col_temp)+273.15; %
                    P=dat_flt(inds,col_press); %
                    potemp = T.*(1000./P).^0.286;
                    ydat(idat).y=potemp;   
                    
                    idat=idat-1;  %reset for later use  
                    
                case 'Equivalent Potential Temperature (K)'
                    idat=idat+1;
                    inds=indsALL(idat).i;
                    T=dat_flt(inds,col_temp)+273.15; %
                    P=100*dat_flt(inds,col_press); %
                    potemp = T.*(1000./P).^0.286;
                    
                    eval_str = ['qv=qv_flt' flight_no '_fp(inds);'];
                    eval_str = ['qv=qv_flt' flight_no '_humi(inds);'];                    
                    eval(eval_str);                    
                    
                    equiv = ( (T + 2.453e6*qv/1004).*(1e5./P).^0.286 )';
                    ydat(idat).y=equiv;  
                    
                    idat=idat-1;   
                otherwise %use height
                    idat=idat+1;
                    ydat(idat).y=dat_flt(inds,col_alt);
                    idat=idat-1;
                    
            end

        switch xlab
            case 'Temperature (^{o}C)'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=dat_flt(inds,col_temp); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(2),1)/1000/3600) ' UTC'];
                
            case 'Potential temperature (K)'
%                for idat=1:size(times,1)
                    idat=idat+1;
                    inds=indsALL(idat).i;
                    T=dat_flt(inds,col_temp)+273.15; %
                    P=dat_flt(inds,col_press); %
                    xdat(idat).x = T.*(1000./P).^0.286;
%                    ydat(idat).y=dat_flt(inds,col_alt); %
                    labs(idat).l=[datestr(dat_flt(inds(1),1)/1000/3600,13) ' - ' datestr(dat_flt(inds(end),1)/1000/3600,13) ' UTC'];
 %               end
                
%                 idat=idat+1; inds=indsALL(idat).i;
%                 T=dat_flt(inds,col_temp)+273.15; %
%                 P=dat_flt(inds,col_press); %
%                 xdat(idat).x = T.*(1000./P).^0.286;
%                 ydat(idat).y=dat_flt(inds,col_alt); %
%                 labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(2),1)/1000/3600) ' UTC'];
%                 
                xlims=0;
                xlimits=[270 285];
                xlimits=[271 280];
                
            case 'Vapour mixing ratio (kg kg^{-1}) from frost point hygrometer'
                idat=idat+1; inds=indsALL(idat).i;
                eval_str = ['xdat(idat).x=qv_flt' flight_no '_fp(inds);'];
                eval(eval_str);
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
              
                
            case 'Vapour mixing ratio (kg kg^{-1}) from humicap'
                idat=idat+1; inds=indsALL(idat).i;
                eval_str = ['xdat(idat).x=qv_flt' flight_no '_humi(inds);'];
                eval(eval_str);
%                ydat(idat).y=dat_flt(inds,col_alt); %
                

                                
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                
                
                
             case 'Pressure (hPa)'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=dat_flt(inds,col_press); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                
             case 'Wind speed (m s^{-1})'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=dat_flt(inds,col_wind); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                
                xlims=1;
                xlimits=[0 15];
                
                
             case 'Wind direction (degrees)'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=dat_flt(inds,col_winddir)+180; %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                
            case 'Total ice number (L ^{-1})'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=interp1(CIP_time_Jonny/3600,1000*ice_no_CIP_Dan,time_flt(inds)); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            
            case 'Mean ice size (microns)'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=interp1(CIP_time_Jonny/3600,mean_ice_size,time_flt(inds)); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                
            case 'Total CIP mass Jonny (mg m^{-3})'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=1000*interp1(CIP_time_Jonny(1:end-1)/3600,total_mass_Jonny,time_flt(inds)); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            case 'Total CIP number Jonny (cm^{-3})'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=interp1(CIP_time_Jonny(1:end)/3600,ice_no_tot_CIP_Dan,time_flt(inds)); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            case 'Ice+small CIP number Jonny (L^{-1})'
                idat=idat+1; inds=indsALL(idat).i;
                xdat(idat).x=1000*interp1(CIP_time_Jonny(1:end)/3600,sum(ice_PSD+small_PSD,1),time_flt(inds)); %
%                ydat(idat).y=dat_flt(inds,col_alt); %
                labs(idat).l=[num2str(dat_flt(inds(1),1)/1000/3600) ' - ' num2str(dat_flt(inds(end),1)/1000/3600) ' UTC'];
                lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                
                xlims=1;
                xlimits=[0 0.02*1000];
                                
        end
        
        labs(idat).l=[datestr(dat_flt(inds(1),1)/1000/3600/24,13) ' - ' datestr(dat_flt(inds(end),1)/1000/3600/24,13) ' UTC'];
        

    end %for idat2=1:size(times,1)
        
                idat=length(xdat);

                if ihighlight_cloud==1
                    highlight_cloud_method = 'CAS LWC';

                    xdat(3:idat+1)=xdat(2:idat);
                    ydat(3:idat+1)=ydat(2:idat);
                    labs(3:idat+1)=labs(2:idat);
                    idat=1;

                    switch highlight_cloud_method

                        case 'CAS LWC'
                            inds=indsALL(1).i;
                            times=dat_flt(inds,1)/1000;                            
                            indsCAS=find(CAS_time_all>=times(1) & CAS_time_all<=times(end));
                            lwc_threshold=0.01;
                            icloud = find( LWC_dist_cas(indsCAS) > lwc_threshold );
                           
%                            xdat(idat+1).x = NaN*ones(size(times));
                            xdat(idat+1).x = NaN*ones(size(indsCAS)); 
                            ydat(idat+1).y = NaN*ones(size(indsCAS));                             
                            xdat(idat+1).x(icloud) = interp1(times,xdat(1).x,CAS_time_all(indsCAS(icloud)));
                            ydat(idat+1).y(icloud) = interp1(times,ydat(1).y,CAS_time_all(indsCAS(icloud)));
%                            ydat(idat+1).y = dat_flt(inds,col_alt);
                            labs(idat+1).l=['Cloud (CAS>' num2str(lwc_threshold) ' g m^{-3})'];
                    end



                    nmark=zeros(size(xdat));
                    nmark(idat+1)=-1; %put markers on the cloud data to make it stand out (thicker line)
                end
        
        
        
        
        
        
        
        
        if izlim==0
            izlim=1;
            zmin=0;
            zmax=max(ydat(1).y);
        end
        
case 88
        %
        
        tstr=date_str;
        iund=findstr('_',tstr);
        tstr(iund)=' ';          
        titlenam = ['Particle separation distribution for ' tstr ' for flight ' flight_no];
        
        figname=titlenam;
        savename=figname;
        
        ixtick_relabel=0;
        x_axis_type='';
%        x_axis_type='log10_matlab';
        

        
        xlims=0;
        xlimits=1000*[0 0.025];
        
        izlim=0;
        zmin=1500;
        zmax=3000;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

        ylab='Log10 of particle separation N';   
%        ylab='Particle separation N';           
%        xlab='???';
        
        instrument_sd_all={'CAS'};
%        instrument_sd_all={'CIP'};
%        instrument_sd_all={'CAS','CIP'};



        lor=1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        idat=0;    
                          
            
        time_plot=14.695;
        time_plot=14.698;
        time_plot=14.707;
        time_plot=14.7098;
        time_plot=16.6812;
        time_plot=17.3595;
        time_plot=17.4330;
        time_plot=17.48157;
        time_plot=17.582; %nebuliser not working
        time_plot=17.6215; %nebuliser
        time_plot=17.3212; %no beads 2
        time_plot=[19.13 19.33]; %flight 104 19:00
        time_plot=[20.0425 20.0975]; %flight 104 20:00
        time_plot=20.09;
        time_plot=[21.0012 21.109];
        time_plot=[19.3667 19.6333]; %flight l05
        time_plot=[18.2928 18.3216]; %flight l23 - CAS/CIP overlap attempt - good match
        time_plot=[19.846 19.854]; %flight l23 - CAS/CIP overlap attempt2
%        time_plot=[19.86 19.88]; %flight l23 - CAS/CIP overlap - CAS counts test
        time_plot=[18.794 18.804]; %flight l22 - CAS/CIP overlap - CAS counts test
        time_plot=[18.93 18.965]; %flight l22 - CAS/CIP overlap - CAS counts test2        
        time_plot=[18.262 18.324]; %flight l20 - CAS/CIP overlap - CAS counts test  
        time_plot=[18.262 18.273]; %flight l20 - CAS/CIP overlap - CAS counts test 
%        time_plot=[16.472 16.628]; %flight l13 - CAS/CIP overlap - CAS counts test         
%        time_plot=[16.421 16.4325]; %flight l13 - cloud "spike" before the last main broader spike                         
%        time_plot=[19.7984 19.806]; %flight l05 - CAS/CIP overlap - CAS counts test   
        time_plot=[20.7894 20.7902]; %flight 102       
        
%        time_plot=[CAS_time_all(1) CAS_time_all(end-1)]/3600;
        
        savename = [savename ' ' num2str(time_plot) ' ' ylab];
        
        
        clear itime
        
    for idat=1:length(instrument_sd_all)
            instrument_sd=instrument_sd_all{idat};
            
        
        for itime_plot=1:length(time_plot)
            switch instrument_sd
                case 'CAS'
                    itime(itime_plot)=findheight_nearest(CAS_time_all/3600,time_plot(itime_plot));
                case 'CIP'
                    itime(itime_plot)=findheight_nearest(CIP_time_all/3600,time_plot(itime_plot));

            end
        end
        
        time_inds = itime(1):itime(end);
        
        ydat(idat).y = mean(CAS_psep_all(time_inds,:),1);
        xdat(idat).x=[1:size(CAS_psep_all,2)]; %
                  
            switch ylab
                case 'Particle separation N'
                    iytick_relabel=0;          
                    y_axis_type='';
                    
                case 'Log10 of particle separation N'    
                    iytick_relabel=1;
                    y_axis_type='log10_matlab';
            end
            
            switch length(time_plot)
                case 2
                    labs(idat).l=['Mean ' datestr(time_plot(1)/24,15) '-' datestr(time_plot(2)/24,15) ' UTC ' instrument_sd];  
                otherwise
                    labs(idat).l=[num2str(time_plot) ' UTC ' instrument_sd];  
            end
            
    end        
        
case 87
        %
        if exist('tstr')
            tstr=date_str;
            iund=findstr('_',tstr);
            tstr(iund)=' ';
        else
            tstr='';
            flight_no='';
            date_str='';
        end
        
        ixtick_relabel=1;
%         x_axis_type='log10';
%         x_axis_type='log10_matlab';
%         x_axis_type='';

        if length(x_axis_type)==0
            ixtick_relabel=0;
        end
        
        
        
        xlims=0;
        xlimits=1000*[0 0.025];
        
        iadd_line=0;
       
        
        izlim=0;
        zmin=1500;
        zmax=3000;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

xlab='Diameter (\mum)';

if ~exist('ichoose_times_size_dists')
    
        iytick_relabel=1;       
        y_axis_type='log10_matlab';
        y_axis_type='';
        
        x_axis_type='log10_matlab';
        x_axis_type='';
                
        

        ylab='N (cm^{-3})';
        ylab='dN/dlogD (cm^{-3} \mum^{-1})';
%        ylab='dN/dD (cm^{-3} \mum^{-1})';
        

        
        instrument_sd_all={'BAS CAS'};
%        instrument_sd_all={'MAN CAS Karl'};   
%        instrument_sd_all={'CDP Karl','MAN CAS Karl'};           
%        instrument_sd_all={'BAS CAS'};        
%        instrument_sd_all={'MAN CAS','BAS CAS'}; 
%        instrument_sd_all={'CAS 29th June 2010'}; %comparison to Manchester CAS
        instrument_sd_all={'CIP'};
%        instrument_sd_all={'CAS','CIP'};
%        instrument_sd_all={'CAS','CAS back','CIP'}; 
%        instrument_sd_all={'CAS','CAS back','CIP_Jonny','CIP','CIP_Ice'};         
%        instrument_sd_all={'CIP_Ice'};
%        instrument_sd_all={'Welas'};
%        instrument_sd_all={'FSSP'};        

        instrument_ratio=0;

end

if length(y_axis_type)==0
        iytick_relabel=0;
end
        


if instrument_ratio==1
    titlenam = ['Ratio of particle size dists for ' tstr ' for flight ' flight_no];
else
    titlenam = ['Particle size distribution for ' tstr ' for flight ' flight_no];
end
        
        figname=titlenam;
        savename=figname;



        lor=-1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
        lor=1;
        
        idat=0;    
        
         if ~exist('icas_count')
                icas_count=1;
            end

            %%% these are set in plotTimeHeightVap3.m - might want to override here
            % or to make sure they are the same if requried
            if ~exist('cut_off_size')
                cut_off_size=1; %size (microns) below which to ignore counts for particle concentration
            end
            if ~exist('air_speed_type')
                %air_speed_type = 'aircraft';
                %air_speed_type = 'constant 60m/s';
                air_speed_type = 'CIP probe';
            end
            if ~exist('TAS') | ~exist('CIP_time')
                air_speed_type = 'constant';
            else
                if length(TAS)~=length(CIP_time)
                    air_speed_type = 'constant';
                else
                    air_speed_type = 'CIP probe';
                end
            end
            

    %%%    ------------------------------------   %%%
            
           %get the sample volume and total concentrations, plus air speed if required.           
%             [sample_volume_CAS,sample_volume_CIP,air_speed_1D,air_speed,CAS_total_number(icas_count)...
%                 ,CIP_total_number(icas_count),LWC_dist_cas,LWC_dist_cip]...
%                 =cas_sample_volume_and_stats(dat_flt,CAS_time_all...
%                 ,CAS_bins,CAS_counts_all,CIP_time_all,CIP_bins,CIP_counts_all...
%                 ,air_speed_type,cut_off_size,TAS_all,20);   
            
            

if ~exist('ichoose_times_size_dists')
            
        time_plot=14.695;
        time_plot=14.698;
        time_plot=14.707;
        time_plot=14.7098;
        time_plot=16.6812;
        time_plot=17.3595;
        time_plot=17.4330;
        time_plot=17.48157;
        time_plot=17.582; %nebuliser not working
        time_plot=17.6215; %nebuliser
        time_plot=17.3212; %no beads 2
        time_plot=[19.13 19.33]; %flight 104 19:00
        time_plot=[20.0425 20.0975]; %flight 104 20:00
        time_plot=20.09;
        time_plot=[21.0012 21.109];
        time_plot=[19.3667 19.6333]; %flight l05
%         time_plot=[18.2928 18.3216]; %flight l23 - CAS/CIP overlap attempt - good match
%         time_plot=[19.846 19.854]; %flight l23 - CAS/CIP overlap attempt2
% %        time_plot=[19.86 19.88]; %flight l23 - CAS/CIP overlap - CAS counts test
%         time_plot=[18.794 18.804]; %flight l22 - CAS/CIP overlap - CAS counts test
%         time_plot=[18.93 18.965]; %flight l22 - CAS/CIP overlap - CAS counts test2        
%         time_plot=[18.262 18.324]; %flight l20 - CAS/CIP overlap - CAS counts test  
% %        time_plot=[18.262 18.273]; %flight l20 - CAS/CIP overlap - CAS counts test 
% %         time_plot=[16.472 16.628]; %flight l13 - CAS/CIP overlap - CAS counts test         
% %         time_plot=[16.421 16.4325]; %flight l13 - cloud "spike" before the last main broader spike                         
% %        time_plot=[19.7984 19.806]; %flight l05 - CAS/CIP overlap - CAS counts test                 
%         time_plot=[19.35 19.48]; %flight l20 - 19.35 - 19.49 period (19:21 - 19:29) 
% %        time_plot=[19.335+idir*0.005 19.335+(idir+1)*0.005]; %flight l20 - 19.35 - 19.49 period (19:21 - 19:29) 
% %        time_plot=[19.335+idir*0.005]; %flight l20 - 19.35 - 19.49 period (19:21 - 19:29) 
%         time_plot=[19.1104 19.1132];
% %        time_plot=[20.296 20.298];  
%         time_plot=[13.1308 13.1328]; 
%         time_plot=[12.6952 12.6974];     
%         time_plot=[17.3595 17.3603]; %15 micron 
%         time_plot=[17.4330 17.4338]; %30 micron    
%         time_plot=[17.4816 17.4852]; %Lycopodium            
%         time_plot=[17.6176 17.6257]; %Nebulizer
%         time_plot=[17.3203 17.3236]; %No particles   
         time_plot=[16.5412 16.5428]; %31/01/10  15 microns 1
%         time_plot=[16.6154 16.6172]; %31/01/10  15 microns 2
%         time_plot=[16.9284 16.93]; %31/01/10  15 microns 3       
%         time_plot=[16.708 16.7097]; %31/01/10  30 microns 
%         time_plot=[16.733 16.739]; %31/01/10  empty
%         time_plot=[16.4945 16.4963]; %31/01/10  lipo       
%         time_plot=[16.8534 16.86]; %31/01/10  nebu    
%         time_plot=[15.4 15.9]; %flight 99 - CAS/CIP overlap - CAS counts test         
%         time_plot=[14.42 14.9]; %flight 100 - CAS/CIP overlap - CAS counts test  
%         time_plot=[13.72 14.1]; %flight 100 - CAS/CIP overlap - CAS counts test  
%         time_plot=[21.1348 21.1384]; %flight 102 - CAS/CIP overlap - CAS counts test          
%         time_plot=[19.9 20.34]; %flight 102 - CAS/CIP overlap - CAS counts test    
%         time_plot=[21 22]; %flight 108 - CAS/CIP overlap - CAS counts test   
          time_plot=[13+56/60+1/3600 13+57/60+40/3600]; %flight 100 - second droplet period on descent
          time_plot=[13+52/60+46/3600 13+53/60+31/3600]; %flight 100 - second droplet period on ascent
          time_plot=[14+13/60+0/3600 14+19/60+0/3600];
%          time_plot=[welas_dat.time_of_day(1)/3600 welas_dat.time_of_day(end)/3600];
          time_plot=[20+20/60 20+40/60]; %leg 1, flight 102 approx 60-160 km along track
%          time_plot=[20+40/60 21+00/60]; %leg 2, flight 102 approx 155-240 km along track          
          time_plot=[21+00/60 21+20/60]; %leg 3, flight 102 approx 155-240 km along track          
          time_plot=[21+30/60 21+42/60]; %leg 4, flight 102 approx 155-240 km along track   
          time_plot=[20+19.4/60 20+23/60]; %leg 1, first out of cloud portion     
%          time_plot=[20.425 20.445]; %leg 1, first out of cloud portion               
          time_plot=[9.852 10.188; 9.852 10.188]; %leg 1, first out of cloud portion                     
          time_plot=[9.3960 13.6824; 9.3960 13.6824]; %leg 1, first out of cloud portion  
          time_plot=[20.6328 20.6472]; %flight 102 high droplet concs at 20:38 or 146.7 km
%          time_plot=[20.5824 20.5944]; %flight 102 slightly lower droplet concentrations 20:35 or 130.5 km
          
          time_plot=[];          
else
    clear ichoose_times_size_dists
end

CAS_LWC_cut_off_sizes=[0 50];
         
        str_times=num2str(time_plot);
        str_times=str_times(:)';
        savename = [savename ' ' str_times ' ' ylab];
        
%        log_bins = log10(CAS_bins);
        
        clear itime
        
    for idat=1:length(instrument_sd_all)
            instrument_sd=instrument_sd_all{idat};
            if size(time_plot,1)>=idat
                str_times_single=num2str(time_plot(idat,:));
            else
                str_times_single='';
            end
%            str_times_single=str_times_single;
            
            switch instrument_sd
                case 'MAN CAS'
                   data_particle = data_CAS_PACS(41:41+29,:)';
                   time_timeseries = data_CAS_PACS(1,:);

                [sample_volume_CAS,sample_volume_CIP,air_speed_1D,air_speed,CAS_total_number(icas_count)...
                    ,CAS_total_number_cutoff ...                    
                    ,CIP_total_number(icas_count),LWC_dist_cas,LWC_dist_cip,CAS_mode_diameter...
                    ,CAS_mean_diameter,LWC_dist_cas_cutoff,LWC_size_dist,bin_range,LWC_dist_cas_cutoff2,MVD,MVD_cut_off]...
                    =cas_sample_volume_and_stats2...
                    (0,time_timeseries,...
                    bins_PACS',data_particle,[],[],[],air_speed_type,cut_off_size,[]...
                    ,CAS_LWC_cut_off_sizes,airspeed_constant);
                    
                case 'Welas'
                    data_particle = 1e-6*welas_dat.conc1'; %*1e-6 to convert to cm^-3                                        
                case 'FSSP'
                    disp('*** WARNING - applying FSSP flow speed correction factor ***');
                   data_particle = data_FSSP(23:42,:)'/3.2906;
%            sample_volume_FSSP = 100*airspeed_constant * 0.24e-2; %0.24e-2 is the CAS laser area in cm^2
            
                    time_timeseries = time_FSSP*3600;

                    %just do at first to calculate the sample volume applied
                    [sample_volume_CAS,sample_volume_CIP,air_speed_1D,air_speed,CAS_total_number(icas_count)...
                            ,CAS_total_number_cutoff ...                                    
                            ,CIP_total_number(icas_count),LWC_dist_cas,LWC_dist_cip,CAS_mode_diameter...
                            ,CAS_mean_diameter,LWC_dist_cas_cutoff,LWC_size_dist,bin_range,LWC_dist_cas_cutoff2,MVD,MVD_cut_off]...
                            =cas_sample_volume_and_stats2...
                            (0,time_timeseries,...
                            bins_FSSP',data_particle,[],[],[],air_speed_type,cut_off_size,[]...
                            ,CAS_LWC_cut_off_sizes,airspeed_constant);

                        %now compensate for the applied sample volume
                        %since we already have concentrations for FSSP
                    data_particle_scaled = data_particle.*sample_volume_CAS; 
                        %this only applies for the products of cas_sample_volume_and_stats2
                        %for plotting size distributions, etc. just use data_particle
                    
                    %and recalculate the other stuff   
             [sample_volume_CAS,sample_volume_CIP,air_speed_1D,air_speed,CAS_total_number(icas_count)...
                    ,CAS_total_number_cutoff ...                                    
                    ,CIP_total_number(icas_count),LWC_dist_cas,LWC_dist_cip,CAS_mode_diameter...
                    ,CAS_mean_diameter,LWC_dist_cas_cutoff,LWC_size_dist,bin_range,LWC_dist_cas_cutoff2,MVD,MVD_cut_off]...
                    =cas_sample_volume_and_stats2...
                    (0,time_timeseries,...
                    bins_FSSP',data_particle_scaled,[],[],[],air_speed_type,cut_off_size,[]...
                    ,CAS_LWC_cut_off_sizes,airspeed_constant);
                
                %but want to use data_particle for plotting distributions, etc
                    
                case 'BAS CAS'
                    time_timeseries = CAS_time_all;
                    data_particle = CAS_counts_all;
            
%                     [sample_volume_CAS,sample_volume_CIP,air_speed_1D,air_speed,CAS_total_number(icas_count)...
%                         ,CAS_total_number_cutoff ...                                    
%                         ,CIP_total_number(icas_count),LWC_dist_cas,LWC_dist_cip,CAS_mode_diameter...
%                                 ,CAS_mean_diameter,LWC_dist_cas_cutoff,LWC_size_dist,bin_range,LWC_dist_cas_cutoff2,MVD,MVD_cut_off]...
%                         =cas_sample_volume_and_stats2...
%                         (dat_flt,time_timeseries,...
%                         CAS_bins,CAS_counts_all,CIP_time_all,CIP_bins,CIP_counts_all,air_speed_type,cut_off_size,TAS_all,CAS_LWC_cut_off_sizes,airspeed_constant); 
                    
                    
                    [sample_volume_CAS,sample_volume_CIP,air_speed_1D,air_speed,CAS_total_number(icas_count)...
                    ,CAS_total_number_cutoff ...                    
                    ,CIP_total_number(icas_count),LWC_dist_cas,LWC_dist_cip,CAS_mode_diameter...
                    ,CAS_mean_diameter,LWC_dist_cas_cutoff,LWC_size_dist,bin_range,LWC_dist_cas_cutoff2,MVD,MVD_cut_off]...
                    =cas_sample_volume_and_stats2...
                    (dat_flt,time_timeseries,...
                    CAS_bins,data_particle,CIP_time_all,CIP_bins,CIP_counts_all,air_speed_type,cut_off_size,TAS_all...
                    ,CAS_LWC_cut_off_sizes,airspeed_constant);
                
                case  'MAN CAS Karl'
                
                    time_timeseries = CAS_time_Karl; %seconds from 0 UTC
                    data_particle = CAS_per_cc;
                    sample_volume_CAS = ones(size(data_particle));
                    
                 case  'CDP Karl'
                
                    time_timeseries = CDP_time_Karl; %seconds from 0 UTC
                    data_particle = CDP_per_cc;
                    sample_volume_CDP = ones(size(data_particle));
                 
                    
            end
                                
            
         if size(time_plot,1)>=idat
            time_plot_idat=time_plot(idat,:);
         else 
            time_plot(idat,:)=[time_timeseries(1) time_timeseries(end)];
            time_plot_idat=time_plot(idat,:)/3600;
         end
         
         for itime_plot=1:size(time_plot_idat,2)
            switch instrument_sd
                case {'CAS','CAS back'}
                    itime(itime_plot)=findheight_nearest(CAS_time_all/3600,time_plot_idat(itime_plot));
                case 'CIP'
                    itime(itime_plot)=findheight_nearest(CIP_time_all/3600,time_plot_idat(itime_plot));
                case {'CIP_Jonny','CIP_Ice'}
                    itime(itime_plot)=findheight_nearest(time_Jonny/3600,time_plot_idat(itime_plot));                    
                case 'MAN CAS'
                    itime(itime_plot)=findheight_nearest(data_CAS_PACS(1,:)'/3600,time_plot_idat(itime_plot));
                case 'Welas'
                    itime(itime_plot)=findheight_nearest(welas_dat.time_of_day'/3600,time_plot_idat(itime_plot));    
                case 'FSSP'
                    itime(itime_plot)=findheight_nearest(time_FSSP,time_plot_idat(itime_plot));
                case {'BAS CAS'}
                    itime(itime_plot)=findheight_nearest(CAS_time_all/3600,time_plot_idat(itime_plot));    
                case {'MAN CAS Karl'}
                    itime(itime_plot)=findheight_nearest(CAS_time_Karl/3600,time_plot_idat(itime_plot));                        
                case {'CDP Karl'}
                    itime(itime_plot)=findheight_nearest(CDP_time_Karl/3600,time_plot_idat(itime_plot));                                            

            end
         end
        
        
        time_inds = itime(1):itime(end);
        
        icalc_Nlimits=0;
        
        if icalc_Nlimits==1
        
%calculte the number of particles within a size limit        
        
         Nlim_sizes=[0.6 1.04]; %calculate the number in between these limits                
         Nlim_sizes=[0.6 10]; %calculate the number in between these limits                         
                Ndrops = mean( data_particle(time_inds,1:end)./sample_volume_CAS(time_inds,1:end) )';
                if Nlim_sizes(1)==0
                    ilims_lower=1;
                else
                    ilims01 = find(CAS_bins>=Nlim_sizes(1));
                    ilims_lower = ilims01(1)+1; %add one as the first number bin is for D<0.61
                end
                ilims02 = find(CAS_bins<=Nlim_sizes(2));                
                ilims_upper = ilims02(end); %bin N+1 is for sizeN to sizeN+1. Want N for 
                                            %sizes<sizeN so is bin N that we require
                Nlims = sum(Ndrops(ilims_lower:ilims_upper));

                %example of displaying the number info
%               text(0.84,1.5,['Total 0.61-1.03 \mum = ' num2str(Nlims) ' cm^{-3}'],'fontsize',14)

%%%%% end of size limit particle number calculation %%%%%%

        end

                  
            switch ylab
                case 'dN/dlogD (cm^{-3} \mum^{-1})'
                    
                    
                    
                    switch instrument_sd
                        case 'MAN CAS'
                                                 
                            log_bins = log10(bins_PACS');
                            dlogD=repmat(diff(log_bins),[1 size(data_particle,1)])';
                            ydat(idat).y = mean(data_particle(time_inds,2:end)./dlogD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);                                                       
                            xdat(idat).x=(bins_PACS(2:end)'+bins_PACS(1:end-1)')/2;  %
                            

                        case 'CIP'
                            CIP_bins2 = ([0; CIP_bins(1:end-1)] + CIP_bins) / 2 ; %CIP_bins are the mid-points so calculate boundaries
                            log_bins = log10([CIP_bins2; CIP_bins2(end)+25]);
                            dlogD=repmat([diff(log_bins)],[1 size(CIP_counts_all,1)])';
%                            ydat(idat).y = mean(CIP_counts_all(time_inds,:)./dlogD(time_inds,:)./sample_volume_CIP(time_inds,:),1);
                            ydat(idat).y = mean(ice_PSD(time_inds,:)./dlogD(time_inds,:)./sample_volume_CIP(time_inds,:),1);
                            
                            xdat(idat).x=(CIP_bins); %CIP bins are already the mid-points
                            lor=3; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane                                                            
                            
                        case 'Welas'


                            sample_volume_CAS = ones(size(data_particle)); 
                            refrac_factor=1.2375; %the value used for glass beads for the fog instrument
                            %from the straight line between the first and last point.
                            refrac_factor=1.1;
                            refrac_factor=1;
                            
                            orig_bins = welas_dat.size(:,1)/refrac_factor; %is the size form the calibration files
                            orig_bins = water2u_105;
                            %the radius or diameter? What is the conversion for droplets from latex beads?
                            
                            
                            log_bins = log10(orig_bins);
                            dlogD = repmat(diff(log_bins)',[size(data_particle,1) 1]);

                            ydat(idat).y = mean(data_particle(time_inds,2:end)./dlogD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);                                                       
                            xdat(idat).x =(orig_bins(2:end)'+orig_bins(1:end-1)')/2;  %
                            
                            
                            %set nfilter to one for no smoothing
                            nfilter=1; bfilter=ones([1 nfilter])*1/nfilter;
                            ydat(idat).y=filter(bfilter,1,ydat(idat).y);                            
                            xdat(idat).x(1:nfilter-1)=[]; ydat(idat).y(1:nfilter-1)=[];
                            
                            
                            
                        case 'FSSP'

                            sample_volume_CAS = ones(size(data_particle)); 
                            log_bins = log10(bins_FSSP);
                            dlogD = repmat(diff(log_bins),[size(data_particle,1) 1]);

                            ydat(idat).y = mean(data_particle(time_inds,2:end)./dlogD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);                                                       
                            xdat(idat).x=(bins_FSSP(2:end)'+bins_FSSP(1:end-1)')/2;  %
                            
                       case 'MAN CAS Karl'    
                            log_bins = log10(CAS_bins_Karl);
                            dlogD = repmat(diff(log_bins),[size(data_particle,1) 1]);                            
                            ydat(idat).y = mean(data_particle(time_inds,2:end)./dlogD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);
                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CAS_bins_Karl(2:end)+CAS_bins_Karl(1:end-1))/2; %
                            
                            
%                             ydat(idat).y = mean( data_particle(time_inds,2:end)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here
% 
%                             %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
%                             xdat(idat).x=(bins_PACS(2:end)'+bins_PACS(1:end-1)')/2;  %
                            
                        case 'CDP Karl'
                            log_bins = log10(CDP_bins_Karl);
                            dlogD = repmat(diff(log_bins),[size(data_particle,1) 1]);                            
                            ydat(idat).y = mean(data_particle(time_inds,1:end)./dlogD(time_inds,:)./sample_volume_CDP(time_inds,1:end),1);
                            xdat(idat).x=(CDP_bins_Karl(2:end)+CDP_bins_Karl(1:end-1))/2; %    
                            
                            %for the CDP we only have one count per bin (per mid-point) whereas with CAS
                            %there is an extra count for the counts less than the first bin edge
                            
                        

                           
                        otherwise   
                            log_bins = log10(CAS_bins);
                            dlogD=repmat(diff(log_bins),[1 size(CAS_counts_all,1)])';
                            ydat(idat).y = mean(CAS_counts_all(time_inds,2:end)./dlogD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);
                            xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2; %                        
                    end
                    
                    
                    
                    xlims=1;
                    xlimits=[0 50];                    
%                    xlimits=[20 50];
               
                    
                case 'dN/dD (cm^{-3} \mum^{-1})'
                    switch instrument_sd
                        case 'CAS'
                            dD=repmat(diff(CAS_bins),[1 size(CAS_counts_all,1)])';
                            ydat(idat).y = (1/1)*mean(CAS_counts_all(time_inds,2:end)./dD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);
                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2; %
                        case 'CAS back'
                            dD=repmat(diff(CAS_bins_back),[1 size(CAS_back_all,1)])';
                            ydat(idat).y = (1/1)*mean(CAS_back_all(time_inds,2:end)./dD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);
                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CAS_bins_back(2:end)+CAS_bins_back(1:end-1))/2; %                            
                        case 'CIP'
                            CIP_bins2 = ([0; CIP_bins(1:end-1)] + CIP_bins) / 2 ; %CIP_bins are the mid-points so calculate boundaries
                            dD=repmat([diff(CIP_bins2); 25],[1 size(CIP_counts_all,1)])';
                            ydat(idat).y = mean(CIP_counts_all(time_inds,:)./dD(time_inds,:)./sample_volume_CIP(time_inds,:),1);
                            xdat(idat).x=(CIP_bins); %CIP bins are already the mid-points
                            lor=3; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane                            
                        case 'CIP_Jonny'
                            CIP_bins2 = ([0; CIP_bins(1:end-1)] + CIP_bins) / 2 ; %CIP_bins are the mid-points so calculate boundaries
                            dD=repmat([diff(CIP_bins2); 25],[1 size(CIP_PSD_Jonny,1)])';
                            ydat(idat).y = mean(CIP_PSD_Jonny(time_inds,:)./dD(time_inds,:),1);
                            xdat(idat).x=(CIP_bins); %CIP bins are already the mid-points
                            lor=-1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                            fsize=10;
                        case 'CIP_Ice'
                            CIP_bins2 = ([0; CIP_bins(1:end-1)] + CIP_bins) / 2 ; %CIP_bins are the mid-points so calculate boundaries
                            dD=repmat([diff(CIP_bins2); 25],[1 size(CIP_PSD_Jonny_Ice,1)])';
                            ydat(idat).y = mean(CIP_PSD_Jonny_Ice(time_inds,:)./dD(time_inds,:),1);
                            xdat(idat).x=(CIP_bins); %CIP bins are already the mid-points
%                            lor=-1; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                            fsize=10;    
                            
                        case 'MAN CAS Karl'    
                            dD=repmat(diff(CAS_bins_Karl),[1 size(data_particle,1)])';
                            ydat(idat).y = (1/1)*mean(data_particle(time_inds,2:end)./dD(time_inds,:)./sample_volume_CAS(time_inds,2:end),1);
                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CAS_bins_Karl(2:end)+CAS_bins_Karl(1:end-1))/2; %
                            
                            
%                             ydat(idat).y = mean( data_particle(time_inds,2:end)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here
% 
%                             %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
%                             xdat(idat).x=(bins_PACS(2:end)'+bins_PACS(1:end-1)')/2;  %
                            
                        case 'MAN CDP Karl'
                            dD=repmat(diff(CDP_bins_Karl),[1 size(data_particle,1)])';
                            ydat(idat).y = (1/1)*mean(data_particle(time_inds,2:end)./dD(time_inds,:)./sample_volume_CDP(time_inds,2:end),1);
                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CDP_bins_Karl(2:end)+CDP_bins_Karl(1:end-1))/2; %
                            
                            
                            
                            
%                            ydat(idat).y = mean( data_particle(time_inds,2:end)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here

                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
 %                           xdat(idat).x=(CAS_bins(2:end)'+ CAS_bins(1:end-1)')/2;  %    
                            
                    end
                    
                    
                    xlims=1;
                    xlimits=[0.6 1000];
  
                case 'N (cm^{-3})'
                    switch instrument_sd
                        case 'MAN CAS'
                                                 
                     
                            ydat(idat).y = mean( data_particle(time_inds,2:end)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here

                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(bins_PACS(2:end)'+bins_PACS(1:end-1)')/2;  %
                            
                        case 'MAN CAS Karl'
                            ydat(idat).y = mean( data_particle(time_inds,2:end)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here

                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CAS_bins(2:end)'+ CAS_bins(1:end-1)')/2;  %
                            

                        case 'CDP Karl'
                            ydat(idat).y = mean( data_particle(time_inds,1:end)./sample_volume_CDP(time_inds,1:end) )'; %note the transpose ' here

                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(CDP_bins_Karl(2:end)'+ CDP_bins_Karl(1:end-1)')/2;  %                            
                            
                        otherwise                            
                            ydat(idat).y = mean( CAS_counts_all(time_inds,1:end)./sample_volume_CAS(time_inds,1:end) )'; %note the transpose ' here
                            xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2;  %    
                            xdat(idat).x=[0 xdat(idat).x'];
                    end
                    
%                    ydat(idat).y = mean( CAS_counts_all(time_inds,1:end-1)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here                    
%                    xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2;  %
                    
                    
                    labs(idat).l=[str_times_single ' UTC'];   
                    
                    
                    xlims=1;
                    xlimits=[0 50];
%                    xlimits=[0 10];                      
                    
                case 'LWC (g m^{-3})'
                    switch instrument_sd
                        case 'MAN CAS'
                                                 
                     
                            ydat(idat).y = mean(LWC_size_dist(time_inds,:) )'; %note the transpose ' here

                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=(bins_PACS(2:end)'+bins_PACS(1:end-1)')/2;  %
                           
                        otherwise                            
                            ydat(idat).y = mean( LWC_size_dist(time_inds,:))'; %note the transpose ' here
                            xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2;  %                           
                    end
                    
%                    ydat(idat).y = mean( CAS_counts_all(time_inds,1:end-1)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here                    
%                    xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2;  %
                    
                    
                    labs(idat).l=[str_times_single ' UTC'];   
                    
                    
                    xlims=1;
                    xlimits=[0 50];
                    
                    
                case 'dLWC/dlogD (g m^{-3} \mum^{-1}))'
                    switch instrument_sd
                        case 'MAN CAS'
                                                 
                            log_bins = log10(bins_PACS');
                            dlogD=repmat(diff(log_bins),[1 size(data_particle,1)])';
                            
                            ydat(idat).y = mean(LWC_size_dist(time_inds,:) ./(dlogD(time_inds,:)) )'; %note the transpose ' here

                            %                    xdat(idat).x=(log_bins(2:end)+log_bins(1:end-1))/2; %
                            xdat(idat).x=((bins_PACS(2:end)'+bins_PACS(1:end-1)')/2);  %
                           
                        otherwise      
                            log_bins = log10(CAS_bins);
                            dlogD=repmat(diff(log_bins),[1 size(CAS_counts_all,1)])';
                            
                            ydat(idat).y = mean( LWC_size_dist(time_inds,:)./(dlogD(time_inds,:)) )'; %note the transpose ' here
                            xdat(idat).x= ((CAS_bins(2:end)+CAS_bins(1:end-1))/2);  %                           
                    end
                    
%                    ydat(idat).y = mean( CAS_counts_all(time_inds,1:end-1)./sample_volume_CAS(time_inds,2:end) )'; %note the transpose ' here                    
%                    xdat(idat).x=(CAS_bins(2:end)+CAS_bins(1:end-1))/2;  %
                    
                    
                    labs(idat).l=[str_times_single ' UTC'];   
                    
                    
                    xlims=1;
                    xlimits=[0 50];
                    
            end
            
            if size(time_plot,1)==1
                idat_str=1;
            else
                idat_str=idat;
            end
            
            if length(time_plot)>1
                    labs(idat).l=[datestr(time_plot(idat_str,1)/24,13) '-' datestr(time_plot(idat_str,2)/24,13) ' ' instrument_sd];  
            else
                    labs(idat).l=[datestr(time_plot(1)/24,13) ' UTC ' instrument_sd];  
            end
            
            
            if instrument_ratio==1
                ratio_dat(idat).dat=ydat(idat).y;

                if idat==2
                    ydat(1).y=ratio_dat(2).dat./ratio_dat(1).dat;
                    ydat(2)=[];
                    xdat(2)=[];
                    labs(2)=[];
                    labs(1).l='Ratio';
                    titlenam=['Ratio ' instrument_sd_all{2} ' divided by ' instrument_sd_all{1} ' for ' datestr((time_plot(2,1)-1)/24,13) '-' datestr((time_plot(2,2)-1)/24,13) ' and ' datestr(time_plot(1,1)/24,13) '-' datestr(time_plot(1,2)/24,13)];
%                    y_axis_type='';
                    xlims=1;
                    xlimits=[0 50];
                    ylab='Ratio';
                end
            end
                    
                                
            
    end
    
    if iadd_line==1
        min_line=9e9;
        max_line=-9e9;
        for iline=1:length(xdat)
            min_line = min(min_line,min(ydat(iline).y));
            max_line = max(max_line,max(ydat(iline).y));
        end
        min_line = ydat(1).y(9)/1e1;
        max_line = ydat(1).y(9)*1e1;        
        addlineX=[xdat(1).x(9);xdat(1).x(9)];
        addlineY=[min_line;max_line];
        
        min_line = ydat(1).y(21)/1e1;
        max_line = ydat(1).y(21)*1e1;        
        addlineX(:,2)=[xdat(1).x(21);xdat(1).x(21)];
        addlineY(:,2)=[min_line;max_line];
    end

        
      
            
        
    case 86
        % profiles from the cross section - NEED TO HAVE RUN plotTime... first for cross section
        
        time_prof=0;
%        time_prof=6;

if time_prof==0
     tstr=Times(time,:);
else
     tstr=Times(time_prof,:);
end
        
       
        iund=findstr('_',tstr);
        tstr(iund)=' ';          
        titlenam = ['Potential temperature cross section profile for ' tstr];
        titlenam = ['Wind speed cross section profile for ' tstr];
%        titlenam = ['N profile for ' tstr];
%        titlenam = ['L profile for ' tstr];

        
        figname=titlenam;
        savename=figname;

        
        izlim=0;
        zmin=0.55;
        zmax=2.5;

        nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.
        
%        HGT=zz(1).z;

if time_prof==0
        HGT=zz(1).z;
        dist=timesTH(1).t;
else
        HGT=XY_pot_cross_data(1).Y_cross;
        dist=XY_pot_cross_data(1).X_cross;
end
        

        
        switch titlenam
            case ['L profile for ' tstr]
                pot=pot_cross_15UTC;
                U_cross = U_cross_15UTC;
                
                z=1000*repmat(HGT',[1 size(pot,2)]);
                DAT = sqrt( 9.81 ./ pot(2:end,:) .* diff(pot,1)./diff(z,1) ) ./ U_cross(2:end,:); %N 
                HGT = HGT(2:end);
                
                ylab='Height (km)';
                xlab= 'L (m^{-1})';
                xlims=0;
                xlimits=[271 295];

                
            case ['N profile for ' tstr]
                pot=pot_cross_15UTC;
                z=1000*repmat(HGT',[1 size(pot,2)]);
                DAT = sqrt( 9.81 ./ pot(2:end,:) .* diff(pot,1)./diff(z,1) ); %N 
                HGT = HGT(2:end);
                
                ylab='Height (km)';
                xlab= 'N (s^{-1})';
                xlims=0;
                xlimits=[271 295];

                                
            case ['Potential temperature cross section profile for ' tstr]
                ylab='Height (km)';
                xlab= 'Potential temperature (K)';
                xlims=1;
                xlimits=[271 295];
                
                switch time_prof
                    case 6
                        DAT=pot_cross_15UTC; %time_prof=6
                    case 11
                        DAT=pot_cross;  %time_prof=11
                    case 0
                        DAT=pdat(1).p;
                end
                


            case ['Wind speed cross section profile for ' tstr]
                xlab= 'Wind speed (m s^{-1})';
                xlims=1;
                xlimits=[0 12];
                
                switch time_prof
                    case 6
                        DAT=U_cross_15UTC; %time_prof=6
                    case 11
                        DAT=u_cross;   %time_prof=11
                    case 0
                        DAT=pdat(1).p;
                end
                

        end


        lor=2; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        idat=0;
        

        



        
        ipos=1;
        idat=idat+1;
        xdat(idat).x=DAT(:,ipos); %
        ydat(idat).y=HGT; %
        labs(idat).l=[num2str(dist(ipos),'%.0f') ' km'];
        
%         ipos=3;
%         idat=idat+1;
%         xdat(idat).x=DAT(:,ipos); %
%         ydat(idat).y=HGT; %
%         labs(idat).l=[num2str(dist(ipos),'%.0f') ' km'];
%         
%         ipos=20;
%         idat=idat+1;
%         xdat(idat).x=DAT(:,ipos); %
%         ydat(idat).y=HGT; %
%         labs(idat).l=[num2str(dist(ipos),'%.0f') ' km'];
%         
        ipos=76;
        idat=idat+1;
        xdat(idat).x=DAT(:,ipos); %
        ydat(idat).y=HGT; %
        labs(idat).l=[num2str(dist(ipos),'%.0f') ' km'];  
        
        ipos=113;
        idat=idat+1;
        xdat(idat).x=DAT(:,ipos); %
        ydat(idat).y=HGT; %
        labs(idat).l=[num2str(dist(ipos),'%.0f') ' km'];  
        
    case 85
        % Ice Nucleation schemes
        
%        tstr=Times(time,:);
%        iund=findstr('_',tstr);
%        tstr(iund)=' ';   
        IN_type = 'IN concentrations';
%        IN_type = 'Ice procuction rates';
        
        iydir=-1;
        
        switch IN_type
            case 'IN concentrations'
                titlenam = ['Ice nuclei concentations'];

                figname=titlenam;
                savename=figname;

                xlims=0;
                xlimits=[-18 0];

                izlim=1;
                zmin=-20;
                zmax=-5;

                nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

                xlab='Heterogeneous IN number cocentration (L^{-1})';
                ylab= 'Temperature (^{o}C)';



                lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

                idat=0;

                tc=[-30:0];

                idat=idat+1;
                xdat(idat).x=0.005*exp(0.304*(-tc)); %per L
                ydat(idat).y=tc; %
                labs(idat).l='WRF (Coooper)';

                %         idat=idat+1;
                %         qv=satvappress(273+tc,'goff','liq');
                %         qvi=satvappress(273+tc,'goff','ice');
                %         xdat(idat).x=exp(-6.69+12.96*qv./qvi)*1e-3; %IS WRONG - qv should be vapour mixing ratio vapour pressure
                %         %and not the saturation vapour pressure
                %         ydat(idat).y=tc; %
                %         labs(idat).l='Meyers';

                idat=idat+1;
                xdat(idat).x=0.01*exp(-0.6*tc)*1e-3; %per L
                ydat(idat).y=tc; %p
                labs(idat).l='Fletcher';
                
                a=0.0000594;
                b=3.33;
                c=0.0264;
                d=0.0033;
                TK=tc+273.15;
                
                naer=0.1; %number of aerosol between 0.5 and 1 micron
                idat=idat+1;
                xdat(idat).x=a*(273.16-TK).^b.*naer.^(c.*(273.16-TK)+d);
                ydat(idat).y=tc; %p
                labs(idat).l=['DeMott Naer= ' num2str(naer)];
                
                naer=0.3; %number of aerosol between 0.5 and 1 micron
                idat=idat+1;
                xdat(idat).x=a*(273.16-TK).^b.*naer.^(c.*(273.16-TK)+d);
                ydat(idat).y=tc; %p
                labs(idat).l=['DeMott Naer= ' num2str(naer)];
                
                naer=3; %number of aerosol between 0.5 and 1 micron
                idat=idat+1;
                xdat(idat).x=a*(273.16-TK).^b.*naer.^(c.*(273.16-TK)+d);
                ydat(idat).y=tc; %p
                labs(idat).l=['DeMott Naer= ' num2str(naer)];
                
               


                
                

            case 'Ice procuction rates' %e.g. Bigg's and contact that produce a rate of ice number formation

                

               

                xlims=0;
                xlimits=[-18 0];

                izlim=1;
                zmin=-20;
                zmax=-5;

                nmark=-1; %-1 means that all points have markers. Otherwise only plot the number specified.

                xlab='Ice number production rate (L^{-1} s^{-1})';
                ylab= 'Temperature (^{o}C)';

                lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

                idat=0;

                tc=[-30:0];
                P=650; %
                P=600; %            
                QC3D=0.3; %g/m3
                [final_contact_rate, rate_bigg] = microphysics_WRF_contact_and_Biggs(tc,P,QC3D);
                
                titlenam = ['Ice number formation rates for P=' num2str(P) ' mb, QC=' num2str(QC3D) ' g m^{-3}'];
                figname=titlenam;
                savename=figname;

                idat=idat+1;
                xdat(idat).x=rate_bigg; %per L per sec
                ydat(idat).y=tc; %
                labs(idat).l='WRF Biggs';

                idat=idat+1;
                xdat(idat).x=final_contact_rate; %per L per sec
                ydat(idat).y=tc; %p
                labs(idat).l='Contact freezing';
                
                idat=idat+1;
                xdat(idat).x=final_contact_rate+rate_bigg; %per L per sec
                ydat(idat).y=tc; %p
                labs(idat).l='Biggs + contact freezing';



        end
        
    case 84
        % Froude number for continuous stratification
                  
        titlenam = ['Froude vs L*thi number for constant stratification'];
        
        figname=titlenam;
        savename=figname;

        xlims=0;
        xlimits=1000*[0 0.025];
        
        izlim=1;
        zmin=0;
        zmax=2;


        nmark=0; %-1 means that all points have markers. Otherwise only plot the number specified.

        ylab='F';
        xlab='0.5*L*thi';


        lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane

        idat=0;
        
        L=0.01/10;
        
        hhat=1;
        del_hat = -1/sqrt(2) * sqrt(hhat.^2 + hhat.*sqrt(hhat.^2+4));
        H0=( hhat - del_hat + acos(hhat./del_hat) )/L;
        hm=hhat/L;
                    
                    
%        H0=3*pi/2/L;
%        h=1/L;
        
%        x=[0:0.01:2*pi]; %=L*thi
        x=[0:0.01:L*H0]; %=L*thi
        h=[0:hm/100:hm];
        Ld=x+L.*(h-H0); %=L*del from del=H0+del-h

        idat=idat+1;
        xdat(idat).x=0.5*x; %0.5*L*thi
        ydat(idat).y=sqrt( (1-Ld.*sin(x))./(1-cos(x)) ); %F as calculated from the formulation in Durran 
        labs(idat).l='F';
                            
                            
                            
                           
        
    case 83
        % WRF microphysics for ice heteorogeneous freezing, Bigg's immersion droplet freezing and contact nucleation
        time=15;
        
        tstr=Times(time,:);
        iund=findstr('_',tstr);
        tstr(iund)=' ';  
        
        titlenam = ['WRF Morrison microphysics for ' tstr];
        figname=titlenam;
        savename=figname;
        
        
        
                    xlims=0;
                    xlimits=1000*[0 0.025];
                    
                    nmark=-1;
                    
                    iloc=1;
                            
                            ylab='Height (m)';
                            xlab= 'WRF ice number concentration (L^{-1})';
                                      
                            izlim=1;
                            zmin=000;
                            zmax=3000;
                            
                            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                            
                            idat=0;
                            HGT=WRFUserARW(nca(1).nc,'Z',time,ilat(iloc),ilon(iloc));
                                                                                                 
                            
                            T3D = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc)) + 273.15;
                            P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc)) *100;                           
                            RHO=density(P,T3D);

                            QC3D=nc{'QCLOUD'}(time,:,ilat(iloc),ilon(iloc)); %cloud MR kg/kg
                            NDCNST=250; %currently set constant (250 per cc) in version 3.0.1.1 of WRF
                            NC3D=NDCNST.*1.E6./RHO; %convert to #/kg

                            tc=T3D-273.15;      
                            
                            %%% contact nucleation
                            idat=idat+1;
                            xdat(idat).x=0.005*exp(0.304*(-tc)); %per L
                            ydat(idat).y=HGT; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='Heterogeneous IN';
                            
                            
                            
                            idat=idat+1;
                            RIN=0.1e-6;
                            CONS37=4.*pi*1.38e-23/(6.*pi*RIN);
                            RHOW=997;
                            CONS26=pi/6.*RHOW;                            
                            
                            
                            DUM2 = 1.496e-6*T3D.^1.5./(T3D+120);
                            MU = DUM2./RHO;
                            NACNT=exp(-2.80+0.262*(-tc))*1000; %per m3
                            DUM = 7.37.*T3D./(288.*10.*P)/100;
                            DAP = CONS37.*T3D.*(1.+DUM/RIN)./MU;
                            
                            DUM3 = P./(287.15*T3D);
                            PGAM=0.0005714*(NC3D./1.E6./DUM3)+0.2714;
                            PGAM=1./(PGAM.^2)-1;
                            PGAM=max(PGAM,2);
                            PGAM=min(PGAM,10);

                            CDIST1 = NC3D./gamma(PGAM+1);
                            LAMC=(CONS26.*NC3D.*GAMMA(PGAM+4)./(QC3D.*GAMMA(PGAM+1))).^(1/3);
                            
                            % LAMMIN, 60 MICRON DIAMETER
                            % LAMMAX, 1 MICRON
                            
                            LAMMIN = (PGAM+1.)/60.e-6;
                            LAMMAX = (PGAM+1.)/1.e-6;

                            iless=find(LAMC<LAMMIN);
                            LAMC(iless) = LAMMIN(iless);
                            NC3D(iless)= exp(3.*log(LAMC(iless))+log(QC3D(iless))+    ...
                                log(GAMMA(PGAM(iless)+1.))-log(GAMMA(PGAM(iless)+4.)))/CONS26;
                            
                            imore=find(LAMC>LAMMAX);
                            LAMC(imore) = LAMMAX(imore);
                            NC3D(imore) = exp(3.*log(LAMC(imore))+log(QC3D(imore))+  ...
                                log(GAMMA(PGAM(imore)+1.))-log(GAMMA(PGAM(imore)+4.)))/CONS26;                            


%NNUCCC(K) = 2.*PI*DAP(K)*NACNT*CDIST1(K)*           &
%                    GAMMA(PGAM(K)+2.)/                         &
%                    LAMC(K)
                            
                            %this is a rate in #/kg/s
                            rate_contact=2.*pi*DAP.*NACNT.*CDIST1.*gamma(PGAM+2)./LAMC;
                            DT=0.5*60;
                            DT=500;
                            xdat(idat).x = rate_contact*DT.*RHO/1000; %work out for arbitrary time
                            ydat(idat).y=HGT; 
                            labs(idat).l='Contact nucleation';

                            AIMM=0.66;                            
                            BIMM=100;
                            CONS40=pi/6.*BIMM;                           
                            
                            %%% immersion nucleation (of cloud droplets to form ice) - Bigg's
                            idat=idat+1;
                            rate_bigg=CONS40*exp(log(CDIST1)+log(gamma(PGAM+4))-3*log(LAMC)).*exp(AIMM*(273.15-T3D));
                            xdat(idat).x=rate_bigg*DT.*RHO/1000;
                            ydat(idat).y=HGT; 
                            labs(idat).l='Bigg''s immersion nucleation';
                            %% N.B. doesn't depend on droplet number as cancels out in rate_bigg formula
                            %% (from formulae for PGAM, CDIST1 and LAMC)
                            
                            %% aside - mass of ice frozen from Biggs does depend on droplet size
                            CONS39=pi*pi/36.*RHOW*BIMM;
                            MNUCCC = CONS39*exp(log(CDIST1)+log(gamma(7.+PGAM))-6.*log(LAMC)).*exp(AIMM*(273.15-T3D));

        
                                
                                
                               
    case 82
        
                   
                    titlenam = 'Houghton/Smith';
        
                    xlims=0;
                    xlimits=1000*[0 0.025];
                                      
                    gd=1;
                    U=20;
                    N=0.02;

                    hhat=[0:0.01:1];

                    %continuous stratification case (Fig. 15b)
                    del_hat = -1/sqrt(2) * sqrt(hhat.^2 + hhat.*sqrt(hhat.^2+4));
                    H0_hat_strat=hhat - del_hat + acos(hhat./del_hat);
                    H0_crit=U/N*H0_hat_strat; %
                    F0_crit=1 ./ H0_hat_strat; %=U/NH=F0=1/H0_hat for Fig 15b


                    %single layer case (Fig. 15a)

                    H0_crit2 = [0:1:1500000];  %N.B. - require very large H0 values to reach high h/H0 values (to approach the limit
                    %towards h/H0=1,F0=0
                    F0_crit2=U./sqrt(gd.*H0_crit2);
                    F0_crit3 = U/N./H0_crit2;
                    h_crit2 = H0_crit2 .* ( 1 + 0.5*F0_crit2.^2 - 1.5*F0_crit2.^(2/3) );
                    h_crit3 = H0_crit2 .* ( 1 + 0.5*F0_crit3.^2 - 1.5*F0_crit3.^(2/3) );
                    hhat_Houghton=h_crit3*N/U;
                    
                    plot_case='stratified';
                    plot_case='h/H0,F0 space';
%                    plot_case='h/H0,F0 space clean';
%                    plot_case='h vs H0';                    
%                    plot_case='h vs H0 dual';                                        
                    
                    switch plot_case
                        case 'stratified'

                            xdat(1).x=hhat_Houghton;
                            ydat(1).y=F0_crit3; %using Smith formula for F0 but with F0=U/(N*H0) - acheived by approximating
                            %g' with N^2*H0 where H0=dz in N^2=g/theta * dtheta/dz
                            labs(1).l='Smith using N';

                            xdat(2).x=hhat;
                            ydat(2).y=F0_crit; %plot the original formulation for continuous stratification
                            % are different but.... if multiply F0 by a factor of 0.62...
                            labs(2).l='Original Smith';

                            xdat(3).x=hhat_Houghton;
                            ydat(3).y=F0_crit3*0.62; %they overlay each other almost exactly. Why 0.62??? - epsilon? =0.622
                            %is independant of N and U
                            labs(3).l='Using N and *0.62';
                            
                            xlab='F0=U/(N*H0)';
                            ylab='hN/U';


                        case 'h/H0,F0 space'
                            idat=0;
                            
                            idat=idat+1;
                            xdat(idat).x=h_crit2./H0_crit2;
                            ydat(idat).y=F0_crit2; %using Smith formula for F0 for an inversion F0=U/sqrt(g'H0)
                            labs(idat).l='Original inversion case';
                            
                            %now give range of h' values and calculate H0 using (20). Note F0=1/H0' since H0' = H0*N/U
                            idat=idat+1;                            
                            xdat(idat).x=2*hhat./H0_hat_strat;
                            ydat(idat).y=sqrt(2)*F0_crit; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='Stratified formula with Smith&Sun transforms';
                            % i.e. using Heff instead of H0 and F0=U/(N*Heff)=sqrt(2)U/(N*H0)

                            %        plot(1/(0.62^2)*hhat./H0_hat_strat,1/0.62*F0_crit,'k--');
                            
                            idat=idat+1;
                            xdat(idat).x=hhat./H0_hat_strat/0.63;
                            ydat(idat).y=F0_crit/0.63;
                            labs(idat).l='Stratified formula with 0.63 transforms';
                            
%                             idat=idat+1;                            
%                             xdat(idat).x=hhat./H0_hat_strat/0.63;
%                             ydat(idat).y=F0_crit/0.63;
%                             labs(idat).l='Stratified formula with 0.63,0.86 transforms';
                            
                            idat=idat+1;                            
                            xdat(idat).x=hhat./H0_hat_strat;
                            ydat(idat).y=1./(sqrt(2)*sin(0.5*H0_hat_strat));
                            labs(idat).l='Stratified formula using Durran F0';
                            
                            idat=idat+1;                            
                            xdat(idat).x=hhat./H0_hat_strat;
                            ydat(idat).y=F0_crit;
                            labs(idat).l='Stratified formula using Durran F0';
                            
                            
                            
%                             idat=idat+1;                            
%                             xdat(idat).x=2*hhat./H0_hat_strat;
%                             ydat(idat).y=1./(sqrt(2)*sin(0.5*H0_hat_strat));
%                             labs(idat).l='Stratified formula using Durran F0 and Heff';
                                                
                            x_start=0.5/0.63; %=0.7937 approx h/Heff for Antarctic Peninsula (with h=1500, H0=3000)
                            y_start=0.18/0.63; %=0.2857 - using N and U for AP case, and H0=3000 (U/N = 0.18*3000 = 540)
                            b=[0:1500]; %values of effective blocking to try

%                             idat=idat+1;                            
%                             xdat(idat).x=(1500-b)./(0.63*(3000-b)); %increasing values of blocking height
%                             ydat(idat).y=540./(3000-b)/0.63;
%                             labs(idat).l='Bee line for AP';


    %%% jump boundary
%                             idat=idat+1;                            
%                             [F,h_h0]=mountain_Houghton_solve_cr_0_line(3500,0.5);
%                             xdat(idat).x=h_h0;
%                             ydat(idat).y=F;
%                             labs(idat).l='Jump boundary';                            
                                                                                    
                            ylab='F_0';
                            xlab='h/H_0';
                            
                            xlims=1;
                            xlimits=[0 1];
                                                        
                            izlim=1;
                            zmin=0;
                            zmax=1;
                            
                        case 'h vs H0 dual'
                            Ha_hat=3*pi/6;
                            Ha_hat=1;
                            
                            Ha_hat=4;
                            
                            dmin=1.01*atan(1/Ha_hat);  %minimum d(=Hb_hat-Ha_hat) allowed from eqn (28) of Smith and Sun
                            Hb_start=Ha_hat+dmin;
                            Hb_hat=[Hb_start:(9*pi/6-Hb_start)/100:9*pi/6];

                            
                            idat=0;
                            
                            idat=idat+1;
                            for iHb=1:length(Hb_hat);
                                [xdat(idat).x(iHb),dA,dB]=Smith_dual_layer_find_hpeak(Ha_hat,Hb_hat(iHb),1);
                            end
                            ydat(idat).y=Hb_hat;  %calculated above
                            labs(idat).l='Stratified exact solution';
                            
                            %now calculate effective F0 and plug into eq (16) for 0.63 transform
                            idat=idat+1;
                            D=0.5;
                            Heff=Ha_hat + D * (Hb_hat-Ha_hat);
                            r=(Hb_hat-Ha_hat)/Ha_hat;
                            Feff=sqrt( (1+r).^2./(Hb_hat.^2.*r.*(1+D*r)) );
%                            Feff=F0_crit3;
                            h_crit2 = Heff .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(idat).x=h_crit2;
                            ydat(idat).y=Hb_hat; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='Heff transform into inversion formula';
                            
                            
                            %attempt at using the 0.63 idea where the change of potential temperature for g' is taken as only that over Heff
                            %so that g'=g*dtheta/theta=N^2*d*0.63 (or another factor instead of 0.63)
                            idat=idat+1;
                            D=0.63;
                            Heff=Ha_hat + D * (Hb_hat-Ha_hat);
                            Feff=sqrt( 1./(Heff.*(Heff-Ha_hat)) );
%                            Feff=F0_crit3;
                            h_crit2 = Heff .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(idat).x=h_crit2;
                            ydat(idat).y=Hb_hat; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='Heff transform into inversion formula';
                            
                            
                            
%continuosly stratified effective F0 into eq (16) for 0.63 transform
                            idat=idat+1;
                            Feff=1/0.63 * U/N./H0_crit2;
%                            Feff=F0_crit3;
                            h_crit2 = H0_crit2*0.63 .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(idat).x=h_crit2*N/U;
                            ydat(idat).y=H0_crit2*N/U; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='0.63 transform into inversion formula';
                            
%continuosly stratified effective F0 into eq (16) for 0.63 transform using Hb_hat
                            idat=idat+1;
                            D=0.63;
                            Feff=1/D * 1./Hb_hat;
%                            Feff=F0_crit3;
                            h_crit2 = Hb_hat*D .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(idat).x=h_crit2;
                            ydat(idat).y=Hb_hat; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='0.63 transform into inversion formula using Hb_hat';                            
                            
                            
                            %Smith-Sun transform
                            idat=idat+1;
                            Feff=sqrt(2)*U/N./H0_crit2;
                            h_crit2 =  H0_crit2*0.5 .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(idat).x=h_crit2*N/U;
                            ydat(idat).y=H0_crit2*N/U; %plot the original formulation for continuous stratification with transformed variables
                            labs(idat).l='Smith-Sun transform into inversion formula';
                            % i.e. using Heff instead of H0 and F0=U/(N*Heff)=sqrt(2)U/(N*H0)

                            %        plot(1/(0.62^2)*hhat./H0_hat_strat,1/0.62*F0_crit,'k--');

%                            xdat(3).x=hhat./H0_hat_strat/0.63;
%                            ydat(3).y=F0_crit/0.63;
%                            labs(3).l='Stratified formula with 0.63 transforms';
                            
                            ylab='Hhat';
                            xlab='hhat';
                            
                            xlims=1;
                            xlimits=[0 1];
                                                        
                            izlim=1;
                            zmin=0;
                            zmax=5;
                            
                            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                       
                            case 'h vs H0'
                            xdat(1).x=hhat;
                            ydat(1).y=H0_hat_strat;  %calculated above
                            labs(1).l='Stratified exact solution';
                            
                            %now calculate effective F0 and plug into eq (16) for 0.63 transform
                            Feff=1/0.63 * U/N./H0_crit2;
%                            Feff=F0_crit3;
                            h_crit2 = H0_crit2*0.63 .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(2).x=h_crit2*N/U;
                            ydat(2).y=H0_crit2*N/U; %plot the original formulation for continuous stratification with transformed variables
                            labs(2).l='0.63 transform into inversion formula';
                            
                            %Smith-Sun transform
                            Feff=sqrt(2)*U/N./H0_crit2;
                            h_crit2 = 0.5 * H0_crit2 .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(3).x=h_crit2*N/U;
                            ydat(3).y=H0_crit2*N/U; %plot the original formulation for continuous stratification with transformed variables
                            labs(3).l='Smith-Sun transform into inversion formula';
                            % i.e. using Heff instead of H0 and F0=U/(N*Heff)=sqrt(2)U/(N*H0)

                            %        plot(1/(0.62^2)*hhat./H0_hat_strat,1/0.62*F0_crit,'k--');

%                            xdat(3).x=hhat./H0_hat_strat/0.63;
%                            ydat(3).y=F0_crit/0.63;
%                            labs(3).l='Stratified formula with 0.63 transforms';
                            
                            ylab='Hhat';
                            xlab='hhat';
                            
                            xlims=1;
                            xlimits=[0 1];
                                                        
                            izlim=1;
                            zmin=0;
                            zmax=5;
                            
                            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
                        
                            
                       case 'h/H0,F0 space clean'
                           
                            xdat(1).x=h_crit2./H0_crit2;
                            ydat(1).y=F0_crit2; %using Smith formula for F0 for an inversion F0=U/sqrt(g'H0)
                            labs(1).l='Critical boundary';  
                            
                            xdat(1).x(end+1)=1;
                            ydat(1).y(end+1)=0;
                            
                            [F,h_h0]=mountain_Houghton_solve_cr_0_line(3500,0.5);
                            xdat(2).x=h_h0;
                            ydat(2).y=F;
                            labs(2).l='Jump boundary';    
                            
                            xdat(3).x=hhat./H0_hat_strat;
                            ydat(3).y=1./(sqrt(2)*sin(0.5*H0_hat_strat)); %using Durran's formula for F0
                            labs(3).l='Durran F'; 
                                                                                    
                            ylab='F0';
                            xlab='h/H0';
                            
                            xlims=1;
                            xlimits=[0 1.3];
                                                        
                            izlim=1;
                            zmin=0;
                            zmax=2.4;
                            
%%% adding labelled points onto graph - Durran, etc.      
                            add_points=1;
                            ipoint=0;
%Miller and Durran, 1991, Fig. 5.
                            N=0.02094;
                            U=20;
                            L=N/U;
                            hm=1146.1;
                            
                            %fzero(@mountain_Smith_hhat_for_blocking,[0.01 1],[],L,h_mountain,Haim)
                            %gives an effective mountain height for a given actual height of Haim
                            %with the assumption of as much blocking as is needed
                            %have used this below to find effective values for different streamlines
                            %assuming that the flow can select whatever mountain height it likes                                                         
                            
                            ipoint=ipoint+1;
                            H0=3.6249e+003;
                            xpos(ipoint).x=571.0775/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='M4.2km';
                            
%Durran, 1987 Part 2, Fig 1a,b and c - applying 0.63 transforms
                            N=0.01047;
                            U=20;
                            L=N/U;
                            H0=6.0e3; %divinding streamline is approx 5 km
                        %(a) Lh=0.3
                            ipoint=ipoint+1;
                            xpos(ipoint).x=0.3/L/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='D2a';
                        %(a) Lh=0.4
                            ipoint=ipoint+1;                        
                            xpos(ipoint).x=0.4/L/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='D2b';
                        %(a) Lh=0.5
                            ipoint=ipoint+1;                        
                            xpos(ipoint).x=0.5/L/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='D2c';    
                            
%Durran, 1987 Part 2, Fig 1a,b and c - NOT applying 0.63 transforms - using Durran F0
                            N=0.01047;
                            U=20;
                            L=N/U;
                            H0=6.0e3; %divinding streamline is approx 5 km
                            F0=1/(sqrt(2)*sin(0.5*L*H0));
                            
                        %(a) Lh=0.3
                            ipoint=ipoint+1;
                            xpos(ipoint).x=0.3/L/H0;
                            ypos(ipoint).y=F0;
                            point_labs(ipoint).lab='D2a';
                        %(a) Lh=0.4
                            ipoint=ipoint+1;                        
                            xpos(ipoint).x=0.4/L/H0;
                            ypos(ipoint).y=F0;
                            point_labs(ipoint).lab='D2b';
                        %(a) Lh=0.5
                            ipoint=ipoint+1;                        
                            xpos(ipoint).x=0.5/L/H0;
                            ypos(ipoint).y=F0;
                            point_labs(ipoint).lab='D2c';                                
                            
%Durran, 1987 Part1, Fig. 16
                            N=0.01;
                            U=10;
                            L=N/U;
                            H0=6e3;
                            hm=1400;
                            
                            ipoint=ipoint+1;                            
                            xpos(ipoint).x=hm/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='D1';
                            
                            %fzero(@mountain_Smith_hhat_for_blocking,[0.01 1],[],L,h_mountain,Haim)
                            %gives an effective mountain height for a given actual height of Haim
                            %with the assumption of as much blocking as is needed
                            %have used this below to find effective values for different streamlines
                            %assuming that the flow can select whatever mountain height it likes                                                         
                            
                            H0=4.4861e+003;
                            ipoint=ipoint+1;                            
                            xpos(ipoint).x=800/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='D5km';
                         
                            H0=2.8539e+003;
                            ipoint=ipoint+1;                            
                            xpos(ipoint).x=253.8/H0/0.63;
                            ypos(ipoint).y=1/L/H0/0.63;
                            point_labs(ipoint).lab='D4km';
                            
                            
                            

                    end
                    
                    
        case 81    %plot of aircraft distance vs. wind speed to show variation
        
        [asL23_1 asL23_2]= findheight(time_flt19,20.76,21.55); %L-shaped sections of level flight ignoring when wind speed went wrong (too high)
        [asL23_3 asL23_4]= findheight(time_flt19,21.06,21.23);
        [asL23_5 asL23_6]= findheight(time_flt19,21.6,21.96);
        inds_L3=asL23_4-2500:asL23_2+3500;   %3rd level L-shaped flight sections                
        inds_L3=asL23_5:asL23_6+0;   %3rd level L-shaped flight sections                

    xvar='dist';
%    xvar='lon';
    switch xvar
        case 'lon'           
            xlab = 'Longitude';
            xdat(1).x = dat_flt19(inds_L3,3);
        case 'dist'
            np = 100; %number of points to split the flight path into
            inds = round([inds_L3(1):(inds_L3(end)-inds_L3(1))/np:inds_L3(end)]);
            LAT_plot = dat_flt19(inds,2);
            LON_plot = dat_flt19(inds,3);

            [ilat,ilon] = getind_latlon_quick(lat2d.var,lon2d.var,LAT_plot,LON_plot,0.1);

            x_vals_flight = (ilon-1)*dx_grid;
            y_vals_flight = (ilat-1)*dy_grid;
                       
            dist_flight = cumsum(sqrt((diff(x_vals_flight)).^2 + (diff(y_vals_flight)).^2)); %find distances between each point and the last and sum cumulatively
            time_dist_flight=time_flt19(inds(2:end));
            
            xdat(1).x = interp1(time_dist_flight,dist_flight,time_flt19(inds_L3),'','extrap'); 
            xlab = 'Distance (km)';
    end    
    
    plotcase='wind';

    
iref = findheight(LAT,-65.58); %Larsen B point (approx centre of Larsen B)

    
    switch plotcase
        case 'wind'    
            
            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            
            
            idat=1;
            
            ydat(idat).y = dat_flt19(inds_L3,9);                  
            labs(idat).l = ['L3'];
            labs(idat).l = ['L4'];
            

            
            
%            ylab = 'Mean melt rate contribution (mm day^{-1})';
%            figname=['Mean melt rate contributions for ' filestr];  
            
            ylab = 'Wind Speed (m s^{-1})';
            figname=['Wind speed vs. distance or Lon for ' filestr]; 
            
            izlim=0;
            zmin=-8;
            zmax=2;
              
        
              

            
    end
    
               
    
    titlenam=figname;
    savename=[figname];
    
    xlims=1;
    xlimits=[min(xdat(1).x) max(xdat(1).x)];
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    case 80    %plot against latitude
%run calc_melt_tot first then, which will also run heat_fluxes_mean_along_latitude.m

    latlon='lon';
    switch latlon
        case 'lat'           
            xlab = 'Longitude';
            xdat(1).x = LON;
        case 'lon'
            xlab = 'Latitude';
            xdat(1).x = LAT;
    end    
    
    plotcase='normal';
%    plotcase='relative_diffs';
%    plotcase='cloud';
%    plotcase='RH';
%    plotcase='n_tot';
    
iref = findheight(LAT,-65.58); %Larsen B point (approx centre of Larsen B)

    
    switch plotcase
        case 'normal'    
            
            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            
            
            idat=1;
            
            ydat(idat).y = melt_dat - melt_dat(iref); 
            xdat(idat).x = LAT;            
            labs(idat).l = ['Melt - ' num2str(melt_dat(iref),'%.2f')]; idat=idat+1;
            
            ydat(idat).y = sw_dat - sw_dat(iref); 
            xdat(idat).x = LAT;            
            labs(idat).l = ['SW - ' num2str(sw_dat(iref),'%.2f')]; idat=idat+1;
            
            ydat(idat).y = lw_dat - lw_dat(iref); 
            xdat(idat).x = LAT;            
            labs(idat).l = ['LW + ' num2str(-lw_dat(iref),'%.2f')]; idat=idat+1;
            
            ydat(idat).y = sh_dat; 
            xdat(idat).x = LAT;            
            labs(idat).l = 'SH'; idat=idat+1;
            
            ydat(idat).y = lh_dat; 
            xdat(idat).x = LAT;
            labs(idat).l = 'LH'; idat=idat+1;
            
            ydat(idat).y = sh_dat+lh_dat; 
            xdat(idat).x = LAT;
            labs(idat).l = 'SH+LH'; idat=idat+1;
            
            ydat(idat).y = grd_dat; 
            xdat(idat).x = LAT;
            labs(idat).l = 'GRD'; idat=idat+1;
            
            
%            ylab = 'Mean melt rate contribution (mm day^{-1})';
%            figname=['Mean melt rate contributions for ' filestr];  
            
            ylab = 'Melt contribution (mm)';
            figname=['Melt contributions for ' filestr]; 
            
            izlim=0;
            zmin=-8;
            zmax=2;
              
        case 'relative_diffs'                  

            idat=1;            
            
            ydat(idat).y = (sw_dat-sw_dat(iref))./(melt_dat-melt_dat(iref)); 
            xdat(idat).x = LAT;            
            labs(idat).l = 'SW'; idat=idat+1;
            
            ydat(idat).y = (lw_dat-lw_dat(iref))./(melt_dat-melt_dat(iref));  
            xdat(idat).x = LAT;            
            labs(idat).l = 'LW'; idat=idat+1;
            
            ydat(idat).y = (sh_dat-sh_dat(iref))./(melt_dat-melt_dat(iref)); 
            xdat(idat).x = LAT;            
            labs(idat).l = 'SH'; idat=idat+1;
            
            ydat(idat).y = (lh_dat-lh_dat(iref))./(melt_dat-melt_dat(iref)); 
            xdat(idat).x = LAT;
            labs(idat).l = 'LH'; idat=idat+1;
            
            shlh_dat = sh_dat + lh_dat;
            ydat(idat).y = (shlh_dat-shlh_dat(iref))./(melt_dat-melt_dat(iref)); 
            xdat(idat).x = LAT;
            labs(idat).l = 'SH+LH'; idat=idat+1;
            
            ydat(idat).y = (grd_dat-grd_dat(iref))./(melt_dat-melt_dat(iref)); 
            xdat(idat).x = LAT;
            labs(idat).l = 'GRD'; idat=idat+1;
            
            
            ylab = 'Relative contribution to mean melt rate (mm day^{-1})';
            figname=['Relative contribution to mean melt rate for ' filestr];    
            
            izlim=1;
            zmin=-1;
            zmax=1.5;
            
        case 'cloud'    
            
            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            
            
            idat=1;
            
            ydat(idat).y = 1000*cond_dat; %convert to g/m2 of condensate
            xdat(idat).x = LAT;            
            labs(idat).l = ['Cond']; idat=idat+1;                      
            
            
            ylab = 'Total condensate (g m^{-2})';
            figname=['Latitude mean total condensate for ' filestr];   
            
        case 'RH'    
            
            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            
            
            idat=1;
            
            ydat(idat).y = rh_dat; %convert to g/m2 of condensate
            xdat(idat).x = LAT;            
            labs(idat).l = ['RH']; idat=idat+1;                      
            
            
            ylab = 'Relative humidity';
            figname=['Latitude mean relative humidity for ' filestr];   
            
         case 'n_tot'    
            
            lor=4; %1=top-right, 2=top-left 0=auto, 3=lower left, 4=lower right, -1=on the right of plot pane
            
            
            idat=1;
            
            ydat(idat).y = n_tot_dat; %convert to g/m2 of condensate
            xdat(idat).x = LAT;            
            labs(idat).l = ['Days']; idat=idat+1;                      
            
            
            ylab = 'Mean no. days';
            figname=['Latitude mean number of melting days for ' filestr];      
              

            
    end
    
               
    
    titlenam=figname;
    savename=[figname];
    
    xlims=1;
    xlimits=[xdat(1).x(1) xdat(1).x(end)];
    xlimits=[-69 xdat(1).x(end)];    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    case 79
        
    time=14;
    
    tstr=Times(time,:);
    iund=findstr('_',tstr);
    tstr(iund)=' '; 
    
    
    xlims=0;
    
    latlon='lon';
    switch latlon
        case 'lat'
            lat=-67.5;
            icon_inds = get_inds_constant_lat(lat,lat2d,lon2d); %get indices for a constant latitude slice
            xlab = 'Longitude';
            labs(1).l = ['LAT = ' num2str(lat)];
            xdat(1).x = lon2d.var(icon_inds);
        case 'lon'
            
            lon=-61.25;
%            lon=-62.5;
            icon_inds = get_inds_constant_lat(lon,lon2d,lat2d); %for lon just swap around input of lat and lon
            xlab = 'Latitude';
            labs(1).l = ['LON = ' num2str(lon)];
            xdat(1).x = lat2d.var(icon_inds);
    end
    
    variable='SWDOWN';
    variable='Melt';
%    variable='10m Wind Speed';
%    variable='n-level Wind Speed';
    variable='Terrain';    
%     variable='TSK';   
%     variable='TSLB';   
%     variable='TSLB';
%     variable='SNOWDEN';       
    
    switch variable
        case 'Melt'
            LW=nc{'GLW'}(time,:);
            SW=nc{'SWDOWN'}(time,:); %downwelling SW
            SH=-nc{'HFX'}(time,:);
            LH=-nc{'LH'}(time,:); %negative as WRF convention is that these are fluxes into air
            ALBEDO=nc{'ALBEDO'}(time,:);
            EMISS=nc{'EMISS'}(time,:);
            GRDFLX=nc{'GRDFLX'}(time,:); %sign convention is that this is flux into the surface layer
            TSK=nc{'TSK'}(time,:);
            %    ALBEDO=0.78;
            %sign convention is postive means energy going into ground
            SW_UP=ALBEDO.*SW; %think albedo means this for WRF
            SW_NET=SW-SW_UP;

            %EMISS=0.98;
            LW_UP=5.67e-8.*TSK.^4; %Boltzmann W/m2 using skin temperature (need emissivity?)
            LW_NET=EMISS.*(LW-LW_UP);


             MNET=LW_NET + SW_NET + LH+SH + GRDFLX;
%            MNET=LW_NET;
            %        MNET=LH+SH;

            
            melt_var='MNET';            
%            melt_var='SW_NET';
%            melt_var='LW_NET';
%            melt_var='SH+LH';
            melt_var='GRDFLX';
%            melt_var='SH';
%            melt_var='LH';
%            melt_var='SH+LH+GRDFLX';            
            
            switch melt_var
                case 'MNET'
                    slice_dat = MNET;
                    zmin=0; 
                    zmax=200;
                    izlim=1;
                    figname=['Melt flux at ' tstr ' for ' filestr];
                case 'SW_NET'
                    slice_dat = SW_NET;
                    zmin=230; 
                    zmax=280;
                    izlim=1;
                    figname=['SW net flux at ' tstr ' for ' filestr];
                case 'LW_NET'
                    slice_dat = LW_NET;
                    zmin=230; 
                    zmax=280;
                    izlim=0;
                    figname=['LW net flux at ' tstr ' for ' filestr];
                case 'SH+LH'
                    slice_dat = LH+SH;
                    zmin=-40; 
                    zmax=10;
                    izlim=1;
                    figname=['Sensible + latent heat flux at ' tstr ' for ' filestr];  
                case 'GRDFLX'
                    slice_dat = GRDFLX;
                    zmin=-40; 
                    zmax=10;
                    izlim=0;
                    figname=['Ground heat flux at ' tstr ' for ' filestr];     
                case 'SH'
                    slice_dat = SH;
                    zmin=-30; 
                    zmax=20;
                    izlim=1;
                    figname=['Sensible heat flux at ' tstr ' for ' filestr];    
                 case 'LH'
                    slice_dat = LH;
                    zmin=-30; 
                    zmax=0;
                    izlim=1;
                    figname=['Latent heat flux at ' tstr ' for ' filestr];     
                    
                case 'SH+LH+GRDFLX'
                    slice_dat = SH+LH+GRDFLX;
                    zmin=-90; 
                    zmax=-20;
                    izlim=1;
                    figname=['Sensible + latent + ground heat flux at ' tstr ' for ' filestr];  
                    
                
                    
            end

            
            ylab = 'Flux (W m^{-2})';
            

            

            

        case 'SWDOWN'

            slice_dat = nc{'SWDOWN'}(time,:);
            ylab = 'Flux (W m^{-2})';
            figname=['Shortwave downwelling radiation at ' tstr ' for ' filestr];
            
    case '10m Wind Speed'            
       u10 = nc{'U10'}(time,:); %10 m winds
       v10 = nc{'V10'}(time,:); %        
       slice_dat = sqrt(u10.^2+v10.^2);
        
       ylab = 'Wind Speed (m s^{-1})';
       figname=['10m wind speed at ' tstr ' for ' filestr];
       
    case 'n-level Wind Speed'    
       ih_wrf=1;
       u = 0.5* (nc{'U'}(time,ih_wrf,:,1:end-1) + nc{'U'}(time,ih_wrf,:,2:end) ); %2d wind at one height
       v = 0.5* (nc{'V'}(time,ih_wrf,1:end-1,:) + nc{'V'}(time,ih_wrf,2:end,:) ); %2d wind at one height 
       slice_dat = sqrt(u.^2+v.^2);
        
       ylab = 'Wind Speed (m s^{-1})';
       figname=['Wind speed at model level ' num2str(ih_wrf) ' at ' tstr ' for ' filestr];   
       
    case 'Terrain'

            slice_dat = nc{'HGT'}(time,:);
            ylab = 'Terrain height (m)';
            figname=['Terrain height at ' tstr ' for ' filestr];
            
      case 'TSK'

            slice_dat = nc{'TSK'}(time,:)-273.15;
            ylab = 'Skin temperature (^{o}C)';
            figname=['Skin temperature at ' tstr ' for ' filestr];      

            
       case 'TSLB'

            slice_dat = nc{'TSLB'}(time,1,:)-273.15;
            ylab = 'Soil temperature (^{o}C)';
            figname=['Soil temperature at ' tstr ' for ' filestr];      
     
        case 'SNOWDEN'

            SNOWH=nc{'SNOWH'}(time,:); %snow depth m - varies by a massive amount - something wrong?
            SNOW=nc{'SNOW'}(time,:); %
            
            SNODEN=SNOW./SNOWH; %snow density in kg/m3 - varies quite a lot as time goes on
            SNODEN(SNODEN>400)=400; %limited to 400 kg/m3 in the code
            
            slice_dat = SNODEN;
            ylab = 'Snow density (kg m^{-3})';
            figname=['Snow density at ' tstr ' for ' filestr];      
              

    end
    
    
    
    ydat(1).y = slice_dat(icon_inds);
    
    
    
    titlenam=figname;
    savename=[figname labs(1).l];
    
    xlims=1;
    xlimits=[xdat(1).x(1) xdat(1).x(end)];
    

case 78
    %different WRF plots

    dual=0;
    lor=-1;
    
    no_sort=0; %flag to stop sorting in height
       
    %num of markers - set to -1 for all data points to have a marker
    nmark=[-1 -1 -1 -1 -1 -1]; %if give an array then these apply for the different lines
    nmark=0; %set to zero for no markers
    
    Nlocs=0;
    
    incep=0;
    
    i_multi_wrf=1; %flag to say that want to plot from more than one WRF output file
    ilabel_rundir=0; %flag to say to label the legend according to the file directory
    %othewise uses the A,B,C etc. location labels.
    i_paper_labels=0; %flag to say whether to write the paper-friendly titles or the full titles with date, time and simulation name 
    i_label_time=0; %flag to label lat/lon (=0) or not(=1)
    no_title=0; %switch off the title

    
    %%%%%%%%%%%%%%  choose things to plot %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    aircraft_comp = 1; %flag to say if want the aircraft comparison
    roth_comp = 0;  %flag to say if want Rothera sounding plotted
    iwrf_profs = 1; %flag to say whether to plot wrf profiles or not
    %probably don't want to change this - try setting aircraft_comp=1
     % ascent_str='034'; %'4' is the L-shaped segments - variation of L-shaped segs is minimal
     ascent_str='03'; %0 and 3 are the first and last ascent
%     ascent_str='1'; %upwind side
    % ascent_str='03'; %5 for L-shaped
    %ascent_str='6'; %mini descent for the last ascent

    iplot_aircraft_locs_model=1; %flag to say whether we want the aircraft ascent and descent 
    %locations to be plotted for the model (aircraft locs specified in LAT_extra shortly)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    clear location_lab
    
    %order of these labels is: aircraft ascent/descent, etc.; specified LAT/LON values; specified extra_x/y values
    i_override_loc_lab=1; %set to one to use the labels below - make sure there are enough labels
    location_lab(1).l = 'A';
    location_lab(2).l = 'B';  %'M'
    location_lab(3).l = 'C';
    location_lab(4).l = 'D';
    location_lab(5).l = 'WJ';
    location_lab(6).l = 'WK';
    
    
    
%    for iloc_lab=1:10
%        location_lab(iloc_lab).l = 'J';
%    end 
    
%    location_lab(2).l = '-68, -75';
%    location_lab(3).l = '-67, -75';
    
    
    

 
    izlim=1;
    zmin=0;
    zmax=12000;
    zmax=3000;
%    zmax=9000;
        



    %	xlims=0;
    %	xlimits=[980 995];
    %	xlimits=[0 1.5e5];


    logflag=0;
 %   iydir = -1;



 switch file_type
     case 'wrfout'
         time_array=[8 9 10 11 12 17 18 19]; %6th Jan: 11=06, 12=09, 13=12, 14=15, 15=18, 16=21 UTC
         time_array=[10 11 12 12];
        time_array=[13];
%        time_array=[14];
%        time_array=[15];
%         time_array=idir;
     case 'met_em'
         time_array=1;
 end
 
 


        var='pressure';
    var='temperature';
%    var='equiv_potemp';
%    var='potemp';
%     var='vapour';
%    var='ice';
%    var='RH';
     var='wind speed';
%     var='wind speed component';
%     var='cloud';
     var='wind dir';
%     var='Froude'; 
%      var='density gradient';
%      var='dpot/dz';
%      var='westerly wind'         
%       var='stratification integral'
%        var='Scorer parameter';
%        var='ridge_height';
%        var='Houghton Smith formulae';
        
%    LAT=[-67.5702 -67.1420];
%    LON=[-68.1297 -61.6650];


    ylab='Height (m)';

%stores locations along the flight track so that the same locations can be plotted for the model or for 
%plotting on the map (stored in LAT_extra)
    if aircraft_comp == 1;
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%   points to plot on the flight track based on the time along the flight track
        times_flight_loc = [19.84565 20.056 20.12 20.2755]; %20.12 is the time where the max was seen for aircraft data - others are just points
        %along the aircraft track
        times_flight_loc = [20.3755 21.9815 22.0205]; %20.3755 is the time where the max was seen for aircraft data (index=269899)
        %21.9815 is the time of second wind peak on the mini descent before the last ascent
        times_flight_loc = [20.3755 22.0205]; 

%        times_flight_loc = [22.0054]; %the time of the lowest point of the mini-descent
        
        clear it_flt;
        for iflt=1:length(times_flight_loc)
            it_flt(iflt) = findheight(time_flt19,times_flight_loc(iflt));
        end
        LAT_extra = dat_flt19(it_flt,2)';
        LON_extra = dat_flt19(it_flt,3)';

    end
 
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%% can set LAT LON here %%%%%%%%%%%
% LAT_extra = 24.08;
% LON_extra = 38.06;
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
 
LAT_extra2 =[];  %the locations specified by extra_x and extra_y will be stored in LAT/LON_extra2
LON_extra2 =[];


%%%%%%%%%%%%%%%%%%%%%%%%%%%   extra points to plot - give as extra_x and y km

% extra_x = [575]; %for 12UTC, 6th Jan, ncep polar
% extra_y = [351];
 
% extra_x = [556]; %for 03UTC, 7th Jan, ncep polar
% extra_y = [355];
 
% extra_x = [570]; %for 12UTC, 6th Jan, ecmwf
% extra_y = [355];

%  extra_x = [600]; %random 
%  extra_y = [400];
  
%  extra_x = [275]; %lefthand side of the equiv cross sections
%  extra_y = [380];

%extra_x = [605 800]; %for 18UTC, 6th Jan, ecmwf_ml_0.5
%extra_y = [275 200];
%  
%  extra_x = [634]; %for 21UTC, 6th Jan, ncep_3dom_nudging
%  extra_y = [271]; 
% % 
%  extra_x = [640]; %for 21UTC, 6th Jan, ecmwf_ml_0.5_nudging - 67, 62.2
%  extra_y = [320];
%  
   extra_x = [587 654.48 625 525 675 592 685]; %for 12UTC, 6th Jan, ecmwf_ml_0.5_nudging
   extra_y = [325 296.87 120 225 325 222 80];
 
%%%%%%%%%%%%%%%%%     17th Feb, 2010    %%%%%%%%%%%%%%%%
   extra_x = [557 512]; %for 12UTC, 6th Jan, ecmwf_ml_0.5_nudging
   extra_y = [307 240]; %points E and F - will relabel C and D as of 27th Oct.
   
%   extra_x = [682 626]; %for 21UTC, 6th Jan, ecmwf_ml_0.5_nudging
%   extra_y = [270 277]; %middle of jet beyond the edge of the ice shelf - points C and D
   
%   extra_x = [595]; %for 21UTC, 6th Jan, ecmwf_ml_0.5_nudging
%   extra_y = [282]; %middle of jet beyond the edge of the ice shelf - points C and D

%   extra_x = [605]; %06/04/10 - For 15 UTC - the point in the jet centre 
%   extra_y = [300]; %

%   extra_x = [583 550]; %13/09/10 - For the comparison to analysis at 12 UTC on 6th
%   extra_y = [298 260]; %

%   extra_x = [557 512 530]; %13/09/10 - For the comparison to analysis at 12 UTC on 6th
%   extra_y = [307 240 265]; %
%   Nlocs=[2 1];

%    extra_x = [646 620];
%    extra_y = [298 332];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   extra_x = [459 557 512]; %01/03/10 - 12 UTC on 6th - looking at a point from down south
%   extra_y = [146 307 240]; %to investigave the southerly wind properties
   
%   extra_x = [472 605 565]; %01/03/10 - 15 UTC on 6th - looking at a point from down south
%   extra_y = [135 300 312]; %to investigave the southerly wind properties

%   extra_x = [482 605 600]; %01/03/10 - 21 UTC on 6th - looking at a point from down south
%   extra_y = [212 300 220]; %to investigave the southerly wind properties


  %       extra_x = [extra_x 624.37]; %Larsen AWS location (domain 3)
  %       extra_y = [extra_y 283.125];
  
%   
%   extra_x = [587 654.48 625 525 675 592 685 570 690 100]; %for 12UTC, 6th Jan, ecmwf_ml_0.5_nudging
%   extra_y = [325 296.87 120 225 325 222 80 275 10 400];

%extra_x = [680];  %21 UTC 6th Jan ecmwf_ml_0.5_nudging case - strongest wind region to the east of the aircraft location
%extra_y = [270];  %N.B. using the new (proper) DX and DY grid sizes. (15th Feb, 2010)

%    extra_x = [568 700]; %for 12 & 21 UTC, 6th Jan, ecmwf_ml_wps_snow
%    extra_y = [292 291];
    
%    extra_x = [626 590];   % 633    % 580];   %651]; %for 18UTC, 6th Jan, ncepR2_seaice
%    extra_y = [255 254];   % 275    % 274];   %281];
    
%    extra_x = [522.75 485.5];   % 514]; %Avery 7th December case B,C and D
%    extra_y = [407 407];  % 418];
    
%    extra_x = [479]; %Avery 1st Dec case
%    extra_y = [396.5];
  
%    extra_x = [522.75];
%    extra_y = [407];
    
%    extra_x = [485.5];
%    extra_y = [407];

%    extra_x=[300 350];
%    extra_y=[400 350];
    
    
%    [x_cross,y_cross]=find_xy_position_along_cross_section_line(x_line,y_line,100);
    
%    extra_x=[x_line(1) x_cross 1];
%    extra_y=[y_line(1) y_cross 450];
    
    
    
%    extra_x=[250 235.5 10 450];
%    extra_y=[375 413 435 360];

%    extra_x=[200];
%    extra_y=[500];

    
 %   extra_x=[290];
 %   extra_y=[430];

%  extra_x=[];
%  extra_y=[];  


  
% 

% extra_x = [587]; %for 12UTC, 6th Jan, ecmwf_ml_0.5_nudging
% extra_y = [325];

%  extra_x = [200 300]; %extra points to the westside of the peninsula
%  extra_y = [600 500];






% check whether any have been added to the list of LAT/LON values too

 nlat = size(lat2d.var,1);
 nlon = size(lat2d.var,2);
 
 i_grid = DX * [0:nlon-1];
 j_grid = DY * [0:nlat-1];
 
 
 %now calculate the lat/lon of the extra_x and extra_y points and put them in LAT_extra2
 for iflt=1:length(extra_x)
     i_extra = findheight_nearest(i_grid,extra_x(iflt));
     j_extra = findheight_nearest(j_grid,extra_y(iflt));
     LAT_extra2(iflt) = lat2d.var(j_extra,i_extra);
     LON_extra2(iflt) = lon2d.var(j_extra,i_extra);
 end
 
 


 
       
     
     LAT=[-67.55 -67.62 -67.55]; %first ascent from Rothera
     LON=[-68.1 -67.8 -67.5];
     
%     LAT=[-67.55 -67.55 -67.55]; %Rothera base - put in twice so can show two different times for the same location
%     LON=[-68.1 -68.1 -68.1];
     
%      LAT=[-68.2031 -68.2031 -68.2031]; %to the west and south of Rothera - Marg. Bay
%      LON=[-68.6920 -68.6920 -68.6920];
%      
%      LAT=[-68.34 -68.34 -68.34 -68.34 -68.34];  %point H used in the print outs
%      LON=[-69.01 -69.01 -69.01 -69.01 -69.01];
%      
%      
% %     LAT=[-68.1746 -68.1746 -68.1746 -68.1746 -68.1746];  %new point further north than H - approx latitude of I
% %     LON=[-69.0425 -69.0425 -69.0425 -69.0425 -69.0425];
% 
%      LAT=[-67.7 -67.7];  %newer point at the lefft side of the cross section throug the Fohn 
%      LON=[-70 -70];
%      
%       LAT=[-68.5573 -68.3340 -68.3327];  %even newer point at the lefft side of the new NE pointing cross section throug the Fohn 
%       LON=[-68.8593 -70.5348 -67.7867];
%       
%       LAT=[-68.5573 -68.5573 -68.5573 -68.5573 -68.5573 -68.5573 -68.5573 -68.5573];  %even newer point at the lefft side of the new NE pointing cross section throug the Fohn 
%       LON=[-68.8593 -68.8593 -68.8593 -68.8593 -68.8593 -68.8593 -68.8593 -68.8593];
%       
%       LAT=[-68.3186 -68.3186 -68.3186 -68.3186 -68.3186 -68.3186 -68.3186 -68.3186];  %even newer point at the lefft side of the new NE pointing cross section throug the Fohn 
%       LON=[-70.5566 -70.5566 -70.5566 -70.5566 -70.5566 -70.5566 -70.5566 -70.5566];
%       
%       LAT=[-68.3186 -68 -67 -70 -68 -70];
%       LON=[-70.5566 -75 -75 -83 -83 -86];
%       
%       LAT=[-68.7255];
%       LON=[-76.4423];


      LAT=[-67.55 -67.62 -67.55 -68.3186 -68.1 -68.7 -67.6 -66.2];  %4th Nov, 2010
      LON=[-68.1 -67.8 -67.5 -70.5566 -71.3 -76.4 -66.3 -68.5];  %points as seen for the upwind plots in Antarctica notes Dec08.doc
      
      LAT=[-68.1 -68.7 -66.2 -67.3];  %4th Nov, 2010
      LON=[-71.3 -76.4 -68.5 -72.9];  %points as seen for the upwind plots in Antarctica notes Dec08.doc
      
     
%      LAT=[-68.3186 -68.3186 -68.3186 -67];  %5th August, 2009
%      LON=[-70.5566 -70.5566 -70.5566 -75];
      
%      LAT=[-68.1 -68.1];
%      LON=[-70 -70];
     
     
%     LAT=[-68.1746 -68.1746 -68.1746 -68.1746 -68.1746];  %close to the peninsula for Froude analysis - looks like have low level blocking
%     LON=[-67.7088 -67.7088 -67.7088 -67.7088 -67.7088];  %location I
     
%     LAT=[-68.3131 -68.3131 -68.3131]; %to the west and south of Rothera - Marg. Bay
%     LON=[-69.2269 -69.2269 -69.2269];
     
%     LAT=[-68.2367 -68.2367 -68.2367]; %to the west and south of Rothera - Marg. Bay
%     LON=[-69.3400 -69.3400 -69.3400];
     
%     LAT=[-77.6479 -77.6479 -77.6479]; %over the continent at the base of the Peninsula (d02)
%     LON=[-93.4854 -93.4854 -93.4854];

%     LAT=[-68.34 -68.1746]; %locations H and I 
%     LON=[-69.01 -67.7088]; %to get labels right in plotTime...

%     LAT=[-66.8367 -66.9043 -67.1643 -66.3952 -66.8750]; %Avery Plateau 1st Dec 1995
%     LON=[-65.4891 -65.5770 -66.0512 -64.4811 -65.6243]; 
%     
%     LAT=[-66.6967];
%     LON=[-65.6505];
%     
%     LAT=[-66.8367]; %Avery Plateau 1st Dec 1995
%     LON=[-65.4891]; 

%        LAT=[-67.01]; %Larsen AWS
%        LON=[-61.55];
 
% ********************   Don't forget to set/unset these

    LAT=[];
    LON=[];

% *******************  

    
%    LAT=[-66.9043]; %nearby spot to Avery Plateau location where conentrations are larger
%    LON=[-65.5770];


%add the location of the aircraft ascent/descent if requested
if iplot_aircraft_locs_model==1  
    LAT = [LAT_extra LAT];
    LON = [LON_extra LON];
end

%now add the requested extra_x, extra_y locations for model plot
LAT=[LAT LAT_extra2];
LON=[LON LON_extra2];     
     
   
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%   points within the max flow   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 imax_flow=0;
 if imax_flow==1
 %find the location of the maximum wind speed on level 4 at around the lon of the aircraft max   
     lon_fli=-61.7; %latitude of the airdcraft at time of max speed
%     lon_fli=-63;
%     lon_fli=-60.85;
     dfli = 0.05;
     ilon_fli = find(lon2d.var>lon_fli-dfli & lon2d.var<lon_fli+dfli & lat2d.var>-68 & lat2d.var<-66);
     
     
     max_sp=0;

         u=nc{'U'}(time,4,:,:);
         v=nc{'V'}(time,4,:,:);
         u = 0.5 * ( u(:,1:end-1) + u(:,2:end) );
         v = 0.5 * ( v(1:end-1,:) + v(2:end,:) );
         
         sp=sqrt(u(ilon_fli).^2+v(ilon_fli).^2);
         [max_sp imax] = max(sp);
         
         [lat_max lon_max]=ind2sub(size(lon2d.var),ilon_fli(imax));
         LAT = [LAT lat2d.var(lat_max,lon_max)];
         LON = [LON lon2d.var(lat_max,lon_max)];

 end

    %1500m point on the descent is at -61.8, -67.15 (i.e. very similar to
    %the first aircraft trajectory point)
    
    %Nlocs determines how many locations to plot for each of the runs specified in rundir.dir
    %E.g. might want 2 locations for file 1 and two for file 2 - then put Nlocs=[2 1]
    %If only have one run then Nlocs is set to length(LAT)
    if sum(Nlocs)~=length(LAT) | length(LAT)==0
        Nlocs=[length(LAT)]; %switch off the extra user added locations
    end


    [ilat,ilon] = getind_latlon_quick(lat2d.var,lon2d.var,LAT,LON,0.1);

    i=0;
    
%%%%%%%%% add aircraft profiles? Locations of ascents/descents described here %%%%%%%%%    
    if aircraft_comp == 1
        
        nmark(1)=0;

        [as_1 as_2]= findheight(time_flt19,19.332,19.53);  %first ascent over peninsula ('1')
        as_inds = [as_1:as_2];
        
        [as2_1 as2_2]= findheight(time_flt19,22.005,22.146); %final ascent back over peninsula  ('2')
        as2_inds = [as2_1:as2_2];

        [as3_1 as3_2]= findheight(time_flt19,20.744,20.78);
        [as4_1 as4_2]= findheight(time_flt19,21.176,21.201);
        [as5_1 as5_2]= findheight(time_flt19,21.552,21.577);
        asL_inds = [as3_1:as3_2 as4_1:as4_2 as5_1:as5_2];     %ascents during L-shaped sections ('4')
        
        [asL23_1 asL23_2]= findheight(time_flt19,20.76,21.55); %L-shaped sections of level flight ignoring when wind speed went wrong (too high)
        [asL23_3 asL23_4]= findheight(time_flt19,21.06,21.23);
        asL23_inds=[asL23_1:asL23_3 asL23_4:asL23_2]; %these two periods are then the 2nd and 3rd level flight sections

        

        [ds_1 ds_2]= findheight(time_flt19,20.24,20.4);  %first descent after peninsula ('0')
        ds_inds = [ds_1:ds_2];
        
        [asL_mini_descent_inds_1 asL_mini_descent_inds_2]= findheight(time_flt19,21.959,22.0052);
        asL_mini_descent_inds = [asL_mini_descent_inds_1:asL_mini_descent_inds_2];
        
        
        
        
        for iflight=1:length(ascent_str)
            i=i+1;
            

            
            if strfind(ascent_str(iflight),'1')
                inds = as_inds;
                labs(i).l = 'Aircraft ascent';
            elseif strfind(ascent_str(iflight),'3')
                inds = as2_inds;
                labs(i).l = 'Aircraft ascent2';
            elseif strfind(ascent_str(iflight),'4')
                inds = asL_inds;
                labs(i).l = 'Aircraft ascent-L';    
            elseif strfind(ascent_str(iflight),'0')
                inds = ds_inds;
                labs(i).l = 'Aircraft descent';
            elseif strfind(ascent_str(iflight),'5')
                inds = asL23_inds;
                labs(i).l = 'Aircraft L2 & L3'; 
            elseif strfind(ascent_str(iflight),'6')
                inds = asL_mini_descent_inds;
                labs(i).l = 'Aircraft mini descent';     
            end
            
            ydat(i).y = dat_flt19(inds,11) - 65;            
            disp('******  minus 65  ********');

            switch var
                case 'pressure'
              %      xlab='Pressure difference, WRF minus aircraft (hPa)';

              %      wrf_int = interp1(ydat(i).y,xdat(1).x,dat(ds_inds,11),[],'extrap');
              %      xdat(i).x = wrf_int - dat(ds_inds,4);
              %      ydat(i).y = dat(ds_inds,11);
                    
                    
                    xlab='Pressure (mb)';
                    
                    xdat(i).x = dat_flt19(inds,4);
                                                            



                    xlims=1;
                    xlimits=[975 990];
                    %		xlimits=[800 995];

                    izlim=1;
                    zmin=0;
                    zmax=120;
%                    zmax=3000;

                    %		logflag=1;

                    if iwrf_profs==0
                        figname=['Pressure profile '];
                    end

                case 'temperature'
                    xlab='Temperature (^{o}C)';
                    xdat(i).x = dat_flt19(inds,6); %use ds_inds for descent
                    


                    izlim=1;
                    zmin=0;
%                    zmax=3000;

                    xlims=1;
                    xlimits=[-15 6];
                    
                    if iwrf_profs==0
                        figname=['Temperature profile '];
                    end
                    
                case 'potemp'
                    xlab='Potential Temperature (K)';
                    T=dat_flt19(inds,6)+273.15;
                    P=dat_flt19(inds,4)*100;
                                        
                    xdat(i).x = T.*(1000e2./P).^0.286; %use ds_inds for descent
                    


                    izlim=1;
                    zmin=0;
                    zmax=3000;

                    xlims=0;
                    xlimits=[-15 -25];
                    
                    if iwrf_profs==0
                        figname=['Temperature profile '];
                    end    
                    
                    
                case 'equiv_potemp'
                    xlab='Equivalent potential Temperature (K)';
                    T=dat_flt19(inds,6)+273.15; %K
                    P=dat_flt19(inds,4)*100; %Pa                                            
                    qv = qv2_flt19(inds); %kg/kg
                    
                    xdat(i).x = ( (T + 2.453e6*qv/1004).*(1e5./P).^0.286 )';
                                        
                   
                    


                    izlim=1;
                    zmin=0;
                    zmax=3000;

                    xlims=0;
                    xlimits=[-15 -25];
                    
                    if iwrf_profs==0
                        figname=['Temperature profile '];
                    end      
                    
                case 'vapour'
                    xlab='Vapour mixing ratio (g kg^{-1})';
                    xdat(i).x = 1000*qv2_flt19(inds);
                    

                    izlim=1;
                    zmin=0;
                    zmax=3000;

                    xlims=1;
                    xlimits=[0 5];
                    
                    if iwrf_profs==0
                        figname=['Vapour profile '];
                    end
                    
                case 'RH'
                    xlab='RH (%)';
                    T = dat_flt19(inds,6)+273.15;
                    P = dat_flt19(inds,4)*100;
                    qsat = SatVapPress(T,'goff','liq',P,1) / f;
                    xdat(i).x = qv2_flt19(inds)./qsat *100;
                    

                    izlim=1;
                    zmin=0;
                    zmax=3000;

                    xlims=0;
                    xlimits=[0 5];
                    
                    if iwrf_profs==0
                        figname=['RH profile '];
                    end    
                    
                case 'wind speed'
                    xlab='Wind speed (m s^{-1})';

                    xdat(i).x = dat_flt19(inds,9);
                    
                    

                    nfilter=20; bfilter=ones([1 nfilter])*1/nfilter;
                    xdat(i).x=filter(bfilter,1,xdat(i).x);
                    xdat(i).x(end-nfilter+1:end)=[]; ydat(i).y(end-nfilter+1:end)=[];
                    xdat(i).x(1:nfilter)=[]; ydat(i).y(1:nfilter)=[];    

                    izlim=1;
                    zmin=0;
                    zmax=3000;

                    xlims=1;
                    xlimits=[0 20];

                    if iwrf_profs==0
                        figname=['Wind speed profile '];
                    end
                    
                    
                    
                case 'wind dir'
                    xlab='Wind direction (degrees)';
                    
                    xdat(i).x = dat_flt19(inds,10)+180;
                    
                    
                    %wind aircraft data is very noisy so smooth over 20 points
                    nfilter=10; bfilter=ones([1 nfilter])*1/nfilter;                                     
                    xdat(i).x=filter(bfilter,1,xdat(i).x);
                    xdat(i).x(end-nfilter+1:end)=[]; ydat(i).y(end-nfilter+1:end)=[];
                    xdat(i).x(1:nfilter)=[]; ydat(i).y(1:nfilter)=[];    

                    izlim=1;
                    zmin=0;
                    zmax=3000;

                    xlims=1;
                    xlimits=[150 300];
                    
                    if iwrf_profs==0
                        figname=['Wind direction profile '];
                    end
            end

            [ydat(i).y,I] = sort(ydat(i).y);
            xdat(i).x = xdat(i).x(I);
            
        end
    
    end
    
    i_previous=i;
    nplots_previous=i;
    
    
    if iwrf_profs==1

      Nwrf_files=length(rundir);
    ipos_locs=1;
     for ifile_wrf=1:Nwrf_files
         
         if i_multi_wrf==1
                dire2 = [dire(ifile_wrf).dir rundir(ifile_wrf).dir];
                cd(dire2);
         end
            

            


        iloc_inds=ipos_locs:ipos_locs+Nlocs(ifile_wrf)-1;
        ipos_locs=ipos_locs+Nlocs(ifile_wrf);
        
        for iloc2=1:length(iloc_inds)    
            iloc=iloc_inds(iloc2);
            
            i=i+1;
            
            
            if i_multi_wrf==1 & ilabel_rundir==1
%                for ilab=1:length(rundir)
                    location_lab(iloc).l = rundir(ifile_wrf).dir;
                    location_lab(iloc).l = remove_character(location_lab(iloc).l,'_',' ');
%                end
            end


            
            %if are using more than one WRF file then cd to the correct directory
            
            if length(time_array)==1
                i_previous=i-1;
                time=time_array;

                if i_multi_wrf==1
                    if is_met_em(ifile_wrf)==1
                        Times=(nca(ifile_wrf).nc{'Times'}(:))';
                    else
                        Times=(nca(ifile_wrf).nc{'Times'}(:));
                    end
                else
                    if is_met_em(1)==1
                        Times=(nca(1).nc{'Times'}(:))';
                    else
                        Times=(nca(1).nc{'Times'}(:));
                    end
                end

            else
                time=time_array(iloc);
                if is_met_em(1)==1
                    Times=(nca(i-i_previous).nc{'Times'}(:))';
                else
                    Times=(nca(1).nc{'Times'}(:));
                end

            end

            


  
            
            

            if i_multi_wrf==1 & is_met_em(ifile_wrf)==1
                tstr=Times(:)';
            elseif i_multi_wrf==0 & is_met_em(1)==1
                tstr=Times(:)';
            else
                tstr=Times(time,:);
            end
                    

            iund=findstr('_',tstr);
            tstr(iund)=' ';  
            
            [year,month,day,hour,mins,sec,month_text]=WRF_time_strings(tstr);

            if (i_multi_wrf==1 & is_met_em(ifile_wrf)==1) | (i_multi_wrf==0 & is_met_em(1)==1)
                if prod(size(nc{'GHT'})) > 0
                    ydat(i).y = nca(ifile_wrf).nc{'GHT'}(1,:,ilat(iloc),ilon(iloc));
                    incep=1;
                else
                    incep=0;

                    pres=nca(ifile_wrf).nc{'PRES'}(1,:,ilat(iloc),ilon(iloc)); %BUT should the first pressure and temperature be counted - know
                    % that the pressure is the surface pressure - what does that mean for the temperature - skintemp?
                    pres=pres(2:end);   %don't want the first level - at least for ecmwf ml data
                    psfc=nca(ifile_wrf).nc{'PSFC'}(:); psfc=psfc(ilat(iloc),ilon(iloc));
                    pmsl=nca(ifile_wrf).nc{'PMSL'}(:); pmsl=pmsl(ilat(iloc),ilon(iloc));
                    temp=nca(ifile_wrf).nc{'TT'}(1,:,ilat(iloc),ilon(iloc));
                    temp=temp(2:end);

                    %Height of the terrain as input from the analysis (underlying) model (coarse resolution interpolated onto wrf grid).
                    % (PSFC - this is the pressure at the height of the analysis terrain
                    % and not the pressure at the height of the high resolution terrain
                    %as taken from the geogrid program and given in HGT_M - tested this by checking the PSFC field in met_em
                    %files and wrfout and they are consistent with this).
                    %*** Actually, looking at the first level of PRES and comparing it to PSFC it seems the two are very close with both positive
                    %and negative differences. the PSFC lines look less smooth. PRES seems to follow the terrain more closely in terms of this
                    %smoothness anf the peaks and troughs correspond more closely - so this may be the pressure to choose to
                    %correspond to the height of SOILHGT
                    %NOTE that SOILHGT can be negative
                    %difference between choosing PSFC and PRES level one is about 80-100 m in the troposphere

                    %Here the hydrostatic equation is solved starting at the surface pressure, which is known to be at the height
                    %of the analysis terrain. The temperature vs pressure profile is described by PRES and TT and the required temperature
                    %at a given pressure (e.g. PSFC to start with) is found by interpolation in the hydrostatic2 function

                    %NOTE, might want to use this for finding pressure corrections for NCEP analysis files
                    %                     soilhgt = nc{'GHT'}(1,:,ilat(iloc),ilon(iloc)); %height of the second (=1000 hPa) pressure level
                    %                     soilhgt = soilhgt(2);
                    %                     [Y,I]=sort(pres,'descend'); %sort the data in order to take into account pres(2)(=surface) being lower than first level of 1000 hPa
                    %                     pres=pres(I);
                    %                     temp=temp(I);


                    if prod(size(nca(ifile_wrf).nc{'SOILHGT'})) > 0
                        soilhgt=nca(ifile_wrf).nc{'SOILHGT'}(:); soilhgt=soilhgt(ilat(iloc),ilon(iloc));  %height of PSFC level
                        pres2=pres;
                        temp2=temp;

                    else
                        pres2 = [pmsl pres];
                        skinT = temp(1)*(pmsl/pres(1))^0.286; %temperature assuming a constant potential temperature between msl and the surface point
                        %skinT = nc{'SKINTEMP'}(:); %using skin temperature as sea level temp - could be inaccurate?
                        %skinT = skinT(ilat(iloc),ilon(iloc));
                        %    skinT=skinT+5; %to test temperature sensitivity - does not seem that senstitive - 5 degree increase led to only 0.14 hPa increase in
                        %in estimated pressure of a height below soilhgt (tried 91 m wheras soilhgt was 111m - difference was even less for lower altitudes).
                        temp2 = [skinT temp];
                        %                soilhgt=nc{'SOILHGT'}(:); soilhgt=soilhgt(ilat(iloc),ilon(iloc));  %height of PSFC level
                        soilhgt=0;
                    end




                    PSPAN=[pres2(1) pres2(end)]; %pressure range for integration
                    [P,hp] = ODE45(@hydrostatic2,PSPAN,soilhgt,[],pres2,temp2); %enter the initial height for the given the first value of PSPAN
                    %note that some of the pressure levels in the PRES array will be below the

                    ydat(i).y = interp1(P,hp,pres);

                    %                     pres=nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                    %                     ydat(i).y = find_height_from_p_ant_d03(pres);

                end
            else
                ydat(i).y = WRFUserARW(nca(1).nc,'Z',time,ilat(iloc),ilon(iloc));
            end

            %	ydat(i).y = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc));
            switch var
                case 'pressure'
                    figname=['Pressure profile at ' tstr ' for ' filestr];
                    
                    if is_met_em(1)
                        xdat(i).x = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                    else                        
                        xdat(i).x = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc));
                    end
                   % iydir = -1; %reverse the direction of the pressure axis so is right way around
                   
               case 'equiv_potemp'
                    figname=['Equivalent potential temperature profile at ' tstr ' for ' filestr];
                    
                    if is_met_em(1)
%                        xdat(i).x = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                    else        
                        potemp = nc{'T'}(time,:,ilat(iloc),ilon(iloc)) + 300;
                        P = nc{'P'}(time,:,ilat(iloc),ilon(iloc)) + nc{'PB'}(time,:,ilat(iloc),ilon(iloc));
                        T = potemp ./ ( (1e5./P).^0.286 );
                        qv = nc{'QVAPOR'}(time,:,ilat(iloc),ilon(iloc));
                        xdat(i).x = ( (T + 2.453e6*qv/1004).*(1e5./P).^0.286 )';

                    end
                    
                    xlims=0;
                    xlimits=[275 290];
                    
                   
                   case 'potemp'
                    figname=['Potential temperature profile at ' tstr ' for ' filestr];
                    xlab='Potential temperature (K)';
                    if is_met_em(1)
%                        xdat(i).x = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                    else        
                        xdat(i).x = nc{'T'}(time,:,ilat(iloc),ilon(iloc)) + 300;                        
                    end
                    
                    xlims=1;
                    xlimits=[270 295];
%                    xlimits=[270 305];
%                    xlimits=[270 325];
                    
                case 'temperature'

                    figname=['Temperature profile at ' tstr ' for ' filestr];
                    xlab='Temperature (^{o}C)';

                    if is_met_em(ifile_wrf)==1
                        xdat(i).x = nca(ifile_wrf).nc{'TT'}(1,:,ilat(iloc),ilon(iloc)) - 273.15;
                        if incep==0
                            xdat(i).x = xdat(i).x(2:end);
                        end
                    else
                        xdat(i).x = WRFUserARW(nca(ifile_wrf).nc,'tc',time,ilat(iloc),ilon(iloc));
                        xdat(i).x = [get_wrf_point_surface(nca(ifile_wrf).nc,'T2',time,ilat(iloc),ilon(iloc))-273.15 xdat(i).x];
                        terr_level = nca(ifile_wrf).nc{'HGT'}(:,ilat(iloc),ilon(iloc));
                        terr_level=terr_level(time);
                        ydat(i).y = [terr_level+2 ydat(i).y]; %add air temp at 2 m
                    end
                    
                    xlims=1;
                    xlimits=[-15 6];

                case 'vapour'
                    figname=['Vapour profile at ' tstr ' for ' filestr];
                    xlab='Vapour mixing ratio (g kg^{-1})';
                    
                    if is_met_em(1)
                        rh = nc{'RH'}(1,:,ilat(iloc),ilon(iloc));
                        T = nc{'TT'}(1,:,ilat(iloc),ilon(iloc));
                        P = nc{'PRES'}(1,:,ilat(iloc),ilon(iloc));
                        qsat = satvappress(T,'goff','liq',P,1)/f;
                        xdat(i).x = 1000 * rh/100 .* qsat;
                    else
                        xdat(i).x = 1000*nc{'QVAPOR'}(time,:,ilat(iloc),ilon(iloc));
                    end
                    
                 case 'ice'

                    xlab='Ice number concentration (L^{-1})';
%                    xlab='Snow number concentration (L^{-1})';
%                    xlab='Graupel number concentration (L^{-1})';
%                    xlab='Rain number concentration (L^{-1})';                    
%                    xlab='Cloud mixing ratio (g kg^{-1})';
%                    xlab='Ice mixing ratio (g kg^{-1})';
%                    xlab='Snow mixing ratio (g kg^{-1})';                    
%                    xlab='Graupel mixing ratio (g kg^{-1})'; 
%                    xlab='Total condensate mixing ratio (g kg^{-1})'; 
%                    xlab='Total number concentration (L^{-1})'; 
%                    xlab='Water supersaturation (%)'; 
%                    xlab='Ice supersaturation (%)';                     
                    figname=[xlab '  C ' tstr ' for ' filestr];
                                       
                    if is_met_em(1)
                        rh = nc{'RH'}(1,:,ilat(iloc),ilon(iloc));
                        T = nc{'TT'}(1,:,ilat(iloc),ilon(iloc));
                        P = nc{'PRES'}(1,:,ilat(iloc),ilon(iloc));
                        qsat = satvappress(T,'goff','liq',P,1)/f;
                        xdat(i).x = 1000 * rh/100 .* qsat;
                    else
                        
                            T = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc)) + 273.15;
                            P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc)) *100;
                            rho=density(P,T);
                            
                            %numbers from WRF are in #/kg so multiply by the density to get #/m3 and then divide by 1000 to get #/L
                            
                        switch xlab
                            case 'Ice number concentration (L^{-1})'                        
                                xdat(i).x = nc{'QNICE'}(time,:,ilat(iloc),ilon(iloc)).*rho/1000;
                            case 'Snow number concentration (L^{-1})'    
                                xdat(i).x = nc{'QNSNOW'}(time,:,ilat(iloc),ilon(iloc)).*rho/1000;   
                            case 'Graupel number concentration (L^{-1})'    
                                xdat(i).x = nc{'QNGRAUPEL'}(time,:,ilat(iloc),ilon(iloc)).*rho/1000; 
                            case 'Rain number concentration (L^{-1})'
                                xdat(i).x = nc{'QNRAIN'}(time,:,ilat(iloc),ilon(iloc)).*rho/1000; 
                            case 'Ice mixing ratio (g kg^{-1})'
                                xdat(i).x = 1000*nc{'QICE'}(time,:,ilat(iloc),ilon(iloc)); 
                            case 'Snow mixing ratio (g kg^{-1})'    
                                xdat(i).x = 1000*nc{'QSNOW'}(time,:,ilat(iloc),ilon(iloc));   
                            case 'Graupel mixing ratio (g kg^{-1})'                                   
                                xdat(i).x = 1000*nc{'QGRAUP'}(time,:,ilat(iloc),ilon(iloc));
                            case 'Cloud mixing ratio (g kg^{-1})'    
                                xdat(i).x = 1000*nc{'QCLOUD'}(time,:,ilat(iloc),ilon(iloc));  
                            case 'Total condensate mixing ratio (g kg^{-1})'
                                xdat(i).x = 1000*( nc{'QICE'}(time,:,ilat(iloc),ilon(iloc))+nc{'QSNOW'}(time,:,ilat(iloc),ilon(iloc))...
                                    +nc{'QGRAUP'}(time,:,ilat(iloc),ilon(iloc))+nc{'QCLOUD'}(time,:,ilat(iloc),ilon(iloc))...
                                    +nc{'QRAIN'}(time,:,ilat(iloc),ilon(iloc)) );
                            case 'Total number concentration (L^{-1})'                                    
                                xdat(i).x = ( nc{'QNICE'}(time,:,ilat(iloc),ilon(iloc))+nc{'QNSNOW'}(time,:,ilat(iloc),ilon(iloc))...
                                    +nc{'QNGRAUPEL'}(time,:,ilat(iloc),ilon(iloc))+nc{'QNRAIN'}(time,:,ilat(iloc),ilon(iloc)) ).*rho/1000;
                            case 'Water supersaturation (%)'
                                qv=nc{'QVAPOR'}(time,:,ilat(iloc),ilon(iloc));
                                qvs=satvappress(T,'goff','liq',P,1)/f;
                                xdat(i).x=100*(qv./qvs-1);
                            case 'Ice supersaturation (%)'
                                qv=nc{'QVAPOR'}(time,:,ilat(iloc),ilon(iloc));
                                qvs=satvappress(T,'goff','ice',P,1)/f;
                                xdat(i).x=100*(qv./qvs-1);                                
                                
                        end





                    end   
                    
                    xlims=0;
                    xlimits=[-20 1];
                    
                 case 'RH'
                    figname=['RH profile at ' tstr ' for ' filestr];
                    xlab='Relative humidity (%)';
                    
                    if is_met_em(1)
                        xdat(i).x = nc{'RH'}(1,:,ilat(iloc),ilon(iloc));
                    else                        
                        qv = nc{'QVAPOR'}(time,:,ilat(iloc),ilon(iloc));
                        T = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc)) + 273.15;
                        P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc)) *100;
                        qsat = satvappress(T,'goff','liq',P,1)/f;
                        xdat(i).x = qv./qsat *100;
                    end   

                case 'wind speed'
                     
                    if is_met_em(ifile_wrf)                        
                        u=0.5*(nca(ifile_wrf).nc{'UU'}(1,:,ilat(iloc),ilon(iloc))+nca(ifile_wrf).nc{'UU'}(1,:,ilat(iloc),ilon(iloc)+1));
                        v=0.5*(nca(ifile_wrf).nc{'VV'}(1,:,ilat(iloc),ilon(iloc))+nca(ifile_wrf).nc{'VV'}(1,:,ilat(iloc)+1,ilon(iloc)+1));                        
%                        v=nca(ifile_wrf).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else
                        u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                        v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));
                    end

                    xdat(i).x= sqrt( u.^2 + v.^2 );

                    figname=['Wind speed profile at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Wind speed profiles'];
                    end
                    xlab='Wind speed (m s^{-1})';
                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end
                    
                case 'wind speed component'                   
                   
                   xlims=0;
                   xlimits=[0 2.5];

                   
                    if is_met_em(1)
                        u=nca(i-i_previous).nc{'UU'}(1,:,ilat(iloc),ilon(iloc));
                        v=nca(i-i_previous).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else
                        if i_multi_wrf==1
                            dire2 = [dire(iloc).dir rundir(iloc).dir];
                            cd(dire2);
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));
                        else
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));

                        end
                    end

                    sp = sqrt( u.^2 + v.^2 );
                    
                    
            %%%%%%%%%%%% get wind dir so can calculate easterly component
                    jnorth = ilat(iloc) + 10;
                    lons_north = lon2d.var(jnorth,:);
                    [temp inorth] = min( abs(lons_north - lon2d.var(ilat(iloc),ilon(iloc)) ) );
                    
                    %angle of the local north line relative to the grid
                    thetaN = atan ( (inorth - ilon(iloc)) / (jnorth - ilat(iloc)) ); 
                    
                    clear dir
                    for iuv=1:length(u)

                        theta2 = 180/pi * atan ( u(iuv) ./ v(iuv) );

                        if u(iuv)==0 & v(iuv)==0
                            dir(iuv) = 0;
                        elseif u(iuv)>=0 & v(iuv)>=0
                            dir(iuv) = theta2;
                        elseif u(iuv)>0 & v(iuv)<0  %theta2 is negative
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<=0 & v(iuv)<=0
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<0 & v(iuv)>0
                            dir(iuv) = 360 + theta2; %theta2 is negative
                        end




                    end
                                       
                    dir = dir*pi/180 - thetaN; %subtract thetaN to make it the bearing from north

                    
                    %%%%% easterly component 
                    xdat(i).x = sp.*sin(dir); %get the wind direcion in the east component (as is approx perpendicular to peninsula)                                                            


                    figname=['Westerly wind speed profile at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Westerly wind speed profiles'];
                    end
                    xlab='Westerly wind speed'; %dimensionless
                                                           
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end         
                    

                case 'wind dir'
                    xlab='Wind direction (degrees)';
                    figname=['Wind dir profile at ' tstr ' for ' filestr];
                    
                    if is_met_em(ifile_wrf)
                        u=nca(ifile_wrf).nc{'UU'}(1,:,ilat(iloc),ilon(iloc));
                        v=nca(ifile_wrf).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else                       
                        u=WRFUserARW(nca(ifile_wrf).nc,'u',time,ilat(iloc),ilon(iloc));
                        v=WRFUserARW(nca(ifile_wrf).nc,'v',time,ilat(iloc),ilon(iloc));
                    end                                        
                    
                    xdat(i).x=wind_dir_compass_from_uv_wrf(u,v,lat2d,lon2d,ilat(iloc),ilon(iloc),DX,DY);
                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end
                    
                    xlims=1;
                    xlimits=[130 325];
                    
                case 'cloud'
                    cloud=nc{'QCLOUD'}(time,:,ilat(iloc),ilon(iloc));
                    cloud=cloud+nc{'QICE'}(time,:,ilat(iloc),ilon(iloc));
                    cloud=cloud+nc{'QSNOW'}(time,:,ilat(iloc),ilon(iloc));
                    cloud=cloud+nc{'QGRAUP'}(time,:,ilat(iloc),ilon(iloc));
                    xdat(i).x=1000*cloud;


                    figname=['Cloud mixing ratio profile at ' tstr ' for ' filestr];
                    xlab='Total condensed water mixing ratio (g kg^{-1})';
                    
               case 'Froude'                   
                   H=1.5e3; %set height of mountain
%                   H=ydat(i).y(1);  %or use the height of the topograpy at the location in question
                   
                   dH=500; %layer depth for the sub/super critical type of Froude number above the mountain
                            %Tom suggested at least 1000m
                   
                   xlims=0;
                   xlimits=[0 2.5];
                   
                   %%% for Froude number need the wind speed and direction (to calc the wind speed
                   %%% perpendicular to the mountain) and the potemp
                   
                    if is_met_em(1)
                        u=nca(i-i_previous).nc{'UU'}(1,:,ilat(iloc),ilon(iloc));
                        v=nca(i-i_previous).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else
                        if i_multi_wrf==1
                            dire2 = [dire(iloc).dir rundir(iloc).dir];
                            cd(dire2);
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));
                        else
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));

                        end
                    end

                    sp = sqrt( u.^2 + v.^2 );
                    
                    
            %%%%%%%%%%%% get wind dir so can calculate easterly component
                    jnorth = ilat(iloc) + 10;
                    lons_north = lon2d.var(jnorth,:);
                    [temp inorth] = min( abs(lons_north - lon2d.var(ilat(iloc),ilon(iloc)) ) );
                    
                    %angle of the local north line relative to the grid
                    thetaN = atan ( (inorth - ilon(iloc)) / (jnorth - ilat(iloc)) ); 
                    
                    clear dir
                    for iuv=1:length(u)

                        theta2 = 180/pi * atan ( u(iuv) ./ v(iuv) );

                        if u(iuv)==0 & v(iuv)==0
                            dir(iuv) = 0;
                        elseif u(iuv)>=0 & v(iuv)>=0
                            dir(iuv) = theta2;
                        elseif u(iuv)>0 & v(iuv)<0  %theta2 is negative
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<=0 & v(iuv)<=0
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<0 & v(iuv)>0
                            dir(iuv) = 360 + theta2; %theta2 is negative
                        end




                    end
                                       
                    dir = dir*pi/180 - thetaN; %subtract thetaN to make it the bearing from north
                    
                    i_wind_component=1;
                    if i_wind_component==1
                        %%%%% component in THI direction component
                        THI=70*pi/180; %e.g. 45 = southwesterly
                        spE = sp.*cos(dir-THI); %get the wind direcion in the THI component 
                        info = 'using wind component';
                    else
                        spE = sp; %OR ignore direction and just use the magnitude
                        info='';
                    end
                    
                    %%%% potemp
                    if is_met_em(1)
%                        pot = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                    else        
                        pot = nc{'T'}(time,:,ilat(iloc),ilon(iloc)) + 300;                        
                    end
                    
       %%%%%%%%calculate Froude = 1/h_hat = U / (H*sqrt(g/pot * dpot/dz) )
%                    xdat(i).x = spE(2:end)./ (H.* sqrt(9.81./pot(2:end) .*(diff(pot)./diff(ydat(i).y)) ) );

                    Fr_type='below';  %using (H-z) but using the local N value
                    Fr_type='below_mean';  %using (H-z) and the average N and U value for the heights from z to H                   
%                    Fr_type='below_layers'; 
%                    Fr_type='one_layer';                     
%                    Fr_type='sub/super';
%                    Fr_type='sub/super one layer';                    
%                    Fr_type='sub/super Holton';
                    switch Fr_type
                        case 'below'
                            xdat(i).x = spE(2:end)./ ((H-ydat(i).y(2:end)).* sqrt(9.81./pot(2:end) .*(diff(pot)./diff(ydat(i).y)) ) );
                            if i==1
                                H_froude=ydat(1).y;
                            end
                            ydat(i).y = ydat(i).y(2:end);
                            % Froude of 0.5 corresponds to h_hat (effective barrier height) of 2
                            % so Fr of less than 0.5 suggests that flow will be blocked (van Lipzig paper, 2008)

                            ibel_0 = find(xdat(i).x<0);
                            xdat(i).x(ibel_0)=[];
                            ydat(i).y(ibel_0)=[];
                            
                         case 'below_mean'
                            iH = findheight(ydat(i).y,H) ;
                            for ih=2:iH
                                U = mean(spE(ih:iH));
                                U = spE(iH);
                                xdat(i).x(ih) = U./ (  (H-ydat(i).y(ih)).* sqrt( 9.81./mean(pot(ih:iH)) .*(diff(pot([ih iH]))./diff(ydat(i).y([ih iH]))) )  );
                            end

                            if i==1
                                H_froude=ydat(1).y;
                            end
                            ydat(i).y = ydat(i).y(2:iH);                            

                            ibel_0 = find(xdat(i).x<0);
                            xdat(i).x(ibel_0)=[];
                            ydat(i).y(ibel_0)=[];   
                            
                        case 'one_layer'                            
                                iH = findheight(ydat(i).y,H) ;                                                        
                                U = spE(iH);
%                                pot_layer = mean( pot(1:iH) );   
                                pot_layer =pot(iH);                                   
                                dpot_dz = (pot(iH) - pot(1))  /(ydat(i).y(iH) - ydat(i).y(1));
                                
                            xdat(i).x = U/ ( H* sqrt(9.81./pot_layer*dpot_dz) );                                                           
%                            xdat(i).x = 2*pi*60e3*U/ ( 60e3* sqrt(9.81./pot_layer*dpot_dz) );                                                           
                            ydat(i).y = H;

                            
                        case 'below_layers'
                            %doing dH m layers for this starting at lowest level                            
                            dH=600;
                            layers = [ydat(i).y(1) ydat(i).y(1)+dH:H-dH H];
                            [ilayers,I] = unique( findheight(ydat(i).y,layers) );                                                        
                            layers=layers(I);
                            
                            clear U pot_layer z_layer
                            for ifr=2:length(ilayers)
                                U(ifr-1) = mean(  spE( ilayers(ifr-1) : ilayers(ifr) )  );
                                pot_layer(ifr-1) = mean(  pot( ilayers(ifr-1) : ilayers(ifr) )  );
                                z_layer(ifr-1) = (ydat(i).y(ilayers(ifr-1)) + ydat(i).y(ilayers(ifr)) )/2; %centre of layer
                            end                            

                            
                            dpot_dz = diff(pot_layer)./diff(z_layer);
                            xdat(i).x = - U(2:end)./ ( (z_layer(2:end)-H).* sqrt(9.81./pot_layer(2:end) .*dpot_dz) );                                                           
                            ydat(i).y = z_layer(2:end);

                        case 'sub/super'
                            %need 1 km layers for this starting at mountain top
                            %for Fr<1 have subcritical flow where modes may propagate against the flow
                            %for Fr>1 flow is supercritical and no modes may propagate upstream (see Orr,2008)
                            layers2 = [H:dH:ydat(i).y(end)];
                            ilayers = [findheight(ydat(i).y,layers)];
                            layers = ydat(i).y(ilayers);
                            
                            for ifr=2:length(ilayers)
                                U = mean(  spE( ilayers(ifr-1) : ilayers(ifr) )  );
                                pot_layer = mean(  pot( ilayers(ifr-1) : ilayers(ifr) )  );                                
%                                dpot_dz = (pot(ilayers(ifr)) - pot(ilayers(ifr-1))  ) ./ (layers(ifr) - layers(ifr-1));
                                dpot_dz = ( pot(ilayers(ifr)) - pot(ilayers(ifr-1)) ) ./ (layers(ifr) - layers(ifr-1));
                                xdat(i).x(ifr-1) = U./ ( (layers(ifr)-H).* sqrt(9.81./pot_layer .*dpot_dz) );                               
                            end                            
                            % super/sub critical test for above the mountain
                             ydat(i).y = layers(2:end);
                             
                          case 'sub/super one layer'
                            %need 1 km layers for this starting at mountain top
                            %for Fr<1 have subcritical flow where modes may propagate against the flow
                            %for Fr>1 flow is supercritical and no modes may propagate upstream (see Orr,2008)
                            iH=findheight_nearest(ydat(i).y,H)-1;
                            layer_top = ydat(i).y(iH)+dH; %layer top is just above mountain plus dH
                            ilayer = [findheight_nearest(ydat(i).y,layer_top)];
                            if  ydat(i).y(ilayer)-ydat(i).y(iH) < dH 
                                ilayer=ilayer+1;
                            end
                            
                            %get pressure in Pa
                            if is_met_em(1)
                                P = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc));
                            else
                                P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc))*100;                                
                            end 
                            %get temperature in K
                            if is_met_em(1)
                                T = nca(i-i_previous).nc{'TT'}(1,:,ilat(iloc),ilon(iloc));                                
                            else
                                T = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc))+273.15;                                
                            end
                            
                            rho = density(P,T);
                                                        
                                U = mean(  spE( iH:ilayer ) );
%                                pot_layer = mean(  pot( iH:ilayer )  );                                
                                pot_layer = pot(ilayer);    
 %                               pot_layer = rho(ilayer);           
                                
                                layer_depth = ydat(i).y(ilayer)-ydat(i).y(iH);
                                
                                dpot_dz = (pot(ilayer) - pot(iH)  ) / layer_depth;                                
%                                dpot_dz = -(rho(ilayer) - rho(iH)  ) / layer_depth;                                
                                
                                N = sqrt(9.81/pot_layer * dpot_dz);

                                             
                            % super/sub critical test for above the mountain
                             ydat(i).y = ydat(i).y(ilayer);   
                             xdat(i).x = U/ ( (ydat(i).y-H) * N );                               
                             
                         case 'sub/super Holton';    
                             %need 1 km layers for this starting at mountain top
                            %for Fr<1 have subcritical flow where modes may propagate against the flow
                            %for Fr>1 flow is supercritical and no modes may propagate upstream (see Orr,2008)
                            
                            if dH==0 %use all layers from WRF
                                layers = [H ydat(i).y];
                                ilayers = [1:length(ilayers)];
                            else %use layers of depth dH
                                layers = [H:dH:ydat(i).y(end)];
                                ilayers = findheight(ydat(i).y,layers);
                            
                            end
                            
                            %get pressure in Pa
                            if is_met_em(1)
                                P = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc));
                            else
                                P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc))*100;                                
                            end 
                            %get temperature in K
                            if is_met_em(1)
                                T = nca(i-i_previous).nc{'TT'}(1,:,ilat(iloc),ilon(iloc));                                
                            else
                                T = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc))+273.15;                                
                            end
                            
                            rho = density(P,T);
                            
                            for ifr=2:length(ilayers)-1
                                U = mean(  spE( ilayers(ifr) : ilayers(ifr+1) )  );
                                rho_layer = mean(  rho( ilayers(ifr) : ilayers(ifr+1) ) );
                                drho = mean(  rho( ilayers(ifr-1) : ilayers(ifr) )  ) - rho_layer;   %%?? is this the right drho??                            
                                xdat(i).x(ifr-1) = U.^2 ./ ( 9.81*(layers(ifr)-H) * drho/rho_layer ); %Fr=g*H*drho/rho1 from Holton                               
                                %think H is the (mean) height above the mountain of the layer
                            end                            
                            % super/sub critical test for above the mountain
                             ydat(i).y = layers(2:end-1);
                    end

                    figname=['Froude number ' info ' profile at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Froude number ' info ' profiles'];
                    end
                    xlab='Froude number'; %dimensionless
                    
                    

                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end     
                    
            case 'density gradient'                                     
                
                xlims=0;
                xlimits=[0 2.5];

                %get pressure in Pa
                if is_met_em(1)
                    P = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc));
                else
                    P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc))*100;
                end
                %get temperature in K
                if is_met_em(1)
                    T = nca(i-i_previous).nc{'TT'}(1,:,ilat(iloc),ilon(iloc));
                else
                    T = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc))+273.15;
                end

                %density gradient
                xdat(i).x = diff(density(P,T))./diff(ydat(i).y);
                ydat(i).y = ydat(i).y(2:end);
                
                %density
%                xdat(i).x = density(P,T);




                figname=['Density gradient profile at ' tstr ' for ' filestr];
                if i_paper_labels==1
                    figname=['Density gradient profiles'];
                end
                xlab='Density gradient (kg m^{-4})'; 


                if incep==0 & is_met_em(1)==1
                    xdat(i).x = xdat(i).x(2:end);
                end
                    
            case 'dpot/dz'
                   
                    xlims=0;
                    xlimits=1000*[0 0.025];
                    
                    %%%% potemp
                    if is_met_em(1)
%                        pot = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                    else        
                        pot = nc{'T'}(time,:,ilat(iloc),ilon(iloc)) + 300;                        
                    end
                    
                    
                    xdat(i).x = 1000*(diff(pot)./diff(ydat(i).y));
                    ydat(i).y = ydat(i).y(2:end);
                    

                    

                    figname=['Potential temperature gradient profile at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Potential temperature gradient profiles'];
                    end
                    xlab='Potential temperature gradient (K km^{-1})'; %
                    
                    

                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end    
                    
            case 'westerly wind'                  
                   
                    if is_met_em(1)
                        u=nca(i-i_previous).nc{'UU'}(1,:,ilat(iloc),ilon(iloc));
                        v=nca(i-i_previous).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else
                        if i_multi_wrf==1
                            dire2 = [dire(iloc).dir rundir(iloc).dir];
                            cd(dire2);
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));
                        else
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));

                        end
                    end

                    sp = sqrt( u.^2 + v.^2 );
                    
                    
            %%%%%%%%%%%% get wind dir so can calculate easterly component
                    jnorth = ilat(iloc) + 10;
                    lons_north = lon2d.var(jnorth,:);
                    [temp inorth] = min( abs(lons_north - lon2d.var(ilat(iloc),ilon(iloc)) ) );
                    
                    %angle of the local north line relative to the grid
                    thetaN = atan ( (inorth - ilon(iloc)) / (jnorth - ilat(iloc)) ); 
                    
                    clear dir
                    for iuv=1:length(u)

                        theta2 = 180/pi * atan ( u(iuv) ./ v(iuv) );

                        if u(iuv)==0 & v(iuv)==0
                            dir(iuv) = 0;
                        elseif u(iuv)>=0 & v(iuv)>=0
                            dir(iuv) = theta2;
                        elseif u(iuv)>0 & v(iuv)<0  %theta2 is negative
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<=0 & v(iuv)<=0
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<0 & v(iuv)>0
                            dir(iuv) = 360 + theta2; %theta2 is negative
                        end




                    end
                                       
                    dir = dir*pi/180 - thetaN; %subtract thetaN to make it the bearing from north

                    
                    %%%%% easterly component 
                    xdat(i).x = sp.*sin(dir); %get the wind direcion in the east component (as is approx perpendicular to peninsula)                                                            
                    
                            
            
                                        

                    figname=['Westerly wind component profile at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Westerly wind component profiles'];
                    end
                    xlab='Westerly wind component (m s^{-1})'; %
                    
                    

                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end   
                    
                case 'stratification integral'
                   
                    xlims=0;
                    xlimits=[0 0.025];
                    
                %get pressure in Pa
                if is_met_em(1)
                    P = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc));
                else
                    P = WRFUserARW(nc,'p',time,ilat(iloc),ilon(iloc))*100;
                end
                %get temperature in K
                if is_met_em(1)
                    T = nca(i-i_previous).nc{'TT'}(1,:,ilat(iloc),ilon(iloc));
                else
                    T = WRFUserARW(nc,'tc',time,ilat(iloc),ilon(iloc))+273.15;
                end
                
                rho=density(P,T);
                

               if is_met_em(1)
                        u=nca(i-i_previous).nc{'UU'}(1,:,ilat(iloc),ilon(iloc));
                        v=nca(i-i_previous).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else
                        if i_multi_wrf==1
                            dire2 = [dire(iloc).dir rundir(iloc).dir];
                            cd(dire2);
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));
                        else
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));

                        end
                    end

                    sp = sqrt( u.^2 + v.^2 );
                    
                    
            %%%%%%%%%%%% get wind dir so can calculate easterly component
                    jnorth = ilat(iloc) + 10;
                    lons_north = lon2d.var(jnorth,:);
                    [temp inorth] = min( abs(lons_north - lon2d.var(ilat(iloc),ilon(iloc)) ) );
                    
                    %angle of the local north line relative to the grid
                    thetaN = atan ( (inorth - ilon(iloc)) / (jnorth - ilat(iloc)) ); 
                    
                    clear dir
                    for iuv=1:length(u)

                        theta2 = 180/pi * atan ( u(iuv) ./ v(iuv) );

                        if u(iuv)==0 & v(iuv)==0
                            dir(iuv) = 0;
                        elseif u(iuv)>=0 & v(iuv)>=0
                            dir(iuv) = theta2;
                        elseif u(iuv)>0 & v(iuv)<0  %theta2 is negative
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<=0 & v(iuv)<=0
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<0 & v(iuv)>0
                            dir(iuv) = 360 + theta2; %theta2 is negative
                        end




                    end
                                       
                    dir = dir*pi/180 - thetaN; %subtract thetaN to make it the bearing from north

                    
                    %%%%% easterly component 
                   spE = sp.*sin(dir); %get the wind direcion in the east component (as is approx perpendicular to peninsula)
                    
                    iH=findheight(ydat(i).y,H);
                    rho2=mean(rho(1:iH));
                    rho2=rho(iH);
                    U = spE(iH);                    
                    
                    for ih=2:iH
                        xdat(i).x(ih-1)=9.81*sum( (H-ydat(i).y(ih:iH)).*-diff(rho(ih-1:iH)) ) - 0.5*rho2*spE(ih)^2;
%                        xdat(i).x(ih-1)=9.81*sum( (H-ydat(i).y(ih:iH)).*-diff(rho(ih-1:iH)) ) - 0.5*rho(1)*10^2;
                    end
                    
                    ydat(i).y=ydat(i).y(2:iH);

                    

                    figname=['Integral profile at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Integral profiles'];
                    end
                    xlab='Integral'; %dimensionless
                    
                    

                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end    
                    
                    
            case 'Scorer parameter'  
                
                 if is_met_em(1)
%                        pot = nc{'PRES'}(time,:,ilat(iloc),ilon(iloc))/100;
                else        
                        pot = nc{'T'}(time,:,ilat(iloc),ilon(iloc)) + 300;                        
                 end
                    
                   
                    if is_met_em(1)
                        u=nca(i-i_previous).nc{'UU'}(1,:,ilat(iloc),ilon(iloc));
                        v=nca(i-i_previous).nc{'VV'}(1,:,ilat(iloc),ilon(iloc));
                    else
                        if i_multi_wrf==1
                            dire2 = [dire(iloc).dir rundir(iloc).dir];
                            cd(dire2);
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));
                        else
                            u=WRFUserARW(nc,'u',time,ilat(iloc),ilon(iloc));
                            v=WRFUserARW(nc,'v',time,ilat(iloc),ilon(iloc));

                        end
                    end

                    sp = sqrt( u.^2 + v.^2 );
                    
                    
            %%%%%%%%%%%% get wind dir so can calculate component
                    jnorth = ilat(iloc) + 10;
                    lons_north = lon2d.var(jnorth,:);
                    [temp inorth] = min( abs(lons_north - lon2d.var(ilat(iloc),ilon(iloc)) ) );
                    
                    %angle of the local north line relative to the grid
                    thetaN = atan ( (inorth - ilon(iloc)) / (jnorth - ilat(iloc)) ); 
                    
                    clear dir
                    for iuv=1:length(u)

                        theta2 = 180/pi * atan ( u(iuv) ./ v(iuv) );

                        if u(iuv)==0 & v(iuv)==0
                            dir(iuv) = 0;
                        elseif u(iuv)>=0 & v(iuv)>=0
                            dir(iuv) = theta2;
                        elseif u(iuv)>0 & v(iuv)<0  %theta2 is negative
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<=0 & v(iuv)<=0
                            dir(iuv) = 180 + theta2;
                        elseif u(iuv)<0 & v(iuv)>0
                            dir(iuv) = 360 + theta2; %theta2 is negative
                        end




                    end
                                       
                    dir = dir*pi/180 - thetaN; %subtract thetaN to make it the bearing from north

                    
                    %%%%% component in certain direction
                    
                    dir_comp=pi/2; %the direction of the component we want taken from north - so for the westerly component set = pi/2
%                    dir_comp=0; %for northerly set dir_comp=0
                    U = sp.*cos(dir_comp-dir); %get the wind direcion in the dir_comp component                                                                                
                    U=sp;
                    
                    
                    Z=ydat(i).y;
                    
                    %z_fine=[Z(1):10:Z(end)];
                    %U_fine=interp1(Z,U,z_fine);
                    %pot_fine=interp1(Z,pot,z_fine);
                    z_fine=Z;
                    U_fine=U;
                    pot_fine=pot;
                    
                    
                    N2 = 9.81 ./ pot_fine(2:end) .* diff(pot_fine)./diff(z_fine) ; %N squared 
                    dUdz = diff(U_fine)./diff(z_fine);
                    dU2dz2 = diff(dUdz)./diff(z_fine(2:end));
                    
                    scorer_term='both';                        
%                    scorer_term='second';
%                    scorer_term='first';
%                    scorer_term = 'wind_shear'
%                    scorer_term='gradient';   
%                    scorer_term='Richardson'; 
                    scorer_term='N'; 
%                    scorer_term='N/U'; 

                    switch scorer_term
                        case 'first'
%%%% just the first term                                        
                    xdat(i).x = N2(1:end)./U_fine(2:end).^2;
                    ydat(i).y = z_fine(2:end);
                    scorer_label='First term of Scorer parameter';
                    units='(m^{-2})';
                    
                        case 'second'
%%%% just the second term                    
                    xdat(i).x =  - dU2dz2./U_fine(2:end-1) ;                    
                    ydat(i).y = z_fine(2:end-1);
                    scorer_label='Second term of Scorer parameter';
                    units='(m^{-2})';
                    
                        case 'both'                    
%%%% both terms                    
                    xdat(i).x = N2(1:end-1)./U_fine(2:end-1).^2 - dU2dz2./U_fine(2:end-1) ;                    
                    ydat(i).y = z_fine(2:end-1);
                    scorer_label='Scorer parameter';
                    units='(m^{-2})';
                                        
                    case 'wind_shear'                    
%%%% both terms                    
                    xdat(i).x = dUdz;                    
                    ydat(i).y = z_fine(2:end);
                    scorer_label='Wind shear';
                    units='(s^{-1})';
                    
                    case 'gradient'                    
%%%% both terms                    
                     scorer = N2(1:end-1)./U_fine(2:end-1).^2 - dU2dz2./U_fine(2:end-1) ;        
                     xdat(i).x = diff(scorer) ./ diff(z_fine(2:end-1));
                    ydat(i).y = z_fine(3:end-1);
                    scorer_label='Scorer parameter';
                    units='(m^{-3})';
                    
                    case 'Richardson'                    
%%%% both terms                    

                    dUdz= diff(u)./diff(z_fine);
                    dVdz= diff(v)./diff(z_fine);
                    
                    xdat(i).x = N2./( (dUdz).^2 + (dVdz).^2);                       
                    ydat(i).y = z_fine(2:end);
                    scorer_label='Richardson number';
                    units=''; %no units
                    
                    xlims=1;
                    xlimits=[0 2];
                    
                    
                    case 'N'                                 
                  
                    xdat(i).x = sqrt(N2);
                    ydat(i).y = z_fine(2:end);
                    scorer_label='N';
                    units='s^{-1}'; %no units
                    
                    xlims=0;
                    xlimits=[0 2];
                    
                    case 'N/U'                                 
                  
                    xdat(i).x = sqrt(N2)./U_fine(2:end);
                    ydat(i).y = z_fine(2:end);
                    scorer_label='N/U';
                    units='m^{-1}'; %no units
                    
                    xlims=0;
                    xlimits=[0 2];
                    
                    end
                    
            
                                        

                    figname=[scorer_label ' at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=[scorer_label ' profiles'];
                    end
                    xlab=[scorer_label ' ' units]; %
                                                           
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end    
                    
                     
                    
            
                                        

                    figname=[scorer_label ' at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=[scorer_label ' profiles'];
                    end
                    xlab=[scorer_label ' ' units]; %
                                                           
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end    
                    
                    
                case 'ridge_height'
                   %%% run heat_fluxes_mean_along_latitude.m to get the max ridge height
                    xlims=1;
                    xlimits=[-69 -67];                    
                    
                    xdat(i).x = LAT_ridge;
                    ydat(i).y = peak_vs_lat;
                                       
                    figname=['Max ridge height at ' tstr ' for ' filestr];
                    if i_paper_labels==1
                        figname=['Max ridge height'];
                    end
                    xlab='Latitude'; %
                    
                    

                    
                    if incep==0 & is_met_em(1)==1
                        xdat(i).x = xdat(i).x(2:end);
                    end     
                    
                    no_sort=1;
                    
                case 'Houghton Smith formulae'
                   
                    xlims=0;
                    xlimits=1000*[0 0.025];
                                      
                    gd=1;
                    U=20;
                    N=0.02;

                    hhat=[0:0.01:1];

                    %continuous stratification case (Fig. 15b)
                    del_hat = -1/sqrt(2) * sqrt(hhat.^2 + hhat.*sqrt(hhat.^2+4));
                    H0_hat_strat=hhat - del_hat + acos(hhat./del_hat);
                    H0_crit=U/N*H0_hat_strat; %
                    F0_crit=1 ./ H0_hat_strat; %=U/NH=F0=1/H0_hat for Fig 15b


                    %single layer case (Fig. 15a)

                    H0_crit2 = [0:1:7000];  %N.B. - require very large H0 values to reach high h/H0 values (to approach the limit
                    %towards h/H0=1,F0=0
                    F0_crit2=U./sqrt(gd.*H0_crit2);
                    F0_crit3 = U/N./H0_crit2;
                    h_crit2 = H0_crit2 .* ( 1 + 0.5*F0_crit2.^2 - 1.5*F0_crit2.^(2/3) );
                    h_crit3 = H0_crit2 .* ( 1 + 0.5*F0_crit3.^2 - 1.5*F0_crit3.^(2/3) );
                    hhat_Houghton=h_crit3*N/U;
                    
                    plot_case='stratified';
                    plot_case='h/H0,F0 space';
                    plot_case='h vs H0';                    
                    
                    switch plot_case
                        case 'stratified'

                            xdat(1).x=hhat_Houghton;
                            ydat(1).y=F0_crit3; %using Smith formula for F0 but with F0=U/(N*H0) - acheived by approximating
                            %g' with N^2*H0 where H0=dz in N^2=g/theta * dtheta/dz
                            labs(1).l='Smith using N';

                            xdat(2).x=hhat;
                            ydat(2).y=F0_crit; %plot the original formulation for continuous stratification
                            % are different but.... if multiply F0 by a factor of 0.62...
                            labs(2).l='Original Smith';

                            xdat(3).x=hhat_Houghton;
                            ydat(3).y=F0_crit3*0.62; %they overlay each other almost exactly. Why 0.62??? - epsilon? =0.622
                            %is independant of N and U
                            labs(3).l='Using N and *0.62';
                            
                            xlab='F0=U/(N*H0)';
                            ylab='hN/U';


                        case 'h/H0,F0 space'
                            xdat(1).x=h_crit2./H0_crit2;
                            ydat(1).y=F0_crit2; %using Smith formula for F0 for an inversion F0=U/sqrt(g'H0)
                            labs(1).l='Original inversion case';
                            
                            %now give range of h' values and calculate H0 using (20). Note F0=1/H0' since H0' = H0*N/U
                            xdat(2).x=2*hhat./H0_hat_strat;
                            ydat(2).y=sqrt(2)*F0_crit; %plot the original formulation for continuous stratification with transformed variables
                            labs(2).l='Stratified formula with Smith&Sun transforms';
                            % i.e. using Heff instead of H0 and F0=U/(N*Heff)=sqrt(2)U/(N*H0)

                            %        plot(1/(0.62^2)*hhat./H0_hat_strat,1/0.62*F0_crit,'k--');

                            xdat(3).x=hhat./H0_hat_strat/0.63;
                            ydat(3).y=F0_crit/0.63;
                            labs(3).l='Stratified formula with 0.63 transforms';
                            
                            xdat(4).x=hhat./H0_hat_strat/0.63;
                            ydat(4).y=F0_crit/0.63;
                            labs(4).l='Stratified formula with 0.63,0.86 transforms';
                            
                            xdat(5).x=hhat./H0_hat_strat;
                            ydat(5).y=1./(sqrt(2)*sin(0.5*H0_hat_strat));
                            labs(5).l='Stratified formula using Durran F0';
                            
                            xdat(6).x=2*hhat./H0_hat_strat;
                            ydat(6).y=1./(sqrt(2)*sin(0.5*H0_hat_strat));
                            labs(6).l='Stratified formula using Durran F0 and Heff';
                            
                            
                            ylab='F0';
                            xlab='h/H0';
                            
                            xlims=1;
                            xlimits=[0 1];
                                                        
                            izlim=1;
                            zmin=0;
                            zmax=1;
                            
                        case 'h vs H0'
                            xdat(1).x=hhat;
                            ydat(1).y=H0_crit*N/U; 
                            labs(1).l='Stratified exact solution';
                            
                            %now calculate effective F0 and plug into eq (16)
                            Feff=1/0.63 * U/N./H0_crit2;
                            h_crit2 = H0_crit2 .* ( 1 + 0.5*Feff.^2 - 1.5*Feff.^(2/3) );
                            
                            xdat(2).x=h_crit2*N/U;
                            ydat(2).y=H0_crit2*N/U; %plot the original formulation for continuous stratification with transformed variables
                            labs(2).l='0.63 transform into inversion formula';
                            % i.e. using Heff instead of H0 and F0=U/(N*Heff)=sqrt(2)U/(N*H0)

                            %        plot(1/(0.62^2)*hhat./H0_hat_strat,1/0.62*F0_crit,'k--');

%                            xdat(3).x=hhat./H0_hat_strat/0.63;
%                            ydat(3).y=F0_crit/0.63;
%                            labs(3).l='Stratified formula with 0.63 transforms';
                            
                            ylab='Hhat';
                            xlab='hhat';
                            
                            xlims=1;
                            xlimits=[0 1];
                                                        
                            izlim=1;
                            zmin=0;
                            zmax=5;

                    end
                    nmark=0;
                                      

                    figname=['Houghton plots'];
                    if i_paper_labels==1
                        figname=['Houghton/Smith curves'];
                    end
                    
                    
                    
                    
                    ascent_str='';
  
                    
                    


            end  
            
        
            
            if no_sort==0;
                [ydat(i).y I]=sort(ydat(i).y);
                xdat(i).x = xdat(i).x(I);
            end
            
            if ydat(i).y(1)<0 & is_met_em(1)==1 & incep==1
                ydat(i).y=ydat(i).y(2:end);
                xdat(i).x=xdat(i).x(2:end);
            end

         
        
            abc=['ABCDEFGHIJKLM'];

            if length(strfind(ascent_str,'1'))>0
                if i_label_time==1
                    if i_override_loc_lab==1
                        labs(i).l=[location_lab(i-nplots_previous).l ' ' day ' ' month_text ' ' hour ':' mins];  %simple label more suitable for papers
                    else
                        location_lab(i-nplots_previous).l = abc(i-nplots_previous);
                        labs(i).l=[location_lab(i-nplots_previous).l ' ' day ' ' month_text ' ' hour ':' mins];  %simple label more suitable for papers
                    end
                else
                    if i_override_loc_lab==1
                        labs(i).l=[location_lab(i-nplots_previous).l];  %simple label more suitable for papers
                    else
                        location_lab(i-nplots_previous).l = abc(i-nplots_previous);
                        labs(i).l=['W' location_lab(i-nplots_previous).l ' ' num2str(lat2d.var(ilat(iloc),ilon(iloc)),3) ' , ' num2str(lon2d.var(ilat(iloc),ilon(iloc)),3) ];
                    end
                end
            elseif length(strfind(ascent_str,'0'))>0 | length(strfind(ascent_str,'3'))>0 | length(strfind(ascent_str,'4') )>0 | length(strfind(ascent_str,'5') )>0
                if i_label_time==1
                    if i_override_loc_lab==1
                        labs(i).l=[location_lab(i-nplots_previous).l ' ' day ' ' month_text ' ' hour ':' mins];
                    else
                        location_lab(i-nplots_previous).l = abc(i-nplots_previous);
                        labs(i).l=[location_lab(i-nplots_previous).l ' ' day ' ' month_text ' ' hour ':' mins];
                    end
                else
                    if i_override_loc_lab==1
                        labs(i).l=[location_lab(i-nplots_previous).l ' ' num2str(lat2d.var(ilat(iloc),ilon(iloc)),3) ' , ' num2str(lon2d.var(ilat(iloc),ilon(iloc)),3)];  %simple label more suitable for papers
                    else
                        location_lab(i-nplots_previous).l = abc(i-nplots_previous);
                        labs(i).l=['' location_lab(i-nplots_previous).l ' ' num2str(lat2d.var(ilat(iloc),ilon(iloc)),3) ' , ' num2str(lon2d.var(ilat(iloc),ilon(iloc)),3) ];
                    end
                end
            end
            
       
        end 
       
     end
%        labs(i).l=abc(i);
    end
    
    
    
    if roth_comp == 1
        
%fields are
    % 1) YEAR 
    % 2) MONTH 
    % 3) DAY 
    % 4) HOUR 
    % 5) PRESSURE 
    % 6) HEIGHT 
    % 7) TEMPERATURE 
    % 8) DEWPOINT 
    % 9) WIND_DIRECTION 
    %10) WIND_SPEED
    
    
    inds_11 = find(dat_roth(4,:)==11);
    inds_12 = find(dat_roth(4,:)==12);
    labs(i+1).l = 'Rothera sounding 05 Jan 12:00';
    labs(i+2).l = 'Rothera sounding 06 Jan 11:00';


        switch var
            case 'pressure diff'
                xlab='Pressure difference, WRF minus aircraft (hPa)';

                wrf_int = interp1(ydat(i).y,xdat(1).x,dat(ds_inds,11),[],'extrap');
                xdat(i).x = wrf_int - dat(ds_inds,4);
                ydat(i).y = dat(ds_inds,11);
                

                xlims=0;
                xlimits=[965 991];
                %		xlimits=[800 995];

                izlim=1;
                zmin=0;
                zmax=3000;

                %		logflag=1;
                if iwrf_profs==0
                    figname=['Pressure profile '];
                end
                
             case 'pressure'
                xlab='Pressure (mb)';

                xdat(i+1).x = dat_roth(5,inds_11); 
                ydat(i+1).y = dat_roth(6,inds_11);
                

                xlims=0;
                xlimits=[965 991];
                %		xlimits=[800 995];

                izlim=1;
                zmin=0;
                zmax=3000;

                %		logflag=1;
                if iwrf_profs==0
                    figname=['Pressure profile '];
                end   
                
            case 'temperature'
                xlab='Temperature (^{o}C)';                                
                xdat(i+1).x = dat_roth(7,inds_12); 
                ydat(i+1).y = dat_roth(6,inds_12);
                
                xdat(i+2).x = dat_roth(7,inds_11); 
                ydat(i+2).y = dat_roth(6,inds_11);

                
                izlim=1;
                zmin=0;
                zmax=3000;
                
                xlims=1;
                xlimits=[-14 2];
                xlimits=[-15 5];
                
                if iwrf_profs==0
                    figname=['Temperature profile '];
                end
                
            case 'vapour'
                xlab='Vapour mixing ratio (g kg^{-1})';
                
                Tdew = dat_roth(8,inds_12);
                xdat(i+1).x = 1000*vap_from_Tdew(Tdew+273.15,100*dat_roth(5,inds_12));
                ydat(i+1).y = dat_roth(6,inds_12);
                
                Tdew = dat_roth(8,inds_11);
                xdat(i+2).x = 1000*vap_from_Tdew(Tdew+273.15,100*dat_roth(5,inds_11));
                ydat(i+2).y = dat_roth(6,inds_11);

                izlim=1;
                zmin=0;
                zmax=3000;
                
                xlims=1;
                xlimits=[0 20];            
                
                izlim=1;
                zmin=0;
                zmax=3000;
                
                xlims=1;
                xlimits=[0 5];
                
                if iwrf_profs==0
                    figname=['Vapour profile '];
                end
                
            case 'wind speed'
                xlab='Wind speed (m s^{-1})';

                xdat(i+1).x = dat_roth(10,inds_12); 
                ydat(i+1).y = dat_roth(6,inds_12);
                
                xdat(i+2).x = dat_roth(10,inds_11); 
                ydat(i+2).y = dat_roth(6,inds_11);

                izlim=1;
                zmin=0;
                zmax=3000;
                
                xlims=1;
                xlimits=[0 20];
                
                if iwrf_profs==0
                    figname=['Wind speed profile '];
                end
                
            case 'wind dir'
                xlab='Wind direction (degrees)';
                xdat(i+1).x = dat_roth(9,inds_12); 
                ydat(i+1).y = dat_roth(6,inds_12);
                
                xdat(i+2).x = dat_roth(9,inds_11); 
                ydat(i+2).y = dat_roth(6,inds_11);

                izlim=1;
                zmin=0;
                zmax=3000;
                
                xlims=0;
                xlimits=[0 20];
        end
    
        
    i=i+2;
        
    end    

    





    %	xdat(i+1).x = dat2(5,1:12);  %data in hPa
    %	ydat(i+1).y = dat2(6,1:12); %height
    %	labs(i+1).l='Rothera station data';






    
    if is_met_em(1) & i_paper_labels==0
        savename = ['analysis ' figname];
        titlenam = [figname ' (analysis)'];
    else
        savename=figname;
        titlenam = figname;        
    end
    
    if no_title==1
        titlenam='';
    end
    
%    savename = [savename ' ' as_ds_str];
    
    
    



case 77
        %run av_updraught first
    
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
    
%     qstr=1; %vapour
     qstr=2; %liq
%     qstr=3; %rain
%     qstr=4; %snow
%     qstr=5; %graupel
%     qstr=6; %ice
%     qstr=7; %ice NC
%     qstr=8; %graupel NC
%     qstr=9; %snow NC
%     qstr=10; %tracer
%     qstr=11; %graupel density

if qstr<7
    units=' (g kg^{-1})';
    units=' (g m^{-3})';

else
    units=' (kg^{-1})';
end

    itemp=1; %flag to say that want to use the temperature as the vertical coordinate
            
    xlab=['Max Q0' num2str(qstr) units];
	ylab='Height (km)';
    
    if itemp==1;	
        ylab='Temperature (^{o}C)';
        iydir=-1; %reverse direction of y axis
        izlim=1;
        zmin=-45; 
        zmax=15;
    end
    
%    figname=['Max'];
    figname=xlab;
    savename=figname;
    titlenam=savename;
    
    logflag=0;
 
    idats=[1 2];
	for iidat=1:length(idats)
       idat=idats(iidat); 
       
       if qstr<7; 
           factor=1e3.*GridDan(idat).RHO; 
       else
           factor=1;
       end %if want to convert g/m3
        
        [Y,I]=max(ThreeDDan(idat).Q(2:end,2:end,:,qstr),[],1); %find max and index of max for 1st dimension
        I=squeeze(I);  %size=e.g. [97 150]
        [Y2,I2]=max(Y,[],2);  %find max and index of these maxes (2nd dimension of ThreeD)
        I2=squeeze(I2);  %size= [150 1]
                        
        xdat(iidat).x = factor.*squeeze(Y2); %max values stored in Y2      
        ydat(iidat).y = (GridDan(idat).Z + add_ground_height)/1e3 ;     
        
        if itemp==1
               
                clear P_cloud th_cloud T_cloud
                for izqmax=1:length(Y2)
                    th_cloud(izqmax) = ThreeDDan(idat).TH1( I(I2(izqmax),izqmax) , I2(izqmax), izqmax ) ;                    
                    [T_cloud(izqmax), P_cloud(izqmax)] = temp_from_press_and_th( GridDan(idat), th_cloud(izqmax) , ...
                        ThreeDDan(idat).P( I(I2(izqmax),izqmax) , I2(izqmax), izqmax )  , izqmax);
                    %using the actual 3D temperature at the grid point of the max value
                    %I contains the index of the max in 1st dim and I2 for 2nd one
                    
               % T=tempLES(GridDan(idat))-273.15;
                end
                ydat(iidat).y = T_cloud-273.15;
        end            
        
        labs(iidat).l = runName(idat).nam;        	
	end		
    
         f=1e6*28.97/18;
    
    
        T=tempLES(GridDan(idat))-273.15;
        
        iz_th=2;
%        th_base = GridDan(1).THREF(iz_th) + GridDan(1).OLTHBAR(iz_th);
        th_base = th_cloud(iz_th) + GridDan(1).THREF(iz_th);
        
        
        pdat=[GridDan(1).PREFN(2):-10:200]; %set up pressure grid        
        Tdry=th_base./(1e5./pdat).^0.286; %dry adiabat from th_base
   
		
        

       
  icb_temp=1;     
     
     if icb_temp==0   %tries to work out cloud base from moisture in BL
        qv_base=GridDan(1).OLQBAR(20,1); 
        qsat=satvappress(Tdry,'goff','liq',pdat,1)/f; %saturation mixing ratio during dry adiabatic rise
        icb_pa = findheight(qsat,qv_base);
        cb_pa=pdat(icb_pa);
        cb_k = Tdry(icb_pa);
    else           %OR specify cb temp here and works out cb pressure based on dry adiabat 
       cb_k=8+273.15; %temp of cloud base in degrees  
       idry=findheight(Tdry,cb_k);
       cb_pa = pdat(idry);
%       cb_pa = pdat(idry)*1.3;
       idry2 = findheight(T_cloud,cb_k);  %or use the pressure at the LEM gridpoint where the max LWC was and the temperature = cb_k
       cb_pa = P_cloud(idry2);              
     end
     
   %OR base on cloud base according to LEM LWC field  
     ilwc = find(xdat(1).x>0.01); %find first height in LEM grid where LWC starts to form and use this as cloud base
     cb_pa = P_cloud(ilwc(1));
     cb_k = T_cloud(ilwc(1));
     
        
        icb=findheight(GridDan(1).PREFN,cb_pa);
%        icb=findheight(T,cb_pa);

    clear gt_k gt_pa ct_k
           
        gt_pa=GridDan(1).PREFN(icb:end);
        gt_k=T(icb:end)+273.15;  %note: routinte doesn't really use gt_k data
        ct_k=T(end)+273.15;
        
        clear adiabatic_lwc adjusted_lwc adjusted_slwc adtemp
        for iad=1:length(gt_k)
          [adiabatic_lwc(iad),adtemp(iad)] ...
            = adLWC_PaulLawson_simple ( cb_pa,cb_k,gt_pa(iad) ); %returns adiabatic LWC in g/m3
        end
        
        rho = gt_pa'.*28.97e-3/8.3144./(adtemp+273.15); %useful for converting from g/m3 to g/kg
        xdat(iidat+1).x = 0.5*adiabatic_lwc;
        ydat(iidat+1).y = adtemp;   %NOTE - need to plot against the moist adiabatic temperature since the aircraft measurements are
                                    %taken IN CLOUD - so should be different to ambient temperature!
        labs(iidat+1).l = 'half adiabatic LWC';
%         ydat(iidat+1).y = (GridDan(idat).Z(2:end) + add_ground_height)/1e3 ; 
         
%          if itemp==1  %plot LEM LWC as function of adiabatic temperature - actually just plot with actual grid point LEM temperatrure
%                 %T=tempLES(GridDan(idat))-273.15;
%                 %ydat(iidat+1).y = T(icb:end);   
%              
%                 for iidat=1:length(idats)
%                     idat=idats(iidat); 
%                     for iad=1:length(adtemp)   
%                         iiad=findheight(GridDan(idat).PREFN,pdat
%                     
%          end
         
         
         
         
             
        
         xlims=0;
         xlimits=[0 2.8];
        lor=-1;

	%     
         
         nmark=0;
    
case 76
    %WRF wind profile direction plots
    
    dual=0;
    lor=2;
    
    izlim=1;
    zmin=0;
    zmax=1600;
    	
	xlims=0;
%	xlimits=[0 3600];
%	xlimits=[0 1.5e5];
    
    
    logflag=0;
    
    time=16;
    tstr=Times(time,:);
    iund=findstr('_',tstr);
    tstr(iund)=' ';
    
    for i=1:length(ilat)	
		ydat(i).y=WRFUserARW(nc,'Z',time,ilat(i),ilon(i));
		u=WRFUserARW(nc,'umeta',time,ilat(i),ilon(i));
        v=WRFUserARW(nc,'vmeta',time,ilat(i),ilon(i));
        
        [th,r]=cart2pol(u,v); %th : minus indicates angles anti-clockwise from 0 to 180
        
%        xdat(i).x= mod(360 + th*180/pi, 360);
        xdat(i).x= (360 + th*180/pi);
        
        labs(i).l=[num2str(LAT(i)) ' , ' num2str(LON(i)) ];    
    end

        
   
    xlab='Direction (degrees)';    

    
    figname=['Wind direction profile at ' tstr];
    
	ylab='Height (km)';
	titlenam=figname;
    savename=figname;  
    
    
    
    

case 75
    %WRF wind profile plots
    
    dual=0;
    lor=-1;
    
    izlim=0;
    zmin=0;
    zmax=1600;
    	
	xlims=0;
%	xlimits=[0 3600];
%	xlimits=[0 1.5e5];
    
    
    logflag=0;
    
    time=36;  %15,16,17 = 18,21,0 UTC
    tstr=Times(time,:);
    iund=findstr('_',tstr);
    tstr(iund)=' ';
    
    for i=1:length(ilat)	
		ydat(i).y=WRFUserARW(nc,'Z',time,ilat(i),ilon(i));
		u=WRFUserARW(nc,'u',time,ilat(i),ilon(i));;
        v=WRFUserARW(nc,'v',time,ilat(i),ilon(i));
        
        xdat(i).x= sqrt( u.^2 + v.^2 );
        
        labs(i).l=[num2str(LAT(i)) ' , ' num2str(LON(i)) ];    
    end

        
   
    xlab='Speed (m/s)';    

    
	xdat(i+1).x = dat2(10,1:12)*0.5144444; %presumably data is in knots
	ydat(i+1).y = dat2(6,1:12);
	labs(i+1).l='Rothera station data';



    figname=['Wind speed profile at ' tstr];
    
	ylab='Height (km)';
	titlenam=figname;
    savename=figname;    

case 744
    %WRF mean profile plots
    
    dual=0;
    lor=1;
    
    izlim=0;
    zmin=13e3;
    zmax=21e3;
    	
	xlims=0;
	xlimits=[-10 40];
%	xlimits=[0 1.5e5];
    
    
    logflag=0;
    
    time=idir;
    time=23;
    
    tstr=Times(time,:);
    iund=findstr('_',tstr);
    tstr(iund)=' ';
    
    hm='total_water';
%    hm='ice';
%     hm='temp';
%     hm='iceno';

    switch hm
    case 'total_water'
        xlab='Total water mixing ratio (ppmv)';   
        factor=f;
        figname=['Mean total water mixing ratio profile at ' tstr];
        izlim=1;
        zmin=13e3;
        zmax=21e3;
    	xlims=1;
		xlimits=[-10 40];
        
    case 'ice'
        xlab='Ice mixing ratio (kg kg^{-1})';   
        xlab='Ice mixing ratio (ppmv)';   
        factor=f;
        figname=['Max ice mixing ratio profile at ' tstr];
        izlim=1;
        zmin=13e3;
        zmax=21e3;
    	xlims=1;
		xlimits=[-10 10];
        
    case 'temp'
        xlab='Temp (^{o}C)';    
        factor=1;
        figname=['Temperature profile at ' tstr];
        
    case 'iceno'
        xlab='Ice number concentration (kg^{-1})';   
        factor=1;
        figname=['Max ice number profile at ' tstr];
        
    end
    
    
    
%    
    
    
    
    
    for i=1:length(LAT)	       
        switch hm
        case 'total_water'
            xdat(i).x=factor.*mean(mean(nc{'QICE'}(time,:,:,:)+nc{'QVAPOR'}(time,:,:,:),2),3); %produces an [nz nx ny] sized array
        case 'ice'
            [Y,I]=max(nc{'QICE'}(time,:,:,:),[],2); %produces an [nz nx ny] sized array
        end                

        
        z_wrf=WRFUserARW(nc,'Z',time);
        ydat(i).y=squeeze(mean(mean(z_wrf.var,2),3));
        

		    

        %labs(i).l=[num2str(LAT(i)) ' , ' num2str(LON(i)) ];    
        labs(i).l='Mean';
    end

        
   
   
    
	ylab='Height (km)';
	titlenam=figname;
    savename=figname;
    
case 74
    %WRF max profile plots
    
    dual=0;
    lor=1;
    
    izlim=0;
    zmin=13e3;
    zmax=21e3;
    	
	xlims=0;
	xlimits=[-10 40];
%	xlimits=[0 1.5e5];
    
    
    logflag=0;
    
    time=idir;
    time=20;
    
    tstr=Times(time,:);
    iund=findstr('_',tstr);
    tstr(iund)=' ';
    
    hm='total_water';
%    hm='ice';
%     hm='temp';
%     hm='iceno';

    switch hm
    case 'total_water'
        xlab='Total water mixing ratio (ppmv)';   
        factor=f;
        figname=['Max total water mixing ratio profile at ' tstr];
        izlim=0;
        zmin=13e3;
        zmax=21e3;
        
        zmin=300;
        zmax=400;
        
    	xlims=1;
		xlimits=[-10 100];
        
    case 'ice'
        xlab='Ice mixing ratio (kg kg^{-1})';   
        xlab='Ice mixing ratio (ppmv)';   
        factor=f;
        figname=['Max ice mixing ratio profile at ' tstr];
        izlim=1;
        zmin=13e3;
        zmax=21e3;
    	xlims=1;
		xlimits=[-10 10];
        
    case 'temp'
        xlab='Temp (^{o}C)';    
        factor=1;
        figname=['Temperature profile at ' tstr];
        
    case 'iceno'
        xlab='Ice number concentration (kg^{-1})';   
        factor=1;
        figname=['Max ice number profile at ' tstr];
        
    end
    
    
    
%    
    
    
    
    
    for i=1:length(LAT)	       
        switch hm
        case 'total_water'
            [Y,I]=max(nc{'QICE'}(time,:,:,:)+nc{'QSNOW'}(time,:,:,:)+nc{'QGRAUP'}(time,:,:,:)+nc{'QVAPOR'}(time,:,:,:),[],2); %produces an [nz nx ny] sized array
        case 'ice'
            [Y,I]=max(nc{'QICE'}(time,:,:,:),[],2); %produces an [nz nx ny] sized array
        end
        
        %now I is a vector of size [nz nz]
        I=squeeze(I);
        [Y2,I2]=max(Y,[],3);  %find max and index of these maxes (3rd dimension of 3D array)
        I2=squeeze(I2);  %size= [nz 1]
        
        xdat(i).x = factor.*squeeze(Y2); 
        
        
        
        for iz=1:length(Y2)
           % [xdat(i).x(iz) imax]=maxALL(nc{'QNICE'}(time,iz,:,:));
%            [xdat(i).x(iz) imax]=maxALL(nc{'QICE'}(time,iz,:,:));
            
%		    ydat(1).y(iz)=WRFUserARW(nc,'Z',time,I(iz,I2(iz)),I2(iz),iz);
            ydat(1).y(iz)=WRFUserARW(nc,'th',time,I(iz,I2(iz)),I2(iz),iz);

%		xdat(i).x=WRFUserARW(nc,'tc',time,ilat(i),ilon(i));
		end
		    

        %labs(i).l=[num2str(LAT(i)) ' , ' num2str(LON(i)) ];    
        labs(i).l='Max';
    end

        
   
   
    
	ylab='Height (km)';
	ylab='Potential temperature (K)';

	titlenam=figname;
    savename=figname;
    
    
   
    case 73
    %MAC3 plots
    
    dual=0;
    lor=-1;
    
    izlim=0;
    zmin=0;
    zmax=16;
    	
	xlims=0;
	xlimits=[0 3600];
%	xlimits=[0 1.5e5];
    
    
    logflag=0;
    
dz=120; %vertical grid spacing
it=3;

hm='ni';
hm='nd';
hm='ql';

times=[5:5:60];

for itimes=1:length(times)
   % comm=['xdat(' num2str(itimes) ').x=max(mac3(' num2str(itimes) ').' hm ',[],1);'];
    comm=['xdat(' num2str(itimes) ').x=mean(mac3(' num2str(itimes) ').' hm ',1);'];
    
    eval(comm);
    labs(itimes).l=[num2str(times(itimes)) ' mins'];
end
    
%     comm=['xdat(2).x=max(mac3(4).' hm ',[],1);'];
%     eval(comm);
%     labs(2).l='20 mins';
%     
%     comm=['xdat(3).x=max(mac3(5).' hm ',[],1);'];
%     eval(comm);
%     labs(3).l='25 mins';
    
    
    for ix=1:length(xdat)
        ydat(ix).y=[dz:dz:126*dz]/1000;
	end
        
    if strcmp(hm(1),'q')==1    
       	xlab='Mixing Ratio (g kg^{-1})';    
    else
       	xlab='Number concentration (cm^{-3})'; 
        for ix=1:length(xdat)
            xdat(ix).x=xdat(ix).x / 1e6;
        end
    end
    
    figname=[hm ' max profile'];
    figname=[hm ' mean profile'];
    
	ylab='Height (km)';
	titlenam=figname;
    savename=figname;
    
    
 
    
    
    
    case 72
    %running times
    
    dual=0;
    lor=2;
    
    izlim=0;
    zmin=14;
    zmax=22;
    	
	xlims=1;
	xlimits=[0 3600];
%	xlimits=[0 1.5e5];
    
    
    logflag=1;
    


    ydat(1).y=[0 13+59/60 22+51/60 36+41/60 45+9/60];
    labs(1).l='Dan';
    
    ydat(2).y=[0 13+21/60 21+57/60 34+58/60 42+51/60];
    labs(2).l='Grant';
    
    ydat(3).y=[0 14+40/60 23+58/60 37+40/60 45+19/60];
    labs(3).l='Dave W';
    
    ydat(4).y=[0 16+09/60 26+43/60 44+16/60 55+13/60];
    labs(4).l='Dave T';
    
    ydat(5).y=[0 15+50/60 26+45/60 43+24/60 52+39/60];
    labs(5).l='Jonny';
    
    ydat(6).y=[0 10+51/60 18+49/60 31+21/60 38+49/60];
    labs(6).l='Paul';    

    xkm=[0 3 5 8 10];
    for ix=1:6
        xdat(ix).x=ydat(ix).y*60;
        ydat(ix).y=xkm;
	end
        
    
   	xlab='Time (mins)';    
    figname='Time breakdown';
    
	ylab='Distance (km)';
	titlenam=figname;
    savename=figname;
    
    
    case 71
    %running times
    
    dual=0;
    lor=2;
    
    nmark=-1;
    
    izlim=0;
    zmin=14;
    zmax=22;
    	
	xlims=0;
	xlimits=[4.95 5.05];
	xlimits=[0 1.5e5];
    
    
    logflag=0;

    clear times
    
year=2009;
switch year
    case 2008
    times(1).y=[0 13+59/60 22+51/60 36+41/60 45+9/60];
    labs(1).l='Dan';
    
    times(2).y=[0 13+21/60 21+57/60 34+58/60 42+51/60];
    labs(2).l='Grant';
    
    times(3).y=[0 14+40/60 23+58/60 37+40/60 45+19/60];
    labs(3).l='Dave W';
    
    times(4).y=[0 16+09/60 26+43/60 44+16/60 55+13/60];
    labs(4).l='Dave T';
    
    times(5).y=[0 15+50/60 26+45/60 43+24/60 52+39/60];
    labs(5).l='Jonny';
    
    times(6).y=[0 10+51/60 18+49/60 31+21/60 38+49/60];
    labs(6).l='Paul';    
    
    times(7).y=[0 15+55/60 29+04/60 49+31/60 60+38/60];
    labs(7).l='Liz';    
    
    times(8).y=[0 18+25/60 30+39/60 51+37/60 64+4/60];
    labs(8).l='Joz';  
    
    xkm=[0 3 5 8 10];
    
    case 2009
        xkm=[0 3 5 7.5 10];
        
        idat=0;
        
        idat=idat+1;        
        labs(idat).l='Haile';
        times(idat).y=[0 00+08+08/60 00+13+30/60 00+20+35/60 00+27+39/60];
        
        idat=idat+1;
        times(idat).y=[0 11+05/60 18+32/60 28+26/60 38+03/60]; 
        labs(idat).l='Paul'; 
        
        idat=idat+1;        
        labs(idat).l='Grant';
        times(idat).y=[0 00+12+10/60 00+21+04/60 00+32+31/60 00+43+19/60];
        
        idat=idat+1;        
        labs(idat).l='Dave W';
        times(idat).y=[0 00+14+15/60 00+23+40/60 00+35+28/60 00+46+29/60];    %4570   2329 1500 2171 1392
        
        idat=idat+1;        
        labs(idat).l='Ian';
        times(idat).y=[0 00+15+31/60 00+24+51/60 00+36+40/60 00+48+14/60];   %15792   3485 2191 3181 1988
                
        idat=idat+1;
        times(idat).y=[0 15+47/60 26+08/60 39+20/60 52+22/60];
        labs(idat).l='Chris'; 
        
        idat=idat+1;        
        labs(idat).l='Cat';
        times(idat).y=[0 00+16+54/60 00+28+02/60 00+42+26/60 00+56+08/60];
                        
        idat=idat+1;        
        labs(idat).l='Dave T';
        times(idat).y=[0  00+16+21/60 00+28+43/60 00+44+23/60 60+04/60];                
        
        idat=idat+1;        
        labs(idat).l='Hugo';
        times(idat).y=[0 00+19+16/60 00+32+28/60 00+48+59/60 60+04+54/60]; 
                        
        idat=idat+1;        
        labs(idat).l='Rachel';
        times(idat).y=[0 00+19+21/60 00+32+59/60 00+51+06/60 60+08+51/60]; 
        
        
        
        
        
        
        
end

    
    for ix=1:length(times)
%         xdat(ix).x=xkm;
%         speeds=diff(xkm)./diff(ydat(ix).y);
%         ydat(ix).y=[speeds(1) speeds]*60; %*60 to convert from km/min to km/hr

         xdat(ix).x=xkm(2:end);
         speeds=diff(xkm)./diff(times(ix).y);
         ydat(ix).y=[speeds]*60; %*60 to convert from km/min to km/hr
         
         mins=floor(times(ix).y(end));
         if mins>=60
             hours = floor(mins/60);
             if mins-hours*60<10
                 mins_str = [num2str(hours) ':0' num2str(mins-hours*60)];
             else
                 mins_str = [num2str(hours) ':' num2str(mins-hours*60)];
             end
         else
             hours=0;
             mins_str = num2str(mins);
         end
         
         
         
         secs=60*(times(ix).y(end)-mins);
         if secs<10
             secs_str = ['0' num2str(secs)];
         else
             secs_str = [num2str(secs)];
         end
         
         labs(ix).l = [labs(ix).l ' ' mins_str ':' secs_str];
    end
    
    xlims=1;
	xlimits=[0 10];
        
    
   	ylab='Average Speed (km hr ^{-1})';    
%   	ylab='Average Speed (km min^{-1})';    

    figname='Average running speeds';
    
	xlab='Distance (km)';
	titlenam=figname;
    savename=figname;
    
    
    case 70
    %min vap for 3d case
    
    dual=0;
    lor=4;
    
    izlim=1;
    zmin=14;
    zmax=22;
    	
	xlims=1;
	xlimits=[4.95 5.05];
	xlimits=[0 1.5e5];
    
    
    logflag=0;
    

    xdat(1).x=squeeze(max(max(ThreeDDan(1).Q(2:end-1,2:end-1,:))));
    ydat(1).y=Grid.Z/1000 + add_ground_height;
    labs(1).l='3D'; 
    
   	ylab='Height (km)';
    
    figname='Max ice NC';
    
	xlab='Max ice number concentration (kg^{-1})';
	titlenam=figname;
    savename=figname;
    
    case 69
        %run av_updraught first
    
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
 
    xlab=['Time UTC'];
	ylab='Mass Flux (kg s^{-1} m^{-1})';
    
    figname=['Updraught mass flux'];
    savename=figname;
    titlenam=savename;
    
    logflag=0;
 
    idats=[1:5];
	for iidat=1:length(idats)
       idat=idats(iidat); 
                
        ydat(iidat).y = 1000*wflux_diag(idat).w;
        xdat(iidat).x = GridDan(idat).t(1:length(ydat(iidat).y)) + 3 ;         
        labs(iidat).l=runName(idat).nam;        	
	end		
         xlims=1;
         xlimits=[GridDan(1).t(1) GridDan(1).t(60)]+3;
	%     
         
         nmark=0;
         
    case 68
    
    time1=19.75;
    time2=23.75;
    t1=findheight(GridDan(1).t+3,time1);
    t2=findheight(GridDan(1).t+3,time2);
    
    t1=1;
    t2=20;
    
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
 
    xlab=['Eddy Heat Flux Contribution'];
	ylab='Height (km)';
    
    figname=['Eddy Heat flux'];
    savename=figname;
    titlenam=savename;
    
    logflag=0;
    
    error=0;
    [isg,error]=getDGcol('WTHSG',dgstrDan(1).dg,error); %subgrid
    %[icn,error]=getDGcol('WTHCN',dgstrDan(1).dg,error); %resolved
    [icn,error]=getDGcol('WTHAD',dgstrDan(1).dg,error); %resolved
    [iwth,error]=getDGcol('ALL_WTH',dgstrDan(1).dg,error); %resolved
    [iwthsg,error]=getDGcol('ALL_WTHSG',dgstrDan(1).dg,error); %resolved
    [ivw,error]=getDGcol('VW',dgstrDan(1).dg,error); %resolved
    [ivwsg,error]=getDGcol('VWSG',dgstrDan(1).dg,error); %resolved
      
    [iwthA,error]=getDGcol('ALd_A',dgstrDan(1).dg,error); %resolved
    
    [idisr,error]=getDGcol('DISR',dgstrDan(1).dg,error); %resolved
    
    aind=280;%ALu_A
    aind=284; %ACC_A
    aind=iwthA;
    aind=[];
    
   % aind=[];
    
%    [iqsg,error]=getDGcol('WQ01SG',dgstrDan(1).dg,error); %subgrid
%    [iadsg,error]=getDGcol('WQ01AD',dgstrDan(1).dg,error); %resolved
    
    datind=[isg icn]; %sum of subgrid and resolved
  %  datind=[idisr]; 
  %  datind=[iqsg iadsg]; %sum of subgrid and resolved turbulent flux of vapour
  %  datind=[ivw ivwsg]; 
    
    idats=[1 2];
    
    ih=3;
 
    
	for iidat=1:length(idats)
       idat=idats(iidat); 
        
          ih2=length(GridDan(idat).Z);
          
         if length(aind)==1            
            area=TimeAvDan(idat).DGAV(ih:ih2,aind);
            area(area==0)=1;
        else
            area=1;
        end
        
%        xdat(iidat).x= - 1/300*TotMassBudgetALL(GridDan(idat),sum(TimeAvDan(idat).DGAV(:,datind),2),GridDan(idat).t,ih-1,ih2);
        
        xdat(iidat).x= sum(TimeAvDan(idat).DGAV(ih:ih2,datind),2)/npess2(iidat);
        
       % xdat(iidat).x = mean(sum(icediagsALL(idat).i(:,t1:t2,[datind]),3)./area,2)/npess2(idat); %ALu_W. Dividing by no. processors

        ydat(iidat).y = (GridDan(idat).Z(ih:ih2)+620)/1000; 
        
        labs(iidat).l=runName(idat).nam;
        	
	end
	

	
         xlims=0;
         xlimits=[-30 50];
	%     
         
         nmark=0;
         
    case 67
    
    time1=19.75;
    time2=23.75;
    t1=findheight(GridDan(1).t+3,time1);
    t2=findheight(GridDan(1).t+3,time2);
    
    t1=1;
    t2=20;
    
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
 
    xlab=['Tracer Flux'];
	ylab='Height (km)';
    
    figname=['Tracer flux'];
    savename=figname;
    titlenam=savename;
    
    logflag=0;
    
    aind=280;%ALu_A
    aind=284; %ACC_A
    
    aind=[];
    
    datind=151; %ALL_Q10
    datind=157; %ALu_WQ10
    datind=139; %ALL_WQ10
    datind=[145 139]; %ALL_WQSG10
    
    idats=[1 2];
    
	for iidat=1:length(idats)
       idat=idats(iidat); 

         if length(aind)==1            
            area=icediagsALL(idat).i(:,t1:t2,aind)/npess2(idat);
            area(area==0)=1;
        else
            area=1;
        end

        xdat(iidat).x = mean(sum(icediagsALL(idat).i(:,t1:t2,[datind]),3)./area,2)/npess2(idat); %ALu_W. Dividing by no. processors

        ydat(iidat).y = (GridDan(idat).Z+620)/1000; 
        
        labs(iidat).l=runName(idat).nam;
        	
	end
	

	
         xlims=0;
         xlimits=[-30 50];
	%     
         
         nmark=0;
         
    case 66
    %min vap for 3d case
    
    dual=0;
    lor=4;
    
    izlim=1;
    zmin=14;
    zmax=22;
    	
	xlims=0;
	xlimits=[4.95 5.05];
	xlimits=[-0.02 0.02];
    
    
    logflag=0;
    
    meanvap=f*squeeze(mean(mean(ThreeD.Q(2:end-1,:,240,1),1),2));

    xdat(1).x=f*squeeze(min(min(ThreeD.Q(2:end-1,:,:,1),[],1),[],2)) - meanvap;
    ydat(1).y=Grid.Z/1000;
    labs(1).l='Min Vap'; 
    
    xdat(2).x=f*squeeze(max(max(ThreeD.Q(2:end-1,:,:,1),[],1),[],2)) - meanvap;
    ydat(2).y=Grid.Z/1000;
    labs(2).l='Max Vap'; 
    
    xdat(3).x=f*squeeze(mean(mean(ThreeD.Q(2:end-1,:,:,1),1),2)) - meanvap;
    ydat(3).y=Grid.Z/1000;
    labs(3).l='Mean Vap'; 

   
	ylab='Height (km)';
    
    figname='3D min';
    
	xlab='Min Vap (ppmv)';
	titlenam=figname;
    savename=figname;
    
    case 65
    %ozone DMI all plots
    %get from loadvapdata
    
    dual=0;
    lor=4;
    
    izlim=1;
    zmin=0;
    zmax=18;
    	
	xlims=0;
	xlimits=[0 20];
    
    
    logflag=0;
 

    xdat(1).x=Grid.OLQBAR(:,7);
    ydat(1).y=Grid.Z/1000;
    labs(1).l='Hazy';
    
    xdat(2).x=Grid.OLQBAR(:,8);
    ydat(2).y=Grid.Z/1000;
    labs(2).l='Hazy 2';

   
	ylab='Height (km)';
    
    figname='Hazel''s plot';
    
	xlab='Ice No. Conc (#/kg)';
	titlenam=figname;
    savename=figname;
    
case 64
    %ozone DMI all plots
    %get from loadvapdata
    
    dual=1;
    lor=4;
    
    zmin=11;
    zmax=30;
    
    izlim=1;
	
	xlims=1;
	xlimits=[0 20];
    
    
    logflag=0;
 
for idat=1:10
    xdat(idat).x=data(idat).dmi(8,:);
    ydat(idat).y=data(idat).dmi(1,:)/1000;
end
    
labs(1).l='flight_10_24Feb';
labs(2).l='flight_1_10Feb';
labs(3).l='flight_2_12Feb';
labs(4).l='flight_3_13Feb';
labs(5).l='flight_4_16Feb';
labs(6).l='flight_5_17Feb';
labs(7).l='flight_6_19Feb';
labs(8).l='flight_7_21Feb';
labs(9).l='flight_8_21Feb';
labs(10).l='flight_9_23Feb';
    
  
 %   xlab='Water Vapour Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='DMI ozonesondes';
    
	xlab='Ozone Mixing Ratio (ppmv)';
	titlenam=figname;
    savename=figname;
   
    
    
case 63
    %SF4 vapour and ozone plots
    %run readOzoneProfileSSS
    %or get from loadvapdata
    %run readsdla
    
    z=GridDan(1).Z+620;
    secyA=z/1000;
    secyB=z/1000;
    lab2='';  
    dual=2;
    
    xloc=[1 1 0 0];
    
    
    
    lor=4;
    
    zmin=11;
    zmax=30;
    
    izlim=1;
	
	xlims=1;
	xlimits=[0 20];
    
    
    logflag=0;
    
    xdat(1).x=sdla(1).s(7,:);
    ydat(1).y=sdla(1).s(2,:)/1000;
    labs(1).l='SDLA 21:57-00:48 UTC';
    
    xdat(2).x=f*dmi(1).p(:,10);
    ydat(2).y=dmi(1).p(:,1)/1000;
    labs(2).l='DMI 20:15-22:08 UTC';
    
     xdat(3).x=dirac2(10,:);
     ydat(3).y=dirac2(4,:)/1000;
     labs(3).l='SSS Ozone';
     
     xdat(4).x=data(10).dmi(8,:);
     ydat(4).y=data(10).dmi(1,:)/1000;
     labs(4).l='DMI Ozone';
    
  
    xlab='Water Vapour Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='24th Feb vapour and ice saturation mixing ratios';
    titlenam='Ozone Mixing Ratio (ppmv)';
    savename=figname;

    
    [zvap,I,J]=unique(ydat(2).y);
    vap=xdat(2).x(I);
    
    [zoz I J]=unique(ydat(4).y);
    
    vap2=interp1(zvap,vap,zoz);
    oz=xdat(4).x(I);
    
    
case 62 %aerosol distribution
    idir=1;
    
    izlim=0;

    
	for idat=1:length(Sc)
        xdat(idat).x = 1e6*exp(logD(idat).d(2:end));
        ydat(idat).y = dN(idat).n/1e6;
	end
    
   labs(1).l='Nuclei mode';
   labs(2).l='Accumulation mode';
   
   
	ylab='dN (dlogD)^{-1} (cm^{-3})';
    xlab=['Diameter (microns)'];
    
    
    logflag=1;
    
    
     xlims=0;
	 lor=1;
     nmark=0;
     
     savename=['Aerosol distribution'];
     titlenam=savename;
     
     
    
 case 61
    idir=1;
    
    izlim=0;

	[iz,iz2]=findheight(GridDan(1).Z+620,14e3,20e3);
	[t1]=findheight(GridDan(1).t+3,23.5);
	t2=62; %final dump
	
	xdat(1).x=GridDan(idir).VBAR;
    ydat(1).y = GridDan(1).Z/1000 + 0.62;
    
   labs(1).l='250m res';
   
	ylab='Height (km)';
    xlab=['Horizontal Wind Speed (m s^{-1})'];
    
    
    logflag=0;
    
    
     xlims=0;
	 lor=1;
     nmark=0;
     
     savename=['Horizontal wind speed profile'];
     titlenam=savename;
     
    case 60
    idir=1;
    
    izlim=1;
    zmin=0;
    zmax=18;
    
	for idat=1:3
        xdat(idat).x=width(1).w(:,idat+7)/1000;
        ydat(idat).y = GridDan(1).Z/1000 + 0.62;
        
        t1=GridDan(1).t(idat+7)+3;
        
        mins=(t1-floor(t1))*60;
        minstr=num2str(mins,'%2.0f');
    
        hrs=mod(floor(t1),24);
        hrstr=num2str(hrs,'%2.0f');
        if mins==0; minstr='00';end
        if hrs==0; hrstr='00';end
        labs(idat).l=[hrstr ':' minstr];
        
	end
    
    z2=findheight(GridDan(1).Z+620,2e3);
    xdat(4).x=interp1([2 12.5],[7 20],(GridDan(1).Z(z2:end)+620)/1000,'linear','extrap');
    labs(4).l='Linear variation'
    ydat(4).y = GridDan(1).Z(z2:end)/1000 + 0.62;
    
	ylab='Height (km)';
    xlab=['Updraught Width (km)'];
    
    
    logflag=0;
    
    
     xlims=0;
	 lor=4;
     nmark=0;
     
     savename=['Updraught width'];
     titlenam=savename;
     
    case 59
    idir=1;
    
    izlim=0;

	[izmin,izmax]=findheight(GridDan(1).Z+620,14e3,29e3);
	[t1]=findheight(GridDan(1).t+3,23.5);
	t2=62; %final dump
    
    dumprange=[t1:t2];

    ad_calcs4timeseries;
    
    pisub=f*sum(icediag(idir).i(izmin:izmax,dumprange,[24 25 27]),3);
    
	xdat(1).x=300*sum(icead(:,dumprange),2);
    xdat(2).x=300*sum(fallrate,2);
    xdat(3).x=300*sum(fallrate+icead(:,dumprange),2);
    xdat(4).x=300*sum(pisub,2);
    xdat(5).x=300*sum(microicerate+pisub,2);
    

    
	for idat=1:5
        ydat(idat).y = GridDan(1).Z(izmin:izmax)/1000 + 0.62;
	end
    
   labs(1).l='ad';
   labs(2).l='fall';
   labs(3).l='sum';
   labs(4).l='pisub';
   labs(5).l='microphysics';
   
	ylab='Height (km)';
    xlab=['Ice mixing ratio (ppmv)'];
    
    
    logflag=0;
    
    
     xlims=0;
	 lor=1;
     nmark=0;
     
     savename=['Sum of fall speed source of ice from 17-20 km and from 23.5-1.67 UTC'];
     savename=['Total ice from fall speed flux from 23.5-1.67 UTC'];     
     titlenam=savename;
     
    case 58
    idir=2;
    
    izlim=0;

	[iz,iz2]=findheight(GridDan(1).Z+620,14e3,20e3);
	[t1]=findheight(GridDan(1).t+3,23.5);
	t2=62; %final dump
	
	microicerate=f*sum(icediagsALL(idir).i(iz:iz2,t1:t2,31:33),3)/npes; %ice mixing ratio source rate
	xdat(1).x=300*sum(microicerate,2);

    
	for idat=1:1
        ydat(idat).y = GridDan(1).Z(iz:iz2)/1000 + 0.62;
	end
    
   labs(1).l='250m res';
   
	ylab='Height (km)';
    xlab=['Ice mixing ratio (ppmv)'];
    
    
    logflag=0;
    
    
     xlims=0;
	 lor=1;
     nmark=0;
     
     savename=['Sum of microphysical source of ice from 17-20 km and from 23.5-1.67 UTC'];
     savename=['Total ice formed microphysically from 23.5-1.67 UTC'];     
     titlenam=savename;


    case 57
    idir=1;
    
    izlim=0;
    iydir=-1; %reverse ydir as is pressure
%    zmin=15;
%    zmax=20;
    
   
	ylab='Pressure (hPa)';
    
    
    logflag=0;
    
    i55='total';
    i55='tp';
    i55='lwc';
    i55='lwc2';
    i55='inc';
    %i55='tracer';
  %  i55='tracer_2';
    
%     i55='therm_pos';
      i55='inc_emm';
      i55='ncw_emm';
%     i55='lwc_emm';
 %   i55='lwc_3';
%     i55='iwc_emm';
%i55='rwc';
%i55='lem_lwcad';
%i55='lem_Ndrops_warm_rain';
%i55='lem_Tprofile';
%i55='lem_microdiag';
%i55='lem_lwc';

    
     xlims=0;
	 lor=1;
     nmark=0;
    
     %run EMM_ACCpressure.m first

    
    switch i55
     case 'lem_lwc'
    	%	[tp,h]=plot_tephi(-40+273,50+273,153,5000);
        prate='Q02';

        dgarea='ACu';
       % dgarea='ALL';
		
        figname=['LWC contents vs Height for dump ' num2str(fnall)];
        xlab=['LWC (g kg^{-1})'];
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
         
    idirs=[1 3];
    groundheights=[1000 1000 1000 1000 620]; %%%% NOTE - make sure to set these properly %%%%%%%
     for idat=1:length(idirs)  
        
        idir=idirs(idat);
        groundheight=groundheights(idir);
		%groundheight=620;
		

        
        error=0;
        [dgfind,error]=getDGcol([dgarea '_A'],dgstrDan(idir).dg,error);
        area=TimeAvDan(idir).DGAV(:,dgfind(1));
        i0=find(area==0);
        area(i0)=1e99; %make zero areas=1e99 to avoid divide by zero (diags will be zero anyway)
        [dgfind,error]=getDGcol([dgarea '_' prate],dgstrDan(idir).dg,error);
        
        xdat(idat).x = 1000 * TimeAvDan(idir).DGAV(:,dgfind(1))./area*npess2(idir);
      %  xdat(idat).x = LWCacc*1000;
        ydat(idat).y = (GridDan(idir).Z+groundheight) / 1000;
        labs(idat).l = runName(idir).nam; 
            
     end
     
      for idat=[1:length(idirs)]+2 
        
        idir=idirs(idat-length(idirs));
        groundheight=groundheights(idir);
		
		nz=length(GridDan(idir).Z);
		zdat=GridDan(idir).Z(2:nz)+groundheight;
		pdat=GridDan(idir).PREFN(2:nz);
		qdat=GridDan(idir).OLQBAR(2:nz,1);
%		qdat(1)=qdat(2);
		tdat=tempLES(GridDan(idir));
		tdat=tdat(2:end);
		
        f=1e6*28.97/18;
		qsat=satvappress(tdat,'goff','liq',pdat,1)/f;
		
        [CAPE,CIN,HLCL,TLCL,PLCL]=calc_cape(pdat,tdat,qdat,qsat,zdat);
        
        ipos=findheight(zdat,HLCL);     
        th_start=GridDan(idir).THREF(ipos);
        
		[tad,th_grid,p_grid]=moist_adiabat2(th_start,pdat(ipos),pdat(end)); %temperaure, potemp and pressure during moist saturated rise
        zdat2=interp1(pdat,zdat,p_grid); %find corresponding altitudes

            qsat2=satvappress(tad,'goff','liq',p_grid,1)/f; %the saturation mixing ratio during the adiabatic ascent - i.e. the vapour value
                                                            %of the parcel as are assuming it's at saturation all the way up
  
            labs(idat).l=runName(idir).nam; 
            xdat(idat).x=1000*(qsat(ipos)-qsat2); %the adiabatic LWC is the initial vapour value of the parcel at LCL minus  
            ydat(idat).y=zdat2/1000;                    %value maintained during ascent (=saturation mixing ratio)
            
     end
     
     
     
    case 'lem_microdiag'
        
    idirs=[1:5];
    groundheights=[1000 1000 1000 1000 620]; %%%% NOTE - make sure to set these properly %%%%%%%
     for idat=1:length(idirs)  
        
        idir=idirs(idat);
        groundheight=groundheights(idir);
		%groundheight=620;
		
	%	[tp,h]=plot_tephi(-40+273,50+273,153,5000);
        prate='PRAUT';
       % prate='PIHAL';
         prate='PRAUT';
%         prate='PGACW';
%         prate='PRAUT';
%         prate='PRACW';
%         prate='PIPRM';
     % prate='Q07';

        dgarea='ACu';
       % dgarea='ALL';
		
        figname=[prate ' vs Height for dump ' num2str(fnall)];
        xlab=['Micophysical Process Rate (kg kg^{-1} s^{-1})'];
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        error=0;
        [dgfind,error]=getDGcol([dgarea '_A'],dgstrDan(idir).dg,error);
        area=TimeAvDan(idir).DGAV(:,dgfind(1));
        i0=find(area==0);
        area(i0)=1e99; %make zero areas=1e99 to avoid divide by zero (diags will be zero anyway)
        [dgfind,error]=getDGcol([dgarea '_' prate],dgstrDan(idir).dg,error);
        
        xdat(idat).x = TimeAvDan(idir).DGAV(:,dgfind(1))./area*npess2(idir);
        ydat(idat).y = (GridDan(idir).Z+groundheight) / 1000;
        labs(idat).l = runName(idir).nam; 
            
     end
     
    case 'lem_Tprofile'
        
    idirs=[1 4 5];
    groundheights=[1000 1000 1000 1000 620]; %%%% NOTE - make sure to set these properly %%%%%%%
     for idat=1:length(idirs)  
        
        idir=idirs(idat);
        groundheight=groundheights(idir);
		%groundheight=620;
		
	%	[tp,h]=plot_tephi(-40+273,50+273,153,5000);
		
		nz=length(GridDan(idir).Z);
		zdat=GridDan(idir).Z(2:nz)+groundheight;
		tdat=tempLES(GridDan(idir));
		tdat=tdat(2:end);
		
        figname=['Temperature vs Height'];
        xlab=['Temperature (o^{C})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        xdat(idat).x = tdat-273.15;
        ydat(idat).y = zdat/1000;
        labs(idat).l = runName(idir).nam; 
            
     end
     

   
         
    case 'lem_Ndrops_warm_rain'
        
    idirs=[1 4 5];
    idirs=[1:5];
    groundheights=[1000 1000 1000 1000 620]; %%%% NOTE - make sure to set these properly %%%%%%%
     for idat=1:length(idirs)  
        
        idir=idirs(idat);
        groundheight=groundheights(idir);
		%groundheight=620;
		
	%	[tp,h]=plot_tephi(-40+273,50+273,153,5000);
		
		nz=length(GridDan(idir).Z);
		zdat=GridDan(idir).Z(2:nz)+groundheight;
		pdat=GridDan(idir).PREFN(2:nz);
		qdat=GridDan(idir).OLQBAR(2:nz,1);
%		qdat(1)=qdat(2);
		tdat=tempLES(GridDan(idir));
		tdat=tdat(2:end);
		
        f=1e6*28.97/18;
		qsat=satvappress(tdat,'goff','liq',pdat,1)/f;

        [CAPE,CIN,HLCL,TLCL,PLCL]=calc_cape(pdat,tdat,qdat,qsat,zdat);
        
        ipos=findheight(zdat,HLCL);     
        th_start=GridDan(idir).THREF(ipos);
        
		[tad,th_grid,p_grid]=moist_adiabat2(th_start,pdat(ipos),pdat(end));
        zdat2=interp1(pdat,zdat,p_grid);
        
        figname=['No. conc. vs Height'];
        xlab=['Number conc (cm^{-3})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        m=4/3*pi*(10e-6)^3*1000; %mass of a 20 micron diameter droplet

            qsat2=satvappress(tad,'goff','liq',p_grid,1)/f;
  
           labs(idat).l=runName(idir).nam; 
           lwc=qsat(ipos)-qsat2;
           
               [dgfind,error]=getDGcol([dgarea '_A'],dgstrDan(idir).dg,error);
                area=TimeAvDan(idir).DGAV(:,dgfind(1));
                i0=find(area==0);
                area(i0)=1e99; %make zero areas=1e99 to avoid divide by zero (diags will be zero anyway)
                [dgfind,error]=getDGcol([dgarea '_' prate],dgstrDan(idir).dg,error);
                
                lwc = TimeAvDan(idir).DGAV(:,dgfind(1))./area*npess2(idir);
                lwc = interp1(pdat,lwc(2:end),p_grid);
           
           rho=interp1(pdat,GridDan(idir).RHON(2:nz),p_grid);
           rhobase=GridDan(idir).RHON(ipos);           
           xdat(idat).x = lwc / m * 1e-6 * rhobase;
           ydat(idat).y=zdat2/1000;
            
         end
         
    case 'lem_lwcad'
        
    idirs=[1 4];
    groundheights=[1000 1000 1000 1000 620]; %%%% NOTE - make sure to set these properly %%%%%%%
     for idat=1:length(idirs)  
        
        idir=idirs(idat);
        groundheight=groundheights(idir);
		%groundheight=620;
		
	%	[tp,h]=plot_tephi(-40+273,50+273,153,5000);
		
		nz=length(GridDan(idir).Z);
		zdat=GridDan(idir).Z(2:nz)+groundheight;
		pdat=GridDan(idir).PREFN(2:nz);
		qdat=GridDan(idir).OLQBAR(2:nz,1);
%		qdat(1)=qdat(2);
		tdat=tempLES(GridDan(idir));
		tdat=tdat(2:end);
		
        f=1e6*28.97/18;
		qsat=satvappress(tdat,'goff','liq',pdat,1)/f;
		
		%isup=find(qdat./qsat > 1);
		
		
        %qdat(isup)=qsat(isup);
		%qdat(isup(1))=qsat(isup(1))*0.98;
		
		
%		[CAPE,CIN,HLCL,TLCL,PLCL]=plot_tephi_data2(tdat,pdat,qdat,qsat,zdat);
        [CAPE,CIN,HLCL,TLCL,PLCL]=calc_cape(pdat,tdat,qdat,qsat,zdat);
        
        ipos=findheight(zdat,HLCL);     
        th_start=GridDan(idir).THREF(ipos);
        
		[tad,th_grid,p_grid]=moist_adiabat2(th_start,pdat(ipos),pdat(end));
        zdat2=interp1(pdat,zdat,p_grid);
        
        figname=['LWC vs Height'];
        xlab=['Mixing Ratio (g kg^{-1})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;

            qsat2=satvappress(tad,'goff','liq',p_grid,1)/f;
  
            labs(idat).l=runName(idir).nam; 
            xdat(idat).x=1000*(qsat(ipos)-qsat2);
            ydat(idat).y=zdat2/1000;
            
         end
        
    case 'rwc'
        figname=['RWC vs Height'];
        xlab=['Concentration (kg m^{-3})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        
  
    
%    xdat(idat+1).x = IWCacc;
%    ydat(idat+1).y = (GridDan(1).Z+620)/1000;         
%    labs(idat+1).l='LEM mean IWC'; 
        lor=4;             

        
        
        
    
    case 'total'
        figname=['Depleted total water points'];
        xlab=['Sum of deficit below 5 ppmv of points with tot water LT 5 ppmv (ppmv)'];
        xdat(1).x = dq_tot(idir).d(:,itdehyd,2)*length(GridDan(idir).Y1);
        labs(1).l='Total';
        
    case 'tp'
         ipos=25;
	th_start=Tacc(ipos)*(1e5/pacc(ipos))^0.286;
	adval=adiabat(end,2);
	[tad,th_grid,p_grid]=moist_adiabat2(th_start,pacc(ipos),adval);
     
    th_start=(14.57+273.15)*(1e5/745.9e2)^0.286;
	[tad,th_grid,p_grid]=moist_adiabat2(th_start,pacc(ipos),adiabat(end,2));
    
        figname=['Temperature vs Pressure'];
        xlab=['Temperature (K)'];
        
        xdat(1).x = Tacc;
        ydat(1).y = pacc;         
        labs(1).l='LEM'; 

        xdat(2).x = adiabat(:,3);
        ydat(2).y = adiabat(:,2);         
        labs(2).l='EMM'; 
    
        

        xdat(3).x = tad;
        ydat(3).y = p_grid;         
        labs(3).l=['Sat ad from LEM CB, index=' num2str(ipos)]; 

        
         xlims=1;
         xlimits=[200 300];
         
         lor=3;
        
        
    case 'lwc'
        figname=['LWC vs Pressure'];
        xlab=['Concentration (kg m^{-3})'];
        xdat(1).x = RAINacc;
        ydat(1).y = pacc;         
        labs(1).l='LEM LWC+rain'; 

        xdat(5).x = adiabat(:,4);
        ydat(5).y = adiabat(:,2);         
        labs(5).l='EMM'; 
        
        
        xdat(2).x=1e-3*meanselect(emmdat(1).lwc(:,1:60,1),'dat>1');
        xdat(2).x=1e-3*emmdat(1).lwc(:,20,1);
       % xdat(2).x = 1e-3*max(emmdat(1).lwc(:,1:60,1),[],2);
        ydat(2).y = interp1(rhenv(:,3),rhenv(:,2),Temm);         
        ydat(2).y = interp1(adiabat(:,3)-1,adiabat(:,2),Temm+273.15);  %is minus one since the temperature used
                % in the time-height plots is the adiabatic temperature minus tdiff1(=1). Here are interpolating
                % to get pressure of the temps in LWC time-height array from the adiabatic temp
        labs(2).l='EMM LWC'; 
        
        
        
%         ei=SatVapPress(adiabat(:,3),'goff','liq'); %Pa vapour pressure of EMM adiabat
%         sat=0.622*ei./(adiabat(:,2)-ei); %corresponding MR
%         rhoemm=pemm.*28.97e-3/8.3144./tad;
%         ih=findheight(adiabat(:,2),7.75e4); %pressure where LEM liquid starts to form in dump 7 

        ei=SatVapPress(tad,'goff','liq'); %Pa vapour pressure of EMM adiabat
        sat=0.622*ei./(p_grid-ei); %corresponding MR
        rhoemm=p_grid.*28.97e-3/8.3144./tad;
        ih=25; %pressure where LEM liquid starts to form in dump 7 
        
%        xdat(3).x = (sat(ih)-sat).*rhoemm; %LWC content assuming vapour input of saturation at this point
%        ydat(3).y = p_grid;         
%        labs(3).l='EMM new CB';   
        
        xdat(3).x = CONDacc; %LWC content assuming vapour input of saturation at this point
        ydat(3).y = pacc;         
        labs(3).l='LEM all condensate';   

         xdat(4).x = LWCacc;
        ydat(4).y = pacc;         
        labs(4).l='LEM LWC'; 
        
        lor=4;
    
    case 'lwc2'
        figname=['LWC vs Pressure'];
        xlab=['Concentration (kg m^{-3})'];
        xdat(1).x = RAINacc;
        ydat(1).y = pacc;         
        labs(1).l='LEM LWC+rain'; 

        xdat(5).x = adiabat(:,4);
        ydat(5).y = adiabat(:,2);         
        labs(5).l='EMM'; 
        
        iemm=11;
        
        xdat(2).x=1e-3*meanselect(emmdat(iemm).lwc(:,50:60,1),'dat>1');
        xdat(2).x=1e-3*mean(emmdat(iemm).lwc(:,1:50,1),2);
       % xdat(2).x = 1e-3*max(emmdat(1).lwc(:,1:60,1),[],2);
        ydat(2).y = interp1(rhenv(:,3),rhenv(:,2),Temm);         
        ydat(2).y = interp1(adiabat(:,3)-1,adiabat(:,2),Temm+273.15);  %is minus one since the temperature used
                % in the time-height plots is the adiabatic temperature minus tdiff1(=1). Here are interpolating
                % to get pressure of the temps in LWC time-height array from the adiabatic temp
        labs(2).l='EMM LWC'; 
        
        
        
%         ei=SatVapPress(adiabat(:,3),'goff','liq'); %Pa vapour pressure of EMM adiabat
%         sat=0.622*ei./(adiabat(:,2)-ei); %corresponding MR
%         rhoemm=pemm.*28.97e-3/8.3144./tad;
%         ih=findheight(adiabat(:,2),7.75e4); %pressure where LEM liquid starts to form in dump 7 

    %    ei=SatVapPress(tad,'goff','liq'); %Pa vapour pressure of EMM adiabat
%        sat=0.622*ei./(p_grid-ei); %corresponding MR
 %       rhoemm=p_grid.*28.97e-3/8.3144./tad;
 %       ih=25; %pressure where LEM liquid starts to form in dump 7 
        
%        xdat(3).x = (sat(ih)-sat).*rhoemm; %LWC content assuming vapour input of saturation at this point
%        ydat(3).y = p_grid;         
%        labs(3).l='EMM new CB';   
        
        xdat(3).x = CONDacc2-RAINacc2; %LWC content assuming vapour input of saturation at this point
        ydat(3).y = pacc2;         
        labs(3).l='LEM iwc';   

        xdat(4).x = LWCacc;
        ydat(4).y = pacc;         
        labs(4).l='LEM LWC'; 
        
        
        xdat(5).x =max(TwoD.Q(:,:,2),[],2).*GridDan(1).RHON;

        ydat(5).y = pacc;         
        labs(5).l='LEM max LWC'; 
                
        lor=4;
    
    case 'tracer'
        figname=['Tracer vs Height'];
        xlab=['Concentration (kg m^{-3})'];
    	ylab='Height (km)';

        
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=17;
        
        ixlim=1;
        xlimits=[0 1];
        
        
        
        xdat(1).x = TRACERacc; %tracer value taken from a dump with some criteria for e.g. cloudy points only
        ydat(1).y = (GridDan(1).Z+620)/1000;         
        labs(1).l='LEM tracer'; 
        
        itime=50; %time index for EMM profile to use
        izcb=findheight(GridDan(1).Z+620,vec(1).z(1)*1000); %find height index of EMM cloud base in LEM height grid
        sc=TRACERacc(izcb)/maxALL(emmdat(1).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base
        while isnan(sc)
            izcb=izcb+1;
            sc=TRACERacc(izcb)/maxALL(emmdat(1).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base
        end
           
        xdat(2).x = sc*emmdat(1).qup(:,[50],1);
        ydat(2).y = vec(1).z;         
        labs(2).l='EMM tracer'; 
        
%         
%         xdat(2).x=1e-3*meanselect(emmdat(1).lwc(:,1:60,1),'dat>1');
%         xdat(2).x=1e-3*emmdat(1).lwc(:,20,1);
%        % xdat(2).x = 1e-3*max(emmdat(1).lwc(:,1:60,1),[],2);
%         ydat(2).y = interp1(rhenv(:,3),rhenv(:,2),Temm);         
%         ydat(2).y = interp1(adiabat(:,3)-1,adiabat(:,2),Temm+273.15);  %is minus one since the temperature used
%                 % in the time-height plots is the adiabatic temperature minus tdiff1(=1). Here are interpolating
%                 % to get pressure of the temps in LWC time-height array from the adiabatic temp
%         labs(2).l='EMM LWC'; 
        
       lor=1;    
        
    case 'inc'
        figname=['INC vs Height'];
        xlab=['Number Concentration (m^{-3})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        
        xdat(1).x = INCacc;
        ydat(1).y = (GridDan(1).Z+620)/1000;         
        labs(1).l='LEM mean INC'; 
        
        xdat(1).x=mean(emmdat(2).inczt(:,30:50,1),2);
        ydat(1).y=vec(1).z;

%        xdat(5).x = adiabat(:,4);
%        ydat(5).y = adiabat(:,2);         
%        labs(5).l='EMM'; 
        
        
%        xdat(2).x=1e-3*meanselect(emmdat(1).lwc(:,1:60,1),'dat>1');
        xdat(2).x=mean(emmdat(1).inczt(:,30:50,1),2);
       % xdat(2).x = 1e-3*max(emmdat(1).lwc(:,1:60,1),[],2);
    %    ydat(2).y = interp1(rhenv(:,3),rhenv(:,2),Temm);         
%        ydat(2).y = interp1(adiabat(:,3)-1,adiabat(:,2),Temm+273.15);  %is minus one since the temperature used
                % in the time-height plots is the adiabatic temperature minus tdiff1(=1). Here are interpolating
                % to get pressure of the temps in LWC time-height array from the adiabatic temp
        ydat(2).y=vec(1).z;
        labs(2).l='EMM INC'; 
        
        xdat(3).x = GridDan(1).RHON.*max(sum(TwoD.Q(:,:,7:9),3),[],2);
%        xdat(3).x = INCmaxacc_alltim(1).dat(:,10);
        ydat(3).y = (GridDan(1).Z+620)/1000;
        labs(3).l='LEM max INC'; 
        
        xdat(3).x=mean(emmdat(3).inczt(:,30:50,1),2);
        ydat(3).y=vec(1).z;
        
        
        
%         ei=SatVapPress(adiabat(:,3),'goff','liq'); %Pa vapour pressure of EMM adiabat
%         sat=0.622*ei./(adiabat(:,2)-ei); %corresponding MR
%         rhoemm=pemm.*28.97e-3/8.3144./tad;
%         ih=findheight(adiabat(:,2),7.75e4); %pressure where LEM liquid starts to form in dump 7 

%        ei=SatVapPress(tad,'goff','liq'); %Pa vapour pressure of EMM adiabat
%        sat=0.622*ei./(p_grid-ei); %corresponding MR
%        rhoemm=p_grid.*28.97e-3/8.3144./tad;
%        ih=25; %pressure where LEM liquid starts to form in dump 7 
        
%        xdat(3).x = (sat(ih)-sat).*rhoemm; %LWC content assuming vapour input of saturation at this point
%        ydat(3).y = p_grid;         
%        labs(3).l='EMM new CB';   
        
%        xdat(3).x = CONDacc2-RAINacc2; %LWC content assuming vapour input of saturation at this point
%        ydat(3).y = pacc2;         
%        labs(3).l='LEM iwc';   

%         xdat(4).x = LWCacc;
%        ydat(4).y = pacc;         
%        labs(4).l='LEM LWC'; 
        
        lor=4;  

        
    case 'inc_emm'
        max_mean='Max';
        max_mean='Mean';
        
        tinds=[40:50];
        figname=[max_mean ' INC vs Height for ' num2str(tinds(1)) ' to ' num2str(tinds(end))];
        savename=figname;
%        xlab=['Number Concentration (m^{-3})'];
        xlab=['Number Concentration (kg^{-1})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
                
       for idat=1:length(vec)   
			M = 28*1.67E-27;
			k = 1.38E-23;
			G = 9.81;        
            
			p = emmdat(idat).adiabat(:,2);
			t = emmdat(idat).adiabat(:,3);
			rho=p.*M./k./t;   
            rho2=interp1(emmdat(idat).adiabat(:,1),rho,vec(idir).z*1000); %interpolate onto the vec grid
            
            labs(idat).l=run_name_emm{idat}; 
            switch max_mean
            case 'Mean'                
                xdat(idat).x=mean(emmdat(idat).inczt(:,tinds,1),2)./rho2;
            case 'Max'
                xdat(idat).x=max(emmdat(idat).inczt(:,tinds,1),[],2)./rho2;            
            end
            ydat(idat).y=vec(1).z;
        end
        
	%     xdat(idat+1).x = INCacc;
	%     ydat(idat+1).y = (GridDan(1).Z+620)/1000;         
	%     labs(idat+1).l='LEM mean INC'; 
            lor=4;         
        
    case 'therm_pos'
        figname=['Thermal position vs Height'];
        xlab=['Change in position (km)'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        
        xdat(1).x = thermalwidth(:,3);
        ydat(1).y = thermalwidth(:,2);         
        labs(1).l='EMM thermal'; 

     case 'ncw_emm'
        max_mean='Max';
        max_mean='Mean';
        
        tinds=[40:50];
        figname=[max_mean ' NCW vs Height ' num2str(tinds(1)) ' to ' num2str(tinds(end))];
        
        xlab=['Number Concentration (m^{-3})'];
        xlab=['Number Concentration (kg^{-1})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
    M = 28*1.67E-27;
	k = 1.38E-23;
	G = 9.81;        
        
   for idat=1:length(emmdat) 
		p = emmdat(idat).adiabat(:,2);
		t = emmdat(idat).adiabat(:,3);
		rho=p.*M./k./t;   
        rho2=interp1(emmdat(idat).adiabat(:,1),rho,vec(idir).z*1000); %interpolate onto the vec grid
        rho2=1;
        labs(idat).l=run_name_emm{idat};
        switch max_mean
        case 'Max'
            xdat(idat).x=max(emmdat(idat).ncw(:,30:50,1),[],2)./rho2;
        case 'Mean'
            xdat(idat).x=mean(emmdat(idat).ncw(:,tinds,1),2)./rho2; %convert to #/kg by division by rho
        end
        ydat(idat).y=vec(1).z;
    end
        
        lor=1;         
        
        
           
     case 'lwc_emm'
        figname=['LWC vs Height'];
        xlab=['Number Concentration (m^{-3})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        
   for idat=1:3    
        labs(idat).l=run_name_emm{idat}; 
        xdat(idat).x=1e-3*mean(emmdat(idat).lwc(:,30:50,1),2);
        ydat(idat).y=vec(1).z;
    end
        
        lor=1;  
        
    case 'lwc_3'
        
        figname=['LWC vs Height'];
        xlab=['Concentration (kg m^{-3})'];
        

        idats=[2 10 11];
         for i=1:length(idats)    
            idat=idats(i);
            labs(i).l=[run_name_emm{idat} 'LWC']; 
            xdat(i).x=1e-3*mean(emmdat(idat).lwc(:,30:40,1),2);
            ydat(i).y=vec(idat).z;
        end
        
        xdat(i+1).x = LWCacc;
        ydat(i+1).y = GridDan(1).Z/1000 +0.62;         
        labs(i+1).l='LEM LWC';   
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        
        
    case 'tracer_2'
        
        figname=['tracer vs height'];
        xlab=['Concentration (kg m^{-3})'];
        
        itime=50;
        itime=44;
    
    ivec=10;
        
        izcb=findheight(GridDan(1).Z+620,vec(ivec).z(1)*1000); %find height index of EMM cloud base in LEM height grid
        
        maxTracer=max(TwoD.Q(:,:,10),[],2);
        
        idats=[2 10 11];
        
         for i=1:length(idats)
            idat=idats(i);
       %     sc=TRACERacc(izcb)/maxALL(emmdat(idat).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base
%            while isnan(sc)
%                izcb=izcb+1;
%                sc=TRACERacc(izcb)/maxALL(emmdat(idat).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base
%            end
            

%            sc=maxTracer(izcb)/maxALL(emmdat(idat).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base
            
%            sc=TRACERacc3(1).dat(izcb,10)/maxALL(emmdat(idat).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base

            sc=TRACERmax(1).dat(izcb,10)/maxALL(emmdat(idat).qup(:,itime,1)); %scale factor so that EMM tracer equals LEM at EMM cloud base
            
        %    xdat(i).x = sc*mean(emmdat(idat).qup(:,[50:60],1),2);
            
            xdat(i).x = sc*mean(emmdat(idat).qup(:,[40:44],1),2);
        
            labs(i).l=[run_name_emm{idat}]; 
            ydat(i).y=vec(idats(i)).z;
        end
%         
%        xdat(i+1).x = TRACERacc3(1).dat(:,10); %tracer value taken from a dump with some criteria for e.g. cloudy points only
%        ydat(i+1).y = (GridDan(1).Z+620)/1000;         
%        labs(i+1).l='LEM tracer'; 
        
    for idat2=5:12
%        xdat(idat2-4+i).x = TRACERacc3(1).dat(:,idat2); %tracer value taken from a dump with some criteria for e.g. cloudy points only
        xdat(idat2-4+i).x = TRACERmax(1).dat(:,idat2); %tracer value taken from a dump with some criteria for e.g. cloudy points only        
        ydat(idat2-4+i).y = (GridDan(1).Z+620)/1000;         
        labs(idat2-4+i).l=num2str(idat2); 
    end

%         xdat(idat+1).x = maxTracer %tracer value taken from a dump with some criteria for e.g. cloudy points only
%         ydat(idat+1).y = (GridDan(1).Z+620)/1000;         
%         labs(idat+1).l='LEM max tracer'; 
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
    case 'iwc_emm'
        figname=['IWC vs Height'];
        xlab=['Concentration (kg m^{-3})'];
        
        ylab='Height (km)';
        iydir=1; %normal direction as using height
        
        izlim=1;
        zmin=0;
        zmax=20;
        
        
   for idat=1:length(vec)    
        labs(idat).l=run_name_emm{idat}; 
        xdat(idat).x=1e-3*mean(emmdat(idat).iwczt(:,50:60,1),2);
        ydat(idat).y=vec(1).z;
    end
    
    xdat(idat+1).x = IWCacc;
    ydat(idat+1).y = (GridDan(1).Z+620)/1000;         
    labs(idat+1).l='LEM mean IWC'; 
        lor=4;             

        
        
        
    end

    
%    xdat(2).x = f*sum(icediagsALL(3).i(:,1,[37:42]),3)/npess2(3);    
  %  xdat(2).x = sat;

    
	%	labs(2).l='Vapour mixing ratio (w/out alteration)';
    %    labs(2).l=['Ice saturation mixing ratio'];
	savename=[figname];
    titlenam=figname;
        
         
   
         
    case 56
    idir=1;
    
    zmin=15;
    zmax=20;
    
   
	ylab='Height (km)';
    
    
    logflag=0;
    
    i55='total';
    i55='nn';
    i55='mean';
  %  i55='ascent_rate';
    
     xlims=0;
	 lor=1;
    
    switch i55
    case 'total'
        figname=['Depleted total water points'];
        xlab=['Sum of deficit below 5 ppmv of points with tot water LT 5 ppmv (ppmv)'];
        xdat(1).x = dq_tot(idir).d(:,itdehyd,2)*length(GridDan(idir).Y1);
        labs(1).l='Total';
    case 'nn'
        figname=['Depleted total water points'];
        xlab=['Distance covered by points w/ tot water LT 5 ppmv (km)'];
        xdat(1).x = nn(idir).n(:,itdehyd,2)*(GridDan(1).Y1(2)-GridDan(1).Y1(1))/1000;
        labs(1).l='Distance';
    case 'mean'
        figname=['Simple lifting model vapour mixing ratio after ' num2str(tend*30) ' days'];
        xlab=['Mixing Ratio (ppmv)'];
        for iq=1:13
            xdat(iq).x = qq(:,iq);
            labs(iq).l=[num2str(Nevs(iq))]; 
            ydat(iq).y = zzf; 
            
        end
         xlims=1;
%         xlimits=[5.5 6.7];
         xlimits=[4.75 5.04];
         
         lor=2;
         
    case 'ascent_rate'     
        figname=['Simple Lifting Model Ascent Rate'];
        xlab=['Ascent Rate (km month^{-1})'];
        xdat(1).x = ww;
        labs(1).l=['Simple model']; 
        ydat(1).y = zzf; 
        
        zw(1)=14;
		wref(1)=-0.08;
		zw(2)=16.6;
		wref(2)=0.22;
		zw(3)=16.8;
		wref(3)=0.1; %0.1
		zw(4)=17;
		wref(4)=0.05;
		zw(5)=19;
		wref(5)=-0.01;
        
        wref=wref*1e-5 * 3600*24*30 * wfactor; %convert from cm/s to km/month
        
        xdat(2).x = wref;
        labs(2).l=['Original profile']; 
        ydat(2).y = zw; 
            
         xlims=0;
         xlimits=[4.4 5.2];
         
    end
    
%    xdat(2).x = f*sum(icediagsALL(3).i(:,1,[37:42]),3)/npess2(3);    
  %  xdat(2).x = sat;

    
	%	labs(2).l='Vapour mixing ratio (w/out alteration)';
    %    labs(2).l=['Ice saturation mixing ratio'];
	savename=[figname '_t=' num2str(itdehyd)];
    titlenam=figname;
        
         
         nmark=0;
         
   case 55
    idir=1;
    
    zmin=14;
    zmax=20;
    
   
	ylab='Height (km)';
    
    savename=figname;
    
    logflag=0;
    
    i55='total';
    i55='nn';
    i55='mean';
    
     xlims=0;
	 lor=1;
    
    switch i55
    case 'total'
        figname=['Depleted total water points'];
        xlab=['Sum of deficit below 5 ppmv of points with tot water LT 5 ppmv (ppmv)'];
        xdat(1).x = dq_tot(idir).d(:,itdehyd,2)*length(GridDan(idir).Y1);
        labs(1).l='Total';
    case 'nn'
        figname=['Depleted total water points'];
        xlab=['Distance covered by points w/ tot water LT 5 ppmv (km)'];
        xdat(1).x = nn(idir).n(:,itdehyd,2)*(GridDan(1).Y1(2)-GridDan(1).Y1(1))/1000;
        labs(1).l='Distance';
    case 'mean'
        figname=['Depleted total water points'];
        xlab=['Mean of points w/ tot water LT 5 ppmv (ppmv)'];
        xdat(1).x = 5 - dq_tot(idir).d(:,itdehyd,2)*length(GridDan(idir).Y1)./nn(idir).n(:,itdehyd,2);
        labs(1).l='Mean';
         xlims=1;
         xlimits=[3.6 5.2];
         lor=2;
    end
    
%    xdat(2).x = f*sum(icediagsALL(3).i(:,1,[37:42]),3)/npess2(3);    
  %  xdat(2).x = sat;

    
	for idat=1:1
        ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
	end
	
		
	%	labs(2).l='Vapour mixing ratio (w/out alteration)';
    %    labs(2).l=['Ice saturation mixing ratio'];
	
        
         
         nmark=0;
         

         
   case 54
    idir=1;
    
    zmin=6;
    zmax=19;
    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
    
    
    
    
    figname=['Initial vapour and ice saturation mixing ratios'];
    savename=figname;
    
    logflag=1;
    
    T=tempLES(GridDan(idir)); %K
	ei=SatVapPress(T,'goff','ice'); %Pa
	P=GridDan(idir).PREFN; %Pa
	sat=f*0.622*ei./(P-ei);

    xdat(1).x = f*sum(icediagsALL(1).i(:,1,[37:42]),3)/npess2(idir);
%    xdat(2).x = f*sum(icediagsALL(3).i(:,1,[37:42]),3)/npess2(3);    
    xdat(2).x = sat;

    
	for idat=1:2
        ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
	end
	
		labs(1).l='Vapour mixing ratio (model input)';
	%	labs(2).l='Vapour mixing ratio (w/out alteration)';
        labs(2).l=['Ice saturation mixing ratio'];
	
         xlims=1;
         xlimits=([4.8 5.8]);
         xlimits=([4.5 1000]);
         
         nmark=0;
         
         lor=1;
         
   case 53
    idir=1;
    
    zmin=0;
    zmax=3;
    
    xlab=['Potential Temperature (K)'];
	ylab='Height (km)';
       
    figname=['Potential tempertaure percentiles (each step represents one grid point)'];

    savename=figname;
    
    logflag=0;
    
    pr=100/length(GridDan(1).Y1); %min prctile for one gridpoint
    npr=5;
    
    thref=repmat(GridDan(1).THREF,[1 length(GridDan(1).Y1)]);
    th=thref+TwoD.TH1;
    thav=mean(thref+TwoD.TH1,2);
    
    prcs=[50 100:-pr:100-npr*pr];
    for iprc=1:length(prcs)
        xdat(iprc).x = prctile(th(2:end,:)',prcs(iprc));
        ydat(iprc).y = GridDan(idir).Z(2:end)/1000-0.62 + add_ground_height; 
     %   labs(iprc).l=[num2str( (100-prcs(iprc))/100*(GridDan(1).Y1(end)-GridDan(1).Y1(1) )/1000, '%3.2f'  ) ' km'];
%        labs(iprc).l=[num2str( prcs(iprc) ) ' th percentile'];
        labs(iprc).l=num2str(iprc-1);
    end
    labs(1).l='median';

	
         xlims=0;
         xlimits=([300 332]);
             
         nmark=0;
         
         lor=1;
         
         titlenam=figname;
         
   case 52
    zmin=10;
    zmax=22;
    
    xlab=['Flux of cloud ice (kg m^{-2} s^{-1})'];
	ylab='Height (km)';
    
    figname=['Flux of cloud ice (kg m^{-2} s^{-1})'];
    savename=figname;
    
    logflag=0;
    
	for idat=1:4
        ydat(idat).y = GridDan(1).Z/1000 + 0.62;
	end

    labs(1).l=runName(1).nam;
    labs(2).l=runName(2).nam;
    labs(3).l='Control ice, CCN=960 cm^{-3} updraught';
    labs(4).l='Control updraught, CCN=960 cm^{-3} ice';
    
    xdat(1).x = mean(icediagsALL(1).i(:,dumprange,87),2).*mean(icediagsALL(1).i(:,dumprange,137),2).*GridDan(1).RHON(:)/npess2(1),GridDan(1).Z(1:200)+620
    xdat(2).x = mean(icediagsALL(2).i(:,dumprange,87),2).*mean(icediagsALL(2).i(:,dumprange,137),2).*GridDan(1).RHON(:)/npess2(1),GridDan(1).Z(1:200)+620
    xdat(3).x = mean(icediagsALL(1).i(:,dumprange,87),2).*mean(icediagsALL(2).i(:,dumprange,137),2).*GridDan(1).RHON(:)/npess2(1),GridDan(1).Z(1:200)+620
    xdat(4).x = mean(icediagsALL(2).i(:,dumprange,87),2).*mean(icediagsALL(1).i(:,dumprange,137),2).*GridDan(1).RHON(:)/npess2(1),GridDan(1).Z(1:200)+620

         xlims=0;
         xlimits=([-1e7 1e7]);
         
         nmark=0;
         
         lor=2;
         
   case 51
    zmin=14.5;
    zmax=22;
    
    xlab=['Change in Mixing Ratio (ppmv)'];
	ylab='Height (km)';
    
    figname=['Change in Mixing Ratios'];
    savename=figname;
    
    logflag=0;
    
	for idat=1:2
        ydat(idat).y = GridDan(1).Z/1000 + 0.62;
	end

    labs(1).l='Change in Vapour';
    labs(2).l='Change in Ice';
    
    init=repmat(sum(icediagsALL(idir).i(:,1,[40:42]),3),[1 length(dumprange)]);
    changeice=f*( sum(icediagsALL(idir).i(:,dumprange,[40:42]),3) - init )/npes;
    
    init=repmat(sum(icediagsALL(idir).i(:,1,[37]),3),[1 length(dumprange)]);
    changevap=f*( sum(icediagsALL(idir).i(:,dumprange,[37]),3) - init )/npes;
    

    xdat(1).x = changevap(:,62);
    xdat(2).x = changeice(:,62);
    
%		labs(1).l='Time = 01:10 UTC';
%		labs(1).l='CCN = 240 cm^{-3}';
%		labs(2).l='CCN = 960 cm^{-3}';
	
         xlims=0;
         xlimits=([-1e7 1e7]);
         
         nmark=0;
         
         lor=2;
         
    case 50
        
    iz=132; %16.15km
    
    xlab=['Distance (km)'];
	ylab='LNB (km)';
    
    figname=['LNB_16.15km'];
    savename=figname;
    
    logflag=0;
    
	for idat=1:1
        xdat(idat).x = GridDan(idat).Y1/1000;
        ydat(idat).y = lnb2d(iz,:);
        labs(idat).l=runName(idat).nam;
	end
	
%		labs(1).l='Time = 01:10 UTC';
%		labs(1).l='CCN = 240 cm^{-3}';
%		labs(2).l='CCN = 960 cm^{-3}';
	
         xlims=0;
         xlimits=([-1e7 1e7]);
         
         nmark=0;
         
         lor=2;
         
    case 49
    t1=25.1667;
    t1=22.5;
    it=findheight(GridDan(idir).t+3,t1);
        
    zmin=14;
    zmax=22;
    
    xlab=['Total Water Mixing Ratio (ppmv)'];
	ylab='Height (km)';
    
    figname=['TotalWater'];
    savename=figname;
    
    logflag=0;
    
   
	for idat=1:4
        idir=idat;
        ad_calcs4timeseries;
        xdat(idat).x = f*cumsum(topdown(izmin:izmax,1:it),2)/npess2(idir);
        ydat(idat).y = GridDan(idir).Z(izmin:izmax)/1000 + add_ground_height; 
        labs(idat).l=runName(idat).nam;
	end
	
%		labs(1).l='Time = 01:10 UTC';
%		labs(1).l='CCN = 240 cm^{-3}';
%		labs(2).l='CCN = 960 cm^{-3}';
	
         xlims=1;
         xlimits=([-1e7 1e7]);
         
         nmark=0;
         
         lor=2;
         
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 48
    idir=3;
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
    logflag=0;
    
	
    
%     xdat(1).x = f*sum(icediagsALL(1).i(:,1,[37:42]),3)/npess2(1);
% %     xdat(2).x = f*sum(icediagsALL(1).i(:,it1,[37:42]),3)/npess2(idir);   %f*sum(icediagsALL(idir+1).i(:,it,[37:42]),3)/npess2(idir+1);
% %      xdat(3).x = f*sum(icediagsALL(1).i(:,it2,[37:42]),3)/npess2(idir);
%      
%       xdat(2).x = f*sum(icediagsALL(1).i(:,it1,[37:42]),3)/npess2(1);
%       xdat(3).x = f*sum(icediagsALL(2).i(:,it1,[37:42]),3)/npess2(2);
%       xdat(4).x = f*sum(icediagsALL(3).i(:,it1,[37:42]),3)/npess2(3);
% 
%     
% 	
% 	
%     
%     
% 	
% 		labs(1).l='Initial';
%         
% %         labs(2).l='Final';
% %         labs(2).l=t1str;        
% % 
% %         labs(3).l='Final CCN 960 cm^{-3}';
% %         labs(3).l=t2str;
%         
%         
%         labs(2).l=[t1str ' 250m res tot'];
% 		labs(3).l=[t1str ' 500m res tot'];
% 		labs(4).l=[t1str ' 1km res tot'];
%         
%         
%      xdat(5).x = f*sum(icediagsALL(1).i(:,it1,[37]),3)/npess2(1);
%       xdat(6).x = f*sum(icediagsALL(2).i(:,it1,[37]),3)/npess2(2);
%       xdat(7).x = f*sum(icediagsALL(3).i(:,it1,[37]),3)/npess2(3);
% 
%     
% 
%     
%      
%         labs(5).l=[t1str ' 250m res vap'];
% 		labs(6).l=[t1str ' 500m res vap'];
% 		labs(7).l=[t1str ' 1km res vap'];
    

      xdat(1).x = f*sum(icediagsALL(1).i(:,1,[37:42]),3)/npess2(1); %initial total water 
      
      xdat(2).x = f*sum(icediagsALL(1).i(:,it1,[37:42]),3)/npess2(1);   %total water for 1st case
      xdat(3).x = f*sum(icediagsALL(idir).i(:,it1,[37:42]),3)/npess2(idir);

    
	
	
    
    
	
		labs(1).l='Initial';
        labs(2).l='1 km tot';  %runName(1).nam;    %[t1str ' Control total water'];
		labs(3).l='2 km tot';  %runName(idir).nam;   %[t1str ' CCN 960 cm^{-3} tot'];

        labs(2).l='1 km tot';  %runName(1).nam;    %[t1str ' Control total water'];
		labs(3).l=[runName(idir).nam ' tot'];   %[t1str ' CCN 960 cm^{-3} tot'];

        
     xdat(4).x = f*sum(icediagsALL(1).i(:,it1,[37]),3)/npess2(1);
     xdat(5).x = f*sum(icediagsALL(idir).i(:,it1,[37]),3)/npess2(idir);

        labs(4).l='1 km vap'; %runName(1).nam;    %[t1str ' Control total water'];
		labs(5).l='2 km vap'; %runName(idir).nam;   %[t1str ' CCN 960 cm^{-3} tot'];
        
        labs(4).l='1 km vap';  %runName(1).nam;    %[t1str ' Control total water'];
		labs(5).l=[runName(idir).nam ' vap'];   %[t1str ' CCN 960 cm^{-3} tot'];
        
    
    T=tempLES(GridDan(idir)); %K
	ei=SatVapPress(T,'goff','ice'); %Pa
	P=GridDan(idir).PREFN; %Pa
	sat=f*0.622*ei./(P-ei);
    
  %  xdat(6).x = sat;
  %  labs(6).l=['Ice sat MR'];
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    
            
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
            
            rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air1=flipud(air1);
            air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air2=flipud(air2);
   
            i0=find(xdat(idat).x>6.5);            
%            i0=find(xdat(idat).x>8.5);            

%            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
            
             
%            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
            tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
            tot(idat).t=flipud(tot(idat).t);
            
             
		end
        
        
        
         xlims=0;
         xlimits=([4.8 5.4]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
       %  xlimits=([0 20]);

         %xlimits=[-0.1 0.4];
         

icum=1;  %flag to say to do normal means and not TTL cumulative means.
if icum==1
         
         
            clear xdat ydat labs
                  %  zmin=15;
                  %5  zmax=18.7+0.62;
                  
                  Y1=diff(GridDan(1).Y1([1 end]));                  
                  Y2=diff(GridDan(2).Y1([1 end]));
                  
                  %only for 3d
                  fact=Y2*1000/Y1^2; %conversion factor to multiply 2-d result by for fair comparison (assumes a 1 km length in 3-D)
                  
%                  fact=Y2*1000/Y1; %factor assuming that 2d covers full 300 km of 3d domain

                  
                xlims=0;  
                xdat(1).x=tot(2).t * diff( GridDan(1).Y1([1 end]) ) ./air1;  %tot
                xdat(1).x=tot(4).t * diff( GridDan(1).Y1([1 end]) ) ./air1;  %vapour

                
                %%%  2d
                xdat(2).x=tot(3).t * diff( GridDan(2).Y1([1 end]) ) ./air2;   %tot
                xdat(2).x=tot(5).t * diff( GridDan(2).Y1([1 end]) ) ./air2;   %vapour
                
                %%%% 3d
%                xdat(2).x=tot(3).t * diff( GridDan(2).Y1([1 end]) ) ./air2 * fact; %%%%  only use fact for 3d  %%%%%%%%

                xdat(1).x(end+1)=0;
                xdat(2).x(end+1)=0;
                
                ydat(1).y=GridDan(1).Z(ih1:ih2+1)/1000 + add_ground_height; 
                ydat(2).y=GridDan(2).Z(ih1:ih2+1)/1000 + add_ground_height; 
                
                labs(1).l = '1 km';
                labs(2).l = '2 km';                                
        
                labs(1).l = '3d';
                labs(2).l = '2d (scaled assuming 1 km in 3d)';                                

                labs(1).l = '1 km';
                labs(2).l = runName(2).nam;      
                
                
                xlab='Cumulative total water reduction (kg m^{-1})';
                xlab='Mean total water MR change from 17 km downwards (ppmv)';
                
                        figname=['Cumulative total water'];
                        savename=figname;

end                
    
% 	
%          
         nmark=0;
         
         lor=1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 487
    idir=1;
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    
    
            
      
    D=150e3;
    
    iifeature=30; %i index of feature
    ijfeature=15; %j index of feature 
    
     xfeature=0e3; %i index of feature
     yfeature=-75e3; %j index of feature 
   

%    xfeature=-100e3; %i index of feature
%    yfeature=150e3; %j index of feature 
%    yfeature=-125e3; %j index of feature 

    %here y and x refer to as appear on wrap_slice plots (first index in ThreeD refers to y axis
    
    
    [yinds,xinds]=find_inds_feature(GridDan(1),xfeature,yfeature,D);

    
    [iav iav2]=findheight( GridDan(idir).Y1, GridDan(idir).Y1(1)+D/2 , GridDan(idir).Y1(end)-D/2  );
    
    [iav iav2]=findheight( GridDan(idir).Y1, GridDan(idir).Y1(1)+D/2 , GridDan(idir).Y1(end)-D/2  );
    
    inds=[2:iav iav2:length(GridDan(idir).Y1)-1];
    
    [sx sy]=size(ThreeDDan(1).Q);
    [sxB syB]=size(ThreeDDan(idir).Q);
    
    inds=[1:76];
  

    init = f*sum(icediagsALL(1).i(:,1,[37]),3)/npess2(1); %initial total water profile

	idat=1; %don't change this
%             


    idir=1;
      for iz=1:length(GridDan(1).Z)

          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
%          xinds=[152-36:152 1:36]; yinds=[152-36:152 1:36];
         % xinds=[1:152]; yinds=[1:152];
          
          xdat(idat).x(iz,1) = f*  squeeze( mean( mean( ThreeDDan(idir).Q(yinds(2:end-1),xinds(2:end-1),iz) ) )  )  - init(iz); 
      
      end
      labs(idat).l=[runName(idir).nam ' vap']; 
      idat=idat+1;

      
      idir=2;
        for iz=1:length(GridDan(1).Z)
          idir=2;
          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
          xdat(idat).x(iz,1) = f*  squeeze( mean( mean( ThreeDDan(idir).Q(yinds(2:end-1),xinds(2:end-1),iz) ) )  )  - init(iz); 
      
        end
    
%      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(1).Q(yinds,xinds,:) ) )  )  - init;     
      labs(idat).l=[runName(idir).nam ' vap']; 
      idat=idat+1;

      idir=3;
      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) ) )  )  - init; 
      labs(idat).l=[runName(idir).nam ' vap'];
      idat=idat+1;
      
  ice=1;  
  switch ice
  case 1
      idir=1;
      for iz=1:length(GridDan(idir).Z)
%          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz) + totice_44(idir).dat(2:end-1,2:end-1,iz));
          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
          xdat(idat).x(iz,1) = f*  squeeze( mean( mean( ThreeDDan(idir).Q(yinds(2:end-1),xinds(2:end-1),iz) + totice_44(idir).dat(yinds(2:end-1),xinds(2:end-1),iz) ) )  )  - init(iz); 
      
      end
      labs(idat).l=[runName(idir).nam ' tot']; 
      idat=idat+1;
      
      
      idir=2
      for iz=1:length(GridDan(idir).Z)
%          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz) + totice_44(idir).dat(2:end-1,2:end-1,iz));
          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
          xdat(idat).x(iz,1) = f*  squeeze( mean( mean( ThreeDDan(idir).Q(yinds(2:end-1),xinds(2:end-1),iz) + totice_44(idir).dat(yinds(2:end-1),xinds(2:end-1),iz) ) )  )  - init(iz); 
      
      end
      labs(idat).l=[runName(idir).nam ' tot']; 
      idat=idat+1;
      
      idir=3;
      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) + totice_44(idir).dat(2:end-1,2:end-1,:) ) )  )  - init; 
      labs(idat).l=[runName(idir).nam ' tot']; 
      idat=idat+1;
      
  end %switch ice
  
  
      
%       xdat(idat).x = f*  squeeze( mean( mean( ThreeD(1).Q ) )  )  - init; 
%       labs(idat).l=['3D vap']; 
%       idat=idat+1;
% %       
%       xdat(idat).x = f*  squeeze( mean( mean( ThreeD(1).Q ) )  )  - init; 
%       labs(idat).l=['3D vap']; 
%       idat=idat+1;
%       
%       xdat(idat).x = f*squeeze(mean( mean(tot_water44 ) )) - init; 
%       labs(idat).l=['3D tot']; 
%       idat=idat+1;
      
      
     
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
%    zmax=20.7+0.62;

    zmax=18+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    ih2=findheight(GridDan(1).Z+620,17.05e3);
    ih1=findheight(GridDan(1).Z+620,16.05e3);
  %  ih2=findheight(GridDan(1).Z+620,16.05e3);
  %  ih1=findheight(GridDan(1).Z+620,15.05e3);
    
            
%         for idat=1:length(xdat)
%             ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
%             
%             rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
%             dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
%             
%             air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
%             air1=flipud(air1);
%             air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
%             air2=flipud(air2);
%    
%             i0=find(xdat(idat).x>6.5);            
% %            i0=find(xdat(idat).x>8.5);            
% 
% %            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
%             
%              
% %            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
%             tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
%             tot(idat).t=flipud(tot(idat).t);
%             
%             tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
%             
%              
% 		end
        
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + 0.62; 
            
            rho=GridDan(idir).RHON(ih1:ih2); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=mean( dz.*rho );
   
           % i0=find(xdat(idat).x>6.5);            

            tot(idat).t=mean( xdat(idat).x(ih1:ih2) .*dz.*rho )   ./ air1;
            
             
		end
        
        
        
         xlims=1;
         xlimits=([-0.5 4]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 4876 %general 3D vapour and total water plot comparison and averaging
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    idir=1;
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    
    
            
      
   

    init = f*sum(icediagsALL(1).i(:,1,[37]),3)/npess2(1); %initial total water profile

	idat=1; %don't change this
%             

    idirs=[1:4];
    Ldir=length(idirs);
    idat=1;
    
    vap=2;
    switch vap
    case 1
      
      for idir2=1:Ldir;
          idir=idirs(idir2);
          xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) ) )  )  - init; 
          labs(idat).l=[runName(idir).nam ' vap'];
          area(idat).dat = diff( GridDan(idir).X1([end 1]) ) * diff( GridDan(idir).Y1([end 1]) ); %area of domain in m^2
          idat=idat+1;          
      end
      
      case 2
      
      for idir2=1:Ldir;
          idir=idirs(idir2);
          xdat(idat).x = f*  squeeze( mean( mean( sum(ThreeDDan(idir).Q(2:end-1,2:end-1,:,1),4) ) )  )  - init; 
          labs(idat).l=[runName(idir).nam ' vap'];
          area(idat).dat = diff( GridDan(idir).X1([end 1]) ) * diff( GridDan(idir).Y1([end 1]) ); %area of domain in m^2
          idat=idat+1;          
      end
      
  end
      
  ice=2;  
  switch ice
  case 1
      
      for idir2=1:Ldir;                  
          idir=idirs(idir2);
          xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) + totice_44(idir).dat(2:end-1,2:end-1,:) ) )  )  - init; 
          labs(idat).l=[runName(idir).nam ' tot']; 
          area(idat).dat = diff( GridDan(idir).X1([end 1]) ) * diff( GridDan(idir).Y1([end 1]) ); %area of domain in m^2
          idat=idat+1;      
      end   
      
  case 2
      for idir2=1:Ldir;
          idir=idirs(idir2);
          xdat(idat).x = f*  squeeze( mean( mean( sum(ThreeDDan(idir).Q(2:end-1,2:end-1,:,1:4),4) ) )  )  - init; 
          labs(idat).l=[runName(idir).nam ' tot'];
          area(idat).dat = diff( GridDan(idir).X1([end 1]) ) * diff( GridDan(idir).Y1([end 1]) ); %area of domain in m^2
          idat=idat+1;          
      end
      
      
  end %switch ice                           
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
%    zmax=20.7+0.62;

    zmax=20+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
 %   ih2=findheight(GridDan(1).Z+620,17e3);
 %   ih1=findheight(GridDan(1).Z+620,15.05e3);
 %   ih1=findheight(GridDan(1).Z+620,14e3);
%    ih2=findheight(GridDan(1).Z+620,17.05e3);
    ih1=findheight(GridDan(1).Z+620,16.05e3);
%    ih2=findheight(GridDan(1).Z+620,16.05e3);
    ih1=findheight(GridDan(1).Z+620,15.9e3);
%    ih2=length(GridDan(1).Z); %index at top of the domain
    
 %   ih1=135; %index for 380 K level in Grid.THREF (actually 379.6 K)
    
            
%         for idat=1:length(xdat)
%             ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
%             
%             rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
%             dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
%             
%             air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
%             air1=flipud(air1);
%             air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
%             air2=flipud(air2);
%    
%             i0=find(xdat(idat).x>6.5);            
% %            i0=find(xdat(idat).x>8.5);            
% 
% %            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
%             
%              
% %            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
%             tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
%             tot(idat).t=flipud(tot(idat).t);
%             
%             tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
%             
%              
% 		end
        
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + 0.62; 
            
            rho=GridDan(idir).RHON(ih1:ih2); 
            dz=diff(GridDan(idir).Z(ih1-1:ih2));
            
            air1=mean( dz.*rho );
   
            tot(idat).t=mean( xdat(idat).x(ih1:ih2) .*dz.*rho )   ./ air1;
            
            %total mass increase at each level (vapour or total water)
            mass(idat).dat=sum(xdat(idat).x(ih1:ih2)/f.*area(idat).dat.*dz.*rho);  %total mass increase in kg
            
             
		end
        
        
        
         xlims=1;
         xlimits=([-0.5 4]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 4874 %high low CCN 3D
    idir=1;
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    
    
            
      
    D=150e3;
    
    iifeature=30; %i index of feature
    ijfeature=15; %j index of feature 
    
     xfeature=0e3; %i index of feature
     yfeature=-75e3; %j index of feature 
   

%    xfeature=-100e3; %i index of feature
%    yfeature=150e3; %j index of feature 
%    yfeature=-125e3; %j index of feature 

    %here y and x refer to as appear on wrap_slice plots (first index in ThreeD refers to y axis
    
    
    [yinds,xinds]=find_inds_feature(GridDan(1),xfeature,yfeature,D);

    
    [iav iav2]=findheight( GridDan(idir).Y1, GridDan(idir).Y1(1)+D/2 , GridDan(idir).Y1(end)-D/2  );
    
    [iav iav2]=findheight( GridDan(idir).Y1, GridDan(idir).Y1(1)+D/2 , GridDan(idir).Y1(end)-D/2  );
    
    inds=[2:iav iav2:length(GridDan(idir).Y1)-1];
    
    [sx sy]=size(ThreeDDan(1).Q);
    [sxB syB]=size(ThreeDDan(idir).Q);
    
    inds=[1:76];
  

    init = f*sum(icediagsALL(1).i(:,1,[37]),3)/npess2(1); %initial total water profile

	idat=1; %don't change this
%             

    idir=1;
      for iz=1:length(GridDan(1).Z)

          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
%          xinds=[152-36:152 1:36]; yinds=[152-36:152 1:36];
         % xinds=[1:152]; yinds=[1:152];
         xinds=1:length(GridDan(idir).X1);
         yinds=1:length(GridDan(idir).Y1);
          
        xdat(idat).x(iz,1) = f*  squeeze( mean( mean( ThreeDDan(idir).Q(yinds(2:end-1),xinds(2:end-1),iz) ) )  )  - init(iz); 
      
      end
      labs(idat).l=[runName(idir).nam ' vap']; 
      idat=idat+1;     

      
      idir=2;
      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) ) )  )  - init; 
      labs(idat).l=[runName(idir).nam ' vap'];
      idat=idat+1;
      
      idir=3;
      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) ) )  )  - init; 
      labs(idat).l=[runName(idir).nam ' vap'];
      idat=idat+1;
      
  ice=1;  
  switch ice
  case 1
      idir=1;
      for iz=1:length(GridDan(idir).Z)
%          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz) + totice_44(idir).dat(2:end-1,2:end-1,iz));
          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
          xinds=1:length(GridDan(idir).X1);
          yinds=1:length(GridDan(idir).Y1);
          
          xdat(idat).x(iz,1) = f*  squeeze( mean( mean( ThreeDDan(idir).Q(yinds(2:end-1),xinds(2:end-1),iz) + totice_44(idir).dat(yinds(2:end-1),xinds(2:end-1),iz) ) )  )  - init(iz); 
      
      end
      labs(idat).l=[runName(idir).nam ' tot']; 
      idat=idat+1;
                  
      
      idir=2;
      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) + totice_44(idir).dat(2:end-1,2:end-1,:) ) )  )  - init; 
      labs(idat).l=[runName(idir).nam ' tot']; 
      idat=idat+1;
      
      idir=3;
      xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(idir).Q(2:end-1,2:end-1,:) + totice_44(idir).dat(2:end-1,2:end-1,:) ) )  )  - init; 
      labs(idat).l=[runName(idir).nam ' tot']; 
      idat=idat+1;
      
  end %switch ice
  
  
      
%       xdat(idat).x = f*  squeeze( mean( mean( ThreeD(1).Q ) )  )  - init; 
%       labs(idat).l=['3D vap']; 
%       idat=idat+1;
% %       
%       xdat(idat).x = f*  squeeze( mean( mean( ThreeD(1).Q ) )  )  - init; 
%       labs(idat).l=['3D vap']; 
%       idat=idat+1;
%       
%       xdat(idat).x = f*squeeze(mean( mean(tot_water44 ) )) - init; 
%       labs(idat).l=['3D tot']; 
%       idat=idat+1;
      
      
     
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
%    zmax=20.7+0.62;

    zmax=18+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    ih2=findheight(GridDan(1).Z+620,17.05e3);
    ih1=findheight(GridDan(1).Z+620,16.05e3);
    ih2=findheight(GridDan(1).Z+620,16.05e3);
    ih1=findheight(GridDan(1).Z+620,15.05e3);
    
            
%         for idat=1:length(xdat)
%             ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
%             
%             rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
%             dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
%             
%             air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
%             air1=flipud(air1);
%             air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
%             air2=flipud(air2);
%    
%             i0=find(xdat(idat).x>6.5);            
% %            i0=find(xdat(idat).x>8.5);            
% 
% %            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
%             
%              
% %            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
%             tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
%             tot(idat).t=flipud(tot(idat).t);
%             
%             tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
%             
%              
% 		end
        
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + 0.62; 
            
            rho=GridDan(idir).RHON(ih1:ih2); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=mean( dz.*rho );
   
           % i0=find(xdat(idat).x>6.5);            

            tot(idat).t=mean( xdat(idat).x(ih1:ih2) .*dz.*rho )   ./ air1;
            
             
		end
        
        
        
         xlims=1;
         xlimits=([-0.5 4]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 4872
    idir=1;
       
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
   
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC    
    
    xlab=['Temperature change (K)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Temp change'];

    savename=figname;
    
 
    logflag=0;
    
    
        

	idat=1; %don't change this
    
%       xdat(idat).x = f*  squeeze( mean( mean( ThreeDDan(1).Q(yinds,xinds,:) ) )  )  - init; 
%       labs(idat).l=runName(1).nam; 
%       idat=idat+1;
%     
%    init=repmat( icediagsALL(1).i(:,1,246), [1 size(icediagsALL(1).i,2)]  );
    
P=GridDan(1).PREFN;
	init=icediagsALL(1).i(:,1,246) ./(1e5./P).^0.286 ;      
%     
%       xdat(idat).x = icediagsALL(1).i(:,44,246)./(1e5./P).^0.286 - init; 
%       labs(idat).l=[runName(1).nam 'icdiags']; 
%       idat=idat+1;
      
      
      
      
%       xdat(idat).x = squeeze(mean(mean(T,2),3)) - init; 
%       labs(idat).l=[runName(1).nam 'ThreeD']; 
%       idat=idat+1;


      
      D=300e3;
    %  D=150e3;
      idir=1;
      [T]=temp_from_press_and_th(GridDan(idir),ThreeDDan(idir).TH1,ThreeDDan(idir).P);
      for iz=1:length(GridDan(idir).Z)
%          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz) + totice_44(idir).dat(2:end-1,2:end-1,iz));
          [mx mi]=maxALL(ThreeDDan(idir).Q(2:end-1,2:end-1,iz));
          med=median(median( ThreeDDan(idir).Q(2:end-1,2:end-1,iz,1) ));
          
          
          xfeature=GridDan(idir).X1(mi(2));
          yfeature=GridDan(idir).Y1(mi(1));                    
          [yinds,xinds]=find_inds_feature(GridDan(idir),xfeature,yfeature,D);
          
         % xdat(idat).x(iz,1) = squeeze( mean( mean( T(iz,yinds(2:end-1)-1,xinds(2:end-1)-1)  ) )  )  - init(iz); 
          %xdat(idat).x(iz,1) = squeeze(  T( iz , mi(1),mi(2) ) - init(iz) ); 
          Tiz=T(iz,:,:);
          ivap=find( sum( ThreeDDan(idir).Q(2:end-1,2:end-1,iz,:) , 4) < med*1.05 ); %sum for total water
          xdat(idat).x(iz,1) = squeeze( mean( Tiz(ivap)  ))  - init(iz);
      
      end
      labs(idat).l=[runName(idir).nam]; 
      idat=idat+1;            
      
%       idir=2;
%       [T]=temp_from_press_and_th(GridDan(idir),ThreeDDan(idir).TH1,ThreeDDan(idir).P);    
%       xdat(idat).x = squeeze( mean( mean( T,3 ),2 )  )  - init; 
%       labs(idat).l=[runName(idir).nam]; 
%       idat=idat+1;
%       
%       idir=3;
%       [T]=temp_from_press_and_th(GridDan(idir),ThreeDDan(idir).TH1,ThreeDDan(idir).P);    
%       xdat(idat).x = squeeze( mean( mean( T,3 ),2 )  )  - init; 
%       labs(idat).l=[runName(idir).nam]; 
%       idat=idat+1;
%       
%             aind=107; %ACC_A 
% 			area=TimeAv.DGAV(:,107);
%             area(area==0)=1;
%             
%             
%       init=icediagsALL(idir).i(:,1,383);  
%       idir=1;
%       xdat(idat).x = icediagsALL(idir).i(:,10,384)./area - init; 
%       %xdat(idat).x=area;
%       labs(idat).l=[runName(idir).nam]; 
%       idat=idat+1;

%       
%       xdat(idat).x = xdat(2).x-xdat(1).x; 
%       labs(idat).l='diff'; 
%       idat=idat+1;
%         
    clear diff tot
    
    zmin=15;
    zmin=14;
    zmin=10;
    zmax=16.7+0.62;
    zmax=20.7+0.62;

    %zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17.1e3);
%    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,16.1e3);
    
            
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + 0.62; 
            
            rho=GridDan(idir).RHON(ih1:ih2); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=mean( dz.*rho );
   
           % i0=find(xdat(idat).x>6.5);            

            tot(idat).t=mean( xdat(idat).x(ih1:ih2) .*dz.*rho )   ./ air1;
            
             
		end
        
        
        
         xlims=0;
         xlimits=([-1 5]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 4875
    idir=1;        
    

	ylab='Height (km)';
      %  ylab='';        
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];

    savename=figname;
    
 
    logflag=0;        
        

	idat=1; %don't change this    
           
    idirs=[1:3];
    
    mean_min='mean';
%    mean_min='min';
    mean_min='mean2';
%    mean_min='max';
%    mean_min='mean_region';

		dX=75e3;
        dY=diff(GridDan(idir).Y1(1:2));
        dz=diff(GridDan(idir).Z);
        dz=[dz(1); dz];
        dV=GridDan(idir).RHON.*dY*dY.*dz;
        
    
    
    xlab=['Mean vapour (ppmv)'];
         figname=['Mean vapour'];
         
         
    switch mean_min
    case 'min' 
        
         for idat=1:length(idirs)
                idir=idirs(idat);
                xdat(idat).x = f*squeeze(min(min(ThreeDDan(idir).Q(2:end-1,2:end-1,:),[],1),[],2)) ; 
                labs(idat).l=[runName(idir).nam]; 
         end
         
         xlab=['Min vapour (ppmv)'];
         figname=['Min vapour'];
      
    case 'mean'
        
        for idat=1:length(idirs)
            idir=idirs(idat);
            xdat(idat).x = f*squeeze(mean(mean(ThreeDDan(idir).Q(2:end-1,2:end-1,:),1),2)) ; 
            labs(idat).l=[runName(idir).nam]; 
        end
        
         xlab=['Mean vapour (ppmv)'];
         figname=['Mean vapour'];
         
     case 'mean2'
        mean_inds=[1:4]; %indices for q-fields to do means over
        dV=dY*dY
        
        for idat=1:length(idirs)
            idir=idirs(idat);
            xdat(idat).x = dV*squeeze(sum(sum(sum(f*ThreeDDan(idir).Q(2:end-1,2:end-1,:,mean_inds)-5,4),1),2)) /f ; 
            labs(idat).l=[runName(idir).nam]; 
            
            xlab=['Sum ice (kg)'];
            figname=['Sum ice'];
        end
        
        
	case 'max'
        mean_inds=[1:4]; %indices for q-fields to do means over
        for idat=1:length(idirs)
            idir=idirs(idat);
            xdat(idat).x = f*squeeze(max(max(max(ThreeDDan(idir).Q(2:end-1,2:end-1,:,mean_inds),[],4),[],1),[],2)) ; 
            labs(idat).l=[runName(idir).nam]; 
            
            xlab=['Max ice (ppmv)'];
            figname=['Max ice'];
        end   
        
     case 'mean_region'
        mean_inds=[1]; %indices for q-fields to do means over
        
        
        
        for idat=1:length(idirs)
            idir=idirs(idat);
            xdat(idat).x = f*squeeze(mean(mean(sum(ThreeDDan(idir).Q(inds,2:end-1,:,mean_inds),4),1),2)) -5 ; 
            labs(idat).l=[runName(idir).nam]; 
            
            xlab=['Mean ice region (ppmv)'];
            figname=['Mean ice region'];
        end   
         
        
    end
      
        
    clear diff tot
    
    zmin=15;
    zmin=14;
    zmax=16.7+0.62;
    zmax=20.7+0.62;
    zmin=0;

    %zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17.1e3);
%    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,16.1e3);
    
            
         for idat=1:length(xdat)
             ydat(idat).y = GridDan(idir).Z/1000 + 0.62; 
%             
%             rho=GridDan(idir).RHON(ih1:ih2); %convert to kg/km3 as xdat in g/kg km 
%             dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
%             
%             air1=mean( dz.*rho );
%    
%            % i0=find(xdat(idat).x>6.5);            
% 
%             tot(idat).t=mean( xdat(idat).x(ih1:ih2) .*dz.*rho )   ./ air1;
%             
%              
        end
        
        
        
         xlims=0;
         xlimits=([-1 5]);
         xlimits=([4.5 6.2]);
         xlimits=([4.5 7]);
       % xlimits=([4.8 5.4]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 4873
    idir=1;        
    

	ylab='Height (km)';
      %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];

    savename=figname;
    
 
    logflag=0;        
        

	idat=1; %don't change this    
           
    idirs=[1:3];
    
    mean_min='mean';
    mean_min='min';
    
    switch mean_min
    case 'min' 
        
         for idat=1:length(idirs)
                idir=idirs(idat);
                xdat(idat).x = f*squeeze(min(min(ThreeDDan(idir).Q(2:end-1,2:end-1,:),[],1),[],2)) ; 
                labs(idat).l=[runName(idir).nam]; 
         end
         
         xlab=['Min vapour (ppmv)'];
         figname=['Min vapour'];
      
    case 'mean'
        
        for idat=1:length(idirs)
            idir=idirs(idat);
            xdat(idat).x = f*squeeze(mean(mean(ThreeDDan(idir).Q(2:end-1,2:end-1,:),1),2)) ; 
            labs(idat).l=[runName(idir).nam]; 
        end
        
         xlab=['Mean vapour (ppmv)'];
         figname=['Mean vapour'];
        
    end
      
        
    clear diff tot
    
    zmin=15;
    zmin=14;
    zmax=16.7+0.62;
    zmax=20.7+0.62;

    %zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17.1e3);
%    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,16.1e3);
    
            
         for idat=1:length(xdat)
             ydat(idat).y = GridDan(idir).Z/1000 + 0.62; 
%             
%             rho=GridDan(idir).RHON(ih1:ih2); %convert to kg/km3 as xdat in g/kg km 
%             dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
%             
%             air1=mean( dz.*rho );
%    
%            % i0=find(xdat(idat).x>6.5);            
% 
%             tot(idat).t=mean( xdat(idat).x(ih1:ih2) .*dz.*rho )   ./ air1;
%             
%              
        end
        
        
        
         xlims=1;
         xlimits=([-1 5]);
         xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        xlimits=([4.8 5.4]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 485
    idir=1;
    
%need to load in 2D case, 3D case and then do loadvapdata for icediagsALL and GridDan    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    
    
    D=300e3;
    [iav iav2]=findheight( GridDan(2).Y1, GridDan(2).Y1(1)+D/2 , GridDan(2).Y1(end)-D/2  );	

      init = f*sum(icediagsALL(2).i(:,1,[37:42]),3)/npess2(2); %initial total water profile

        idat=1;	             
      
            
      xdat(idat).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1),3) ,2) - init; 
      labs(idat).l=['2D vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1:6),3) ,2) - init; 
      labs(idat).l=['2D tot']; 
      idat=idat+1;
      
      xdat(idat).x = 0.22 * (  f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1:6),3) ,2) - init  ); 
      labs(idat).l=['2D tot scaled']; 
      idat=idat+1;
      
      xdat(idat).x = f*  squeeze( mean( mean( ThreeD(1).Q ) )  )  - init; 
      labs(idat).l=['3D vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*squeeze(mean( mean(tot_water44 ) )) - init; 
      labs(idat).l=['3D tot']; 
      idat=idat+1;
      
      
     
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
    %zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    
            
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
            
            rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air1=flipud(air1);
            air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air2=flipud(air2);
   
            i0=find(xdat(idat).x>6.5);            
%            i0=find(xdat(idat).x>8.5);            

%            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
            
             
%            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
            tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
            tot(idat).t=flipud(tot(idat).t);
            
             
		end
        
        
        
         xlims=1;
         xlimits=([-1 5]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
 
 case 4852    

    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    
    
    D=50e3;
    [iav iav2]=findheight( GridDan(idir).Y1, GridDan(idir).Y1(idir)+D/2 , GridDan(idir).Y1(end)-D/2  );	

      init = f*sum(icediagsALL(1).i(:,2,[37:42]),3)/npess2(1); %initial total water profile

      idat=1;	                   
      
      idir=2;
      xdat(idat).x = f*mean( sum(TwoDDan(idir).Q(:,[1:iav iav2:length(GridDan(idir).Y1)] ,1),3) ,2) - init; 
      ydat(idat).y=(GridDan(idir).Z+620)/1000;
      labs(idat).l=['1e-3 vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(idir).Q(:,[1:iav iav2:length(GridDan(idir).Y1)] ,1:6),3) ,2) - init; 
      ydat(idat).y=(GridDan(idir).Z+620)/1000;      
      labs(idat).l=['1e-3 tot']; 
      idat=idat+1;
      
      idir=1;
      [iav iav2]=findheight( GridDan(idir).Y1, GridDan(idir).Y1(idir)+D/2 , GridDan(idir).Y1(end)-D/2  );	
      
      xdat(idat).x = f*mean( sum(TwoDDan(idir).Q(:,[1:iav iav2:length(GridDan(idir).Y1)] ,1),3) ,2) - init; 
      ydat(idat).y=(GridDan(idir).Z+620)/1000;
      labs(idat).l=['2D vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(idir).Q(:,[1:iav iav2:length(GridDan(idir).Y1)] ,1:6),3) ,2) - init; 
      ydat(idat).y=(GridDan(idir).Z+620)/1000;      
      labs(idat).l=['2D tot']; 
      idat=idat+1;
      
      izlim=1;
       zmin=15;
% %    zmin=14.5;
     zmax=16.7+0.62;
       
         xlims=1;
         xlimits=([-1 5]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         xlimits=[-1 0.1];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
 

    case 486
    idir=1;
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    D=300e3;
    [iav iav2]=findheight( GridDan(1).Y1, GridDan(1).Y1(1)+D/2 , GridDan(1).Y1(end)-D/2  );	

      init = f*sum(icediagsALL(2).i(:,1,[37:42]),3)/npess2(2); %initial total water 

        idat=1;
	
        
      xdat(idat).x = f*mean( sum(TwoDDan(1).Q(:,[1:iav iav2:length(GridDan(1).Y1)] ,1),3) ,2) - init; 
      labs(idat).l=['1 km res vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(1).Q(:,[1:iav iav2:length(GridDan(1).Y1)] ,1:6),3) ,2) - init; 
      labs(idat).l=['1 km res tot']; 
      idat=idat+1;
      
       [iav iav2]=findheight( GridDan(2).Y1, GridDan(2).Y1(1)+D/2 , GridDan(2).Y1(end)-D/2  );	
      
      xdat(idat).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1),3) ,2) - init; 
      labs(idat).l=['2 km res vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1:6),3) ,2) - init; 
      labs(idat).l=['2 km res tot']; 
      idat=idat+1;
      
      
     
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
    %zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    
            
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
            
            rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air1=flipud(air1);
            air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air2=flipud(air2);
   
            i0=find(xdat(idat).x>6.5);            
%            i0=find(xdat(idat).x>8.5);            

%            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
            
             
%            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
            tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
            tot(idat).t=flipud(tot(idat).t);
            
             
		end
        
        
        
         xlims=1;
         xlimits=([-1 5]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
         

           

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        
         
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         

    case 484
    idir=1;
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
 
    logflag=0;
    D=300e3;
    [iav iav2]=findheight( GridDan(2).Y1, GridDan(2).Y1(1)+D/2 , GridDan(2).Y1(end)-D/2  );	

      init = f*sum(icediagsALL(2).i(:,1,[37:42]),3)/npess2(2); %initial total water 

        idat=1;
	
        
      xdat(idat).x = f*mean( sum(TwoDDan(1).Q(:,[1:iav iav2:length(GridDan(1).Y1)] ,1),3) ,2) - init; 
      labs(idat).l=['Control vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(1).Q(:,[1:iav iav2:length(GridDan(1).Y1)] ,1:6),3) ,2) - init; 
      labs(idat).l=['Control tot']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1),3) ,2) - init; 
      labs(idat).l=['CCN=960 cm^{-3} vap']; 
      idat=idat+1;
      
      xdat(idat).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1:6),3) ,2) - init; 
      labs(idat).l=['CCN=960 cm^{-3} tot']; 
      idat=idat+1;
      
      
     
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
    %zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    
            
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
            
            rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air1=flipud(air1);
            air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air2=flipud(air2);
   
            i0=find(xdat(idat).x>6.5);            
%            i0=find(xdat(idat).x>8.5);            

%            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
            
             
%            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
            tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
            tot(idat).t=flipud(tot(idat).t);
            
             
		end
        
        
        
         xlims=1;
         xlimits=([-1 5]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
        % xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
         

           

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
    case 483
    idir=1;
    
    
    %t1=23.5;
%    t1=GridDan(1).t(62)+3;
    
    t1=23.75;
    t1=24.6;
    
  %  t1=25.167; %01:10 UTC
    t1=22.667;
    t1=21.08;
    
    t1=23.46;
    
    
    
    
    
    
    it1=findheight(GridDan(idir).t+3,t1);
%    it1=size(icediagsALL(idir).i,2);
    
    mins=(t1-floor(t1))*60;
    minstr=num2str(mins,'%2.0f');
    
    hrs=mod(floor(t1),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t1str=[hrstr ':' minstr];
    
    t2=25.1667;
%    t2=25;
    mins=(t2-floor(t2))*60;
    minstr=num2str(mins,'%2.0f');
    hrs=mod(floor(t2),24);
    hrstr=num2str(hrs,'%2.0f');
    if mins==0; minstr='00';end
    if hrs==0; hrstr='00';end
    t2str=[hrstr ':' minstr];
    %it=62; % 00:50 UTC
    it=66; % 01:10 UTC

    

    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
  %  ylab='';
    
    
    
    titlenam='';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
        figname=['Total Water and Vapour'];

    savename=figname;
    
    meantot=mean(mean(tot_water44)); %mean at each height
	meantot2=repmat(meantot,[size(tot_water44,1) size(tot_water44,2) 1]);

   [maxtot]=max(mean( abs(tot_water44-meantot2) )); %max of the means along the slices (slices as in 2D orientation)
                                    %for each height
   [ratio]=squeeze(mean(mean( abs(tot_water44-meantot2) ))./maxtot); %ratio of horiz mean to slice with highest mean
                                  %to represent ratio of 2d with likely extrapolated mean over same area
  [maxtot imax]=max(max( abs(tot_water44-meantot2) ));
  imax=squeeze(imax);
  for km=1:length(imax)
      mean_at_maxs(km)=mean( abs(tot_water44(:,imax(km),km)-meantot2(:,imax(km),km)) );
  end
  [ratio2]=squeeze(mean(mean( abs(tot_water44-meantot2) )))./mean_at_maxs'; %ratio of horiz mean to slice with highest mean
                                  %to represent ratio of 2d with likely extrapolated mean over same area
   
    logflag=0;
    D=diff( GridDan(1).Y1([1 end]));
    [iav iav2]=findheight( GridDan(2).Y1, GridDan(2).Y1(1)+D/2 , GridDan(2).Y1(end)-D/2  );	

      xdat(1).x = f*sum(icediagsALL(2).i(:,1,[37:42]),3)/npess2(2); %initial total water 
      
%      xdat(2).x = f*mean( sum(TwoDDan(1).Q(:,:,1:6),3) ,2); %total water for 1st case
	

      xdat(2).x = f*mean( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1:6),3) ,2); 
      
      ixpos=152;
      xdat(3).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case
      labs(3).l=[runName(1).nam ' ' num2str(ixpos)]; 
      
      ixpos=132;
      xdat(4).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case
      labs(4).l=[runName(1).nam ' ' num2str(ixpos)]; 
      
      
	  ixpos=122;
      xdat(5).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case
      labs(5).l=[runName(1).nam ' ' num2str(ixpos)]; 
      
      
	  ixpos=11;
      xdat(6).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case
      labs(6).l=[runName(1).nam ' ' num2str(ixpos)]; 
      

% 	  ixpos=30;
       xdat(7).x = (  squeeze(f*mean(mean(tot_water44(2:end-1,:,:) )))   ); %total water for 1st case    
       labs(7).l=[runName(1).nam ' mean']; 
%       
% 		ixpos=40;
%       xdat(8).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case    
%       labs(8).l=[runName(1).nam ' ' num2str(ixpos)];       
%       
% 		ixpos=100;
%       xdat(9).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case    
%       labs(9).l=[runName(1).nam ' ' num2str(ixpos)];       
% 
 		ixpos=75;
       xdat(8).x = (f*mean( squeeze(tot_water44(2:end-1,ixpos,:)) ))'; %total water for 1st case    
       labs(8).l=[runName(1).nam ' ' num2str(ixpos)];    
       
       xdat(9).x = ( squeeze( f*max(max( tot_water44(2:end-1,:,:)) )) ); %total water for 1st case    
       labs(9).l=[runName(1).nam ' max']; 
       
       xdat(10).x = f*min( sum(TwoDDan(2).Q(:,[1:iav iav2:length(GridDan(2).Y1)] ,1:6),3) ,[],2);
       labs(10).l=[runName(2).nam ' max']; 
      
	
		labs(1).l='Initial';
       % labs(2).l='1 km tot';  %runName(1).nam;    %[t1str ' Control total water'];
	%	labs(3).l='2 km tot';  %runName(idir).nam;   %[t1str ' CCN 960 cm^{-3} tot'];

        labs(2).l=[runName(2).nam ' tot'];  %runName(1).nam;    %[t1str ' Control total water'];
		%labs(3).l=[runName(2).nam ' tot'];   %[t1str ' CCN 960 cm^{-3} tot'];

        
    T=tempLES(GridDan(idir)); %K
	ei=SatVapPress(T,'goff','ice'); %Pa
	P=GridDan(idir).PREFN; %Pa
	sat=f*0.622*ei./(P-ei);
    
    Lx=length(xdat);
    xdat(Lx+1).x = sat;
    labs(Lx+1).l=['Ice sat MR'];
    
     xdat(Lx+2).x = f*sum(icediagsALL(1).i(:,1,[37:42]),3); %initial total water 
     labs(Lx+2).l='Initial 3d';
        
    clear diff tot
    
    zmin=15;
%    zmin=14.5;
    zmax=16.7+0.62;
    zmax=19+0.62;
    
    ih2=findheight(GridDan(1).Z+620,28e3);
    ih2=250;
    
    ih2=findheight(GridDan(1).Z+620,17e3);
    ih1=findheight(GridDan(1).Z+620,15.335e3);
    ih1=findheight(GridDan(1).Z+620,14e3);
    
            
        for idat=1:length(xdat)
            ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
            
            rho=GridDan(idir).RHON(:); %convert to kg/km3 as xdat in g/kg km 
            dz=diff(GridDan(idir).Z(ih1-1:ih2))/1000;
            
            air1=cumsum(flipud( diff( GridDan(1).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air1=flipud(air1);
            air2=cumsum(flipud( diff( GridDan(2).Y1([1 end]) ).*dz.*rho(ih1:ih2)  ) );
            air2=flipud(air2);
   
            i0=find(xdat(idat).x>6.5);            
%            i0=find(xdat(idat).x>8.5);            

%            xdat(idat).x(i0)=xdat(1).x(i0); %make them the same so diff=0 for tot > 6.5 ppmv
            
             
%            tot(idat)=sum( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  );
            tot(idat).t=cumsum(flipud( ( xdat(idat).x(ih1:ih2)-xdat(1).x(ih1:ih2) ).*dz.*rho(ih1:ih2)  ) );
            tot(idat).t=flipud(tot(idat).t);
            
             
		end
        
        
        
         xlims=1;
         xlimits=([4.8 5.4]);
       %  xlimits=([4.5 6.2]);
       %  xlimits=([4.5 7]);
         xlimits=([4 14]);

         %xlimits=[-0.1 0.4];
         

icum=0;  %flag to say to do normal means and not TTL cumulative means.
if icum==1
         
         
            clear xdat ydat labs
                  %  zmin=15;
                  %5  zmax=18.7+0.62;
                  
                  Y1=diff(GridDan(1).Y1([1 end]));                  
                  Y2=diff(GridDan(2).Y1([1 end]));
                  
                  %only for 3d
                  fact=Y2*1000/Y1^2; %conversion factor to multiply 2-d result by for fair comparison (assumes a 1 km length in 3-D)
                  
%                  fact=Y2*1000/Y1; %factor assuming that 2d covers full 300 km of 3d domain

                  
                xlims=0;  
                xdat(1).x=tot(2).t * diff( GridDan(1).Y1([1 end]) ) ./air1;  %tot
                xdat(1).x=tot(4).t * diff( GridDan(1).Y1([1 end]) ) ./air1;  %vapour

                
                %%%  2d
                xdat(2).x=tot(3).t * diff( GridDan(2).Y1([1 end]) ) ./air2;   %tot
                xdat(2).x=tot(5).t * diff( GridDan(2).Y1([1 end]) ) ./air2;   %vapour
                
                %%%% 3d
%                xdat(2).x=tot(3).t * diff( GridDan(2).Y1([1 end]) ) ./air2 * fact; %%%%  only use fact for 3d  %%%%%%%%

                xdat(1).x(end+1)=0;
                xdat(2).x(end+1)=0;
                
                ydat(1).y=GridDan(1).Z(ih1:ih2+1)/1000 + add_ground_height; 
                ydat(2).y=GridDan(2).Z(ih1:ih2+1)/1000 + add_ground_height; 
                
                labs(1).l = '1 km';
                labs(2).l = '2 km';                                
        
                labs(1).l = '3d';
                labs(2).l = '2d (scaled assuming 1 km in 3d)';                                

                labs(1).l = '1 km';
                labs(2).l = runName(2).nam;      
                
                
                xlab='Cumulative total water reduction (kg m^{-1})';
                xlab='Mean total water MR change from 17 km downwards (ppmv)';
                
                        figname=['Cumulative total water'];
                        savename=figname;

end              

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

         
    case 482    

    
    xlab=['Ice saturation mixing ratio (ppmv)'];
	ylab='Mean TTL total water mixing ratio (ppmv)';
            
    titlenam='';
    figname=['Mean TTL function of ice sat'];
    savename=figname;
    
    logflag=0;
    
    clear diff tot
    
    TTL_avTOT_funcof_IcesatMR; %works out mean TTL from 15 km to 17 km for various ice sat MRs
    
    ydat(1).y=total(1).t;
    ydat(2).y=total(2).t;
    
	
	xdat(1).x=ppmvs; 
	xdat(2).x=ppmvs; 
	
	labs(1).l = '1 km resolution';
	labs(2).l = '2 km resolution';                                
	
	
	nmark=0;
	
	lor=2;
    
    izlim=0;

         
         
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
  case 488
    
    zmin=14;
    zmax=20.5;
    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
    
    
    
    titlenam='Vapour profiles';
%    figname=['Total Water and Vapour at Time = ' num2str(mod(t1,24),'%2.2f') ' UTC'];
    figname=['Water Vapour'];

    savename=figname;
    
    logflag=0;
    
	idirs=[1:4];
    
    for idat=1:length(idirs)
        idir=idirs(idat);
        
      [i1,i2]=findheight(GridDan(idir).Y1,GridDan(idir).Y1(end)-500e3,GridDan(idir).Y1(1)+500e3);

      xdat(idat).x = f*mean(TwoDDan(idir).Q(:,[i1:length(GridDan(idir).Y1) 1:i2],1),2);
	  labs(idat).l=[runName(idir).nam];
      ydat(idat).y=GridDan(idir).Z/1000+0.62;
        
  end
                            	
         xlims=1;
         xlimits=([4.8 5.8]);
         xlimits=([4.5 6.2]);
         xlimits=([4.5 7]);
         xlimits=([4.8 5.1]);

         %xlimits=[-0.1 0.4];
         
         nmark=0;
         
         lor=2; %1=right, 2=left
         
    case 47
        
    zmin=12;
    zmax=21.3;
    
    xlab=['Mixing Ratio (ppmv)'];
	ylab='Height (km)';
    
    figname=['IceSat_initVap'];
    savename=figname;
    
    logflag=0;
    
    T=TempLes(GridDan(idir));
    P=GridDan(idir).PREFN;
    xdat(1).x = SatVapPress(T,'lem','ice',P,1);    
    xdat(2).x = f*icediagsALL(idir).i(:,1,[37])/npess2(idir);
	for idat=1:2
        ydat(idat).y = GridDan(idir).Z/1000 + add_ground_height; 
	end
	
        labs(1).l='Initial Ice Sat Mixing Ratio';
		labs(2).l='Initial Vap Mixing Ratio';
	
         xlims=1;
         xlimits=([3 20]);
         
         nmark=0;
         
         
	case 46
            timeseries_dan
    
    case 45
    
    time1=19.75;
  %  time1=20;
    
    time2=23.46;
    
    time2=20.5;
    
    t1=findheight(GridDan(1).t+3,time1);
    t2=findheight(GridDan(1).t+3,time2);
    
    H=18e3;
    H=20e3;    
    ih=findheight(GridDan(1).Z+620,H);
    
%    t1=1;
%    t2=21;
    
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
 

    
    xlab=['Total mass flow rate (kg s^{-1} m^{-1})'];
    
    
    
  %  xlab=['Total mass flow rate in updraughts larger than 1 m s^{-1} (kg/s)'];
    
  %  xlab=['Updraught diameter (for updraughts larger than 1 m s^{-1} )(km)'];

	ylab='Height (km)';
    
   
    
    
    titlenam='';
    
    logflag=0;
    
    aind=280;%ALu_A
    aind=285; %ACu_A
%    aind=284; %ACC_A
    aind=283; %W>1_A

aind=[];   %if want to ignore area and just get total
    
    datind=137; %ALu_W
 %   datind=47;  %ALu_WQ02
 %   datind=198; %ACC_Q04
 %   datind=193; %ACC_WQ01
 %   datind=223; %ACC_Q01
%    datind=194; %ACC_WQ

plotcase='ACu_W';
plotcase='W>1_W';
%plotcase='ACu_ice_flux';
plotcase='Ice_mass';

switch plotcase
case 'W>1_W'    
    datind=303; %W>1_W
    xlab=['Average vertical wind speed in updraughts larger than 1 m s^{-1}'];
    aind=[];
    aind=283; %ACu_A
    
case 'ACu_W'    
    datind=302; %ACu_W
    xlab=['Average cloudy updraught (m s^{-1})']; 
    aind=[];
    aind=285; %ACu_A
    
case 'ACu_ice_flux'    
    datind=[49:51]; %ACu_W
    xlab=['Ice mass flux (kg m^{-2} s^{-1})'];     
    aind=[];
    aind=285; %ACu_A
    
case 'Ice_mass'    
    datind=[226:228]; %ACC_Q
    xlab=['Ice mixing ratio (kg kg^{-1})'];     
    aind=[];
    aind=284; %ACC_A    
end


savename=xlab;
    
%     figname=['Average vertical wind speed in updraughts larger than 1 m s^{-1}'];    
%     figname=['Total mass flow rate in updraughts larger than 1 m s^{-1} (kg s^{-1})'];
    
    figname=xlab;
    
    idats=[1 2 3];
    
    clear diff
    
	for iidat=1:length(idats)
       idat=idats(iidat); 

         if length(aind)==1            
            area=icediagsALL(idat).i(1:ih,t1:t2,aind)/npess2(idat);
            area(area==0)=1;
        else
            area=1;
        end
        
        
%        xdat(idat).x = mean(icediagsALL(idat).i(:,t1:t2,[137]),2)/npess2(idat); %dividing by no. processors
        xdat(iidat).x = mean(sum(icediagsALL(idat).i(1:ih,t1:t2,[datind]),3)./area,2)/npess2(idat); %ALu_W. Dividing by no. processors
        
%        xdat(idat).x = xdat(idat).x .* length(GridDan(idat).Y1) .* GridDan(idat).RHON(1:ih) * diff( GridDan(idat).Y1(1:2) ) ; %to convert into mass flow per unit in 3rd dim
           %multiply to length(Y) since is averaged over whole domain. dy*rho gives the mass of each element (already have dz from W)
           
     %   xdat(idat).x = mean(icediagsALL(idat).i(:,t1:t2,[1]),2);
        ydat(iidat).y = (GridDan(idat).Z(1:ih)+620)/1000; 
        
        i3d=0;
        if i3d==1
            if idat==1
                    xdat(idat).x = 1000 * xdat(idat).x .* length(GridDan(idat).Y1) .* GridDan(idat).RHON(1:ih) * diff( GridDan(idat).Y1(1:2) ) ; %to convert into mass flow per unit in 3rd dim
            else                    %this factor of 1000 is to simulate the 2d case occupying 1km (1000m) of 3rd dim 
                    xdat(idat).x = xdat(idat).x .* length(GridDan(idat).Y1) * length(GridDan(idat).X1) .* GridDan(idat).RHON(1:ih) * diff( GridDan(idat).Y1(1:2) )^2 ; %to convert into mass flow per unit in 3rd dim
            end
        end
        
        i3dA=0;
        if i3dA==1
            if idat==1
                    xdat(idat).x = length(GridDan(idat).Y1) .* diff( GridDan(idat).Y1(1:2) ) * mean( icediagsALL(idat).i(1:ih,t1:t2,aind),2 )/npess2(idat) /1000;
            else                    %this factor of 1000 is to simulate the 2d case occupying 1km (1000m) of 3rd dim 
                    xdat(idat).x = (length(GridDan(idat).Y1) .* diff( GridDan(idat).Y1(1:2) ) )^2 * mean( icediagsALL(idat).i(1:ih,t1:t2,aind),2 )/npess2(idat) /1000;
                    xdat(idat).x = sqrt(xdat(idat).x / pi )/1000;
            end
        end
        
        labs(iidat).l=runName(idat).nam;
        	
	end
	
%         labs(1).l='250m res';
% 		labs(2).l='500m res';
% 		labs(3).l='1km res';
		%labs(4).l='250m res 13.4';

	
         xlims=0;
         xlimits=[-30 50];
	%     
         
         nmark=0;
    
    
    case 44
    
    time1=19.75;
    time2=23.5;
    time2=21.25;
    time2=20.4;
    
    t1=findheight(GridDan(1).t+3,time1);
    t2=findheight(GridDan(1).t+3,time2);
    
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
 
    xlab=['Max Vertical Wind Speed (m/s)'];
	ylab='Height (km)';
    
    figname=['MaxW wind speed' direc(idir).dir];
    
	for idat=1:4
        xdat(idat).x = max(MaxW(idat).w(:,t1:t2),[],2);
        xdat(idat).x = mean(MaxW(idat).w(:,t1:t2),2);
        
        ydat(idat).y = (GridDan(idat).Z+620)/1000; 
        labs(idat).l = runName(idat).nam;	
	end
	
%         labs(1).l='250m res';
% 		labs(2).l='500m res';
% 		labs(3).l='1km res';
% 		labs(4).l='250m res 13.4';

	
         xlims=0;
         xlimits=[-30 50];
	%     
         
         nmark=0;
         
         savename=figname;
         
    
    case 43
    logflag=0;
    
    izlim=0;
    %z=GridDan(idir).Z;
 
    xlab=['Horizontal Wind Speed (m/s)'];
	ylab='Height (km)';
    
    figname=['V wind speed' direc(idir).dir];
    
	for idat=1:2
        xdat(idat).x = GridDan(idat).VBAR;
        ydat(idat).y = (GridDan(idat).Z+620)/1000; 
        	
	end
	
        labs(1).l='24/02';
        labs(2).l='13/02';

	
         xlims=0;
         xlimits=[-30 50];
	%     
         
         nmark=0;
         
         
         
    case 42
    logflag=2; %for y axis
    
    izlim=0;
    %z=GridDan(idir).Z;
 
    xlab=['Vertical Velocity (m/s)'];
%	ylab='log10 of normalised dn/dw (where n is no. grid points)';

	ylab='Relative Frequency';

    figname=['w distribution'];
    
    %%%%%% note make sure dw (size of vertical velocity bin width) is correct ! %%%%
    dw=0.5;
    
	for idat=1:4
        xdat(idat).x = wb(idat).w-dw/2;
        ydat(idat).y=(wd(idat).w*dw); %data in wd(idat).w is df/dw (f=relative frequency) so divide by dw to get just the rel. freq.
	end
	
	labs(1).l='250m res';
	labs(2).l='500m res';
	labs(3).l='1km res';
	labs(4).l='250m res 13.4';
	
     xlims=1;
     xlimits=[-1 47];
	%     
     nmark=-1;
     
     savename=[figname '_' ylab];
     
    case 41
        ice_budget_test
	case 40
        ice_budget
    case 39
        budget_tim
	case 38 
        ice_sat_mr;
    
    case 37
    logflag=0;
    
    %z=GridDan(idir).Z;
 
    xlab=['Fraction of mass received'];
	ylab='Height (m)';
    
    figname=['dm fraction' direc(idir).dir];
    

    xdat(1).x = dqz2/sumdqz2;
    ydat(1).y=z(z0:zend); %620m already added on in fourevents2.m
    labs(1).l='Fraction';
    
% %     ydat(2).y=z(len:length(z)-1)/1000;
% %     labs(2).l='Vapour';
%     
%     secyA=z/1000 + 0.62;
%     secyB=GridDan(idir).PREFN/100;
%     lab2='Pressure (hPa)';  
%     dual=1;
%     
     xlims=1;
     xlimits=[0 1];
%     
     zmin=15.6e3;  %(km)
     zmax=17.2e3;
     
     nmark=-1;
     
    case 36
    logflag=0;
    
    %z=GridDan(idir).Z;
 
    xlab=['Time UTC'];
	ylab='Mass Decrease (kg/m^2)';
    
    figname=['tot dm' direc(idir).dir];
    

    xdat(1).x = GridDan(idir).t(1:size(mtim,2)) + 3;
    ydat(1).y=mtim;
    labs(1).l='Tot mass decrease due to dry points';
    
% %     ydat(2).y=z(len:length(z)-1)/1000;
% %     labs(2).l='Vapour';
%     
%     secyA=z/1000 + 0.62;
%     secyB=GridDan(idir).PREFN/100;
%     lab2='Pressure (hPa)';  
%     dual=1;
%     
     xlims=1;
     xlimits=[19.5 23];
%     
     zmin=0;  %(km)
     zmax=max(ydat(1).y)*1.1;
     
     nmark=-1;
    

    
    lor=1;
    
    case 35
    logflag=0;
    
    %z=GridDan(idir).Z;
 
    xlab=['dN/dt - Number of overshoot events per month'];
	ylab='Min vapour in 15.8-17km region (ppmv)';
    
    figname=['min q vs dn/dt ' direc(idir).dir];
    

    xdat(1).x = Nevs;
    ydat(1).y=qmin_spread_mass;
    labs(1).l='Min ppmv';
    
% %     ydat(2).y=z(len:length(z)-1)/1000;
% %     labs(2).l='Vapour';
%     
%     secyA=z/1000 + 0.62;
%     secyB=GridDan(idir).PREFN/100;
%     lab2='Pressure (hPa)';  
%     dual=1;
%     
%     xlims=1;
%     %xlimits=[-1.4 0.4];
%     xlimits=[-80 -65];
%     
     zmin=3;  %(km)
     zmax=5;
    

    
    lor=1;
    
	case 34
    Ad_source
    
    case 33
    logflag=0;
    
    xlab='Mixing Ratio Gain After Overshoot (ppmv)';
	ylab='Height (km)';
    
    figname='Net Mass Gain';
    
    xlims=1;
    xlimits=[-1 1];
    
    zmin=14;  %(km)
    zmax=21;   %z(end)/1000;
    

    z=GridDan(idir).Z;
    
    
    dz=GridDan(idir).Z(2:end)-GridDan(idir).Z(1:end-1); 
    rho=GridDan(idir).RHO;
    
    t1=3;
    t2=17; %index for start and end times of difference plot
    
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
       xdat(1).x = f*( sum(icediag4(idir).i(:,t2,[35:42]),3) - sum(icediag4(idir).i(:,t1,[35:42]),3) ); %total water change
       xdat(2).x = f*( sum(icediag4(idir).i(:,t2,[35:36]),3) - sum(icediag4(idir).i(:,t1,[35:36]),3) ); %difference in end and start vapour diags   
    
    ydat(1).y=z/1000;
    labs(1).l='Total Water';
    
    ydat(2).y=z/1000;
    labs(2).l='Vapour';
    
%     ydat(3).y=Grid.Z(2:len+1)/1000;
%     labs(3).l='Microphysics';
%     
%     ydat(4).y=Grid.Z(2:len+1)/1000;
%     labs(4).l='Fall Speed Flux';
%     
%     ydat(5).y=Grid.Z(2:len+1)/1000;
%     labs(5).l='Ice Flux';
%     
%     ydat(6).y=Grid.Z(2:len+1)/1000;
%     labs(6).l='Upwards Ice Flux';
%     
%     ydat(7).y=Grid.Z(2:len+1)/1000;
%     labs(7).l='Downwards Ice Flux';
%     
%     ydat(8).y=Grid.Z(2:len+1)/1000;
%     labs(8).l='Net Vapour Flux';
%     
%     ydat(9).y=Grid.Z(2:len+1)/1000;
%     labs(9).l='Ice Fall + Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=GridDan(idir).PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
       
    case 32
    logflag=0;
    
    z=GridDan(idir).Z;
 
    xlab=['Temp (^oC)'];
	ylab='Height (km)';
    
    figname=['Temp ' direc(idir).dir];
    

    xdat(1).x = tempLES(GridDan(idir)) - 273.15;
    ydat(1).y=z/1000 + 0.62;
    labs(1).l='Temperature';
    
%     ydat(2).y=z(len:length(z)-1)/1000;
%     labs(2).l='Vapour';
    
    secyA=z/1000 + 0.62;
    secyB=GridDan(idir).PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    xlims=1;
    %xlimits=[-1.4 0.4];
    xlimits=[-80 -65];
    
    zmin=14.5;  %(km)
    zmax=20;
    

    
    lor=1;
    
    case 31
    logflag=0;
    
       %idir=4;
    
%     len=length(icediag4(idir).i(:,1,35))-1;
    z=GridDan(idir).Z;
    len=findheight(z,15.05e3)-1;
    %len=length(z)-1;
    
    hstr=num2str( round2(z(len)/1000,1) );
    xlab=['Cumulative Net Gain up from ' hstr 'km (kg/m^2)'];
	ylab='Height (km)';
    
    figname=['Cumulative net gain up from ' hstr 'km ' direc(idir).dir];
    
 
    dz=z(2:end)-z(1:end-1); %finds d/dz of flux
    rho=GridDan(idir).RHO;
    
    for i=len:length(z)-1
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                 
        %airmass=sum( rho(len:i) .*dz(len:i) );
        airmass=1;
        
        %converted into mixing ratio
        xdat(1).x(i-len+1) = sum( rho(len:i) .*dz(len:i) .* ( sum(icediag4(idir).i(len:i,end,[35:42]),3) - sum(icediag4(idir).i(len:i,3,[35:42]),3) )  ) ./ airmass;
        xdat(2).x(i-len+1) = sum( rho(len:i) .*dz(len:i) .* ( sum(icediag4(idir).i(len:i,end,[35:36]),3) - sum(icediag4(idir).i(len:i,3,[35:36]),3) )  ) ./ airmass;
        
        %mass gain
        %xdat(1).x(len-i+1) =  sum( rho(len-i+1:len) .*dz(len-i+1:len) .* ( sum(icediag3(1).i(len-i+1:len,end,[2 5 8 11]),3) - sum(icediag3(1).i(len-i+1:len,1,[2 5 8 11]),3) )  ) ;
        %xdat(2).x(len-i+1) =  sum( rho(len-i+1:len) .*dz(len-i+1:len) .*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ) ; %difference in end and start vapour diags    
    end
    
    
    ydat(1).y=z(len:length(z)-1)/1000;
    labs(1).l='Total Water';
    
    ydat(2).y=z(len:length(z)-1)/1000;
    labs(2).l='Vapour';
    
    secyA=z/1000;
    secyB=GridDan(idir).PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    %xlims=1;
    %xlimits=[-1.4 0.4];
    xlimits=[-2e-4 2e-4];
    
    zmin=14.5;  %(km)
    zmax=20;
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    
    
    
    case 30
    logflag=0;
    
    xlab='Mean mixing ratio (ppmv)';
	ylab='Height (km)';
    
    figname='Mean mixing ratio';
    
    
    
    zmin=13;  %(km)
    zmax=19;

    idir=4;    
        xdat(1).x = f*squeeze(sum(icediag4(idir).i(:,2,[35 36]),3));
        xdat(2).x = f*squeeze(sum(icediag4(idir).i(:,86,[35 36]),3));
        xdat(3).x = f*squeeze(sum(icediag4(idir).i(:,2,[35:42]),3));
        xdat(4).x = f*squeeze(sum(icediag4(idir).i(:,86,[35:42]),3));
        
        
    
    
      
    for ji=1:4
        ydat(ji).y=GridDan(idir).Z(1:end)/1000;
        secyA=GridDan(idir).Z/1000;
        secyB=GridDan(idir).PREFN/100;
    end
    
    
    
    lab2='Pressure (hPa)';

    labs(1).l='Start Vapour';
    labs(2).l='End Vapour';
    labs(3).l='Start Total Water';
    labs(4).l='End Total Water';
    
    
    %ydat(4).y=Grid.PREFN(1:len)/100;
    
    
    dual=1;
    
    xlims=1;
    xlimits=[3.5 8];
    
    case 29
    logflag=0;
    
    ylab=['Max Ice Concentration (kg^{-1})'];
	xlab='Time (UTC)';
    
    figname=['Max Ice NC'];
    
   
    
    
    
    j=1;
    ydat(j).y=SerDan(j).SER(:,44);
    xdat(j).x=19.75+SerDan(j).SER(:,1)./3600;
    labs(j).l='25km Domain';
    
    j=2;
    ydat(j).y=SerDan(j).SER(:,44);
    xdat(j).x=19.75+SerDan(j).SER(:,1)./3600;
    labs(j).l='Large Damping Layer'; 
    xlims=1;
    %xlimits=[-1.4 0.4];
    xlimits=[time(1)+3 time(end)+3];
    
    j=3;
    ydat(j).y=SerDan(j).SER(:,44);
    xdat(j).x=19.75+SerDan(j).SER(:,1)./3600;
    labs(j).l='CCN = 960 cm^{-1}';
    
    j=4;
    ydat(j).y=SerDan(j).SER(:,44);
    xdat(j).x=19.75+SerDan(j).SER(:,1)./3600;
    labs(j).l='Small Damping Layer';
    
    
    
    zmin=0;  
    zmax=5;
    
    izlim=0; %flag to stop manual scaling of the y axis
    ixtime=1;
    
    case 28
    logflag=0;
    
    ylab=['Min Water Vapour (ppmv)'];
	xlab='Time (UTC)';
    
    figname=['Min Vap'];
    
   
    
    
    
    j=1;
    ydat(j).y=f*min(vapprc(j).v(:,:,1),[],1);
    xdat(j).x=3+time(1:length(ydat(j).y));
    labs(j).l='25km Domain';
    
    j=2;
    ydat(j).y=f*min(vapprc(j).v(:,:,1),[],1);
    xdat(j).x=3+time(1:length(ydat(j).y));
    labs(j).l='Large Damping Layer'; 
    xlims=1;
    %xlimits=[-1.4 0.4];
    xlimits=[time(1)+3 time(end)+3];
    
    j=3;
    ydat(j).y=f*min(vapprc(j).v(:,:,1),[],1);
    xdat(j).x=3+time(1:length(ydat(j).y));
    labs(j).l='CCN = 960 cm^{-1}';
    
    j=4;
    ydat(j).y=f*min(vapprc(4).v(:,:,1),[],1);
    xdat(j).x=3+time(1:length(ydat(j).y));
    labs(j).l='Small Damping Layer';
    
    
    
    zmin=0;  
    zmax=5;
    
    %izlim=0; %flag to stop manual scaling of the y axis
    ixtime=1;
    
    case 27
    logflag=0;
    
    
    
    
    len=length(icediag(1).i(:,1,11))-1;
    len=findheight(z,15.05e3)-1;
    %len=length(z)-1;
    
    hstr=num2str( round2(z(len)/1000,1) );
    xlab=['Cumulative Net Gain up from ' hstr 'km (ppmv)'];
	ylab='Height (km)';
    
    figname=['Cumulative net gain up from ' hstr 'km'];
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); %finds d/dz of flux
    rho=Grid.RHO;
    
    for i=len:length(z)-1
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                 
        airmass=sum( rho(len:i) .*dz(len:i) );
        %airmass=1;
        
        %converted into mixing ratio
        xdat(1).x(i-len+1) = f* sum( rho(len:i) .*dz(len:i) .* ( sum(icediag3(1).i(len:i,end,[2 5 8 11]),3) - sum(icediag3(1).i(len:i,1,[2 5 8 11]),3) )  ) ./ airmass;
        xdat(2).x(i-len+1) = f* sum( rho(len:i) .*dz(len:i) .*( icediag3(1).i(len:i,end,11) - icediag3(1).i(len:i,1,11) ) ) ./ airmass; %difference in end and start vapour diags    
        
        %mass gain
        %xdat(1).x(len-i+1) =  sum( rho(len-i+1:len) .*dz(len-i+1:len) .* ( sum(icediag3(1).i(len-i+1:len,end,[2 5 8 11]),3) - sum(icediag3(1).i(len-i+1:len,1,[2 5 8 11]),3) )  ) ;
        %xdat(2).x(len-i+1) =  sum( rho(len-i+1:len) .*dz(len-i+1:len) .*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ) ; %difference in end and start vapour diags    
    end
    
    
    ydat(1).y=Grid.Z(len:length(z)-1)/1000;
    labs(1).l='Total Water';
    
    ydat(2).y=Grid.Z(len:length(z)-1)/1000;
    labs(2).l='Vapour';
    
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    %xlims=1;
    %xlimits=[-1.4 0.4];
    xlimits=[-2e-4 2e-4];
    
    zmin=14.5;  %(km)
    zmax=20;
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=2;
    
    
    case 26
    logflag=0;
    
    xlab='Net Mass Gain (kg/m^2)';
	ylab='Height (km)';
    
    figname='Net Mass Gain';
    
    %xlims=1;
    xlimits=[-3e-5 5e-5];
    
    zmin=14.5;  %(km)
    zmax=21;   %z(end)/1000;
    
    len=length(m(1).m);
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); 
    rho=Grid.RHO;
    
    
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
       xdat(1).x = f*( sum(icediag3(1).i(2:len+1,end,[2 5 8 11]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8 11]),3) ); %total water change
       xdat(2).x = f*( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        %xdat(1).x =  ( sum(icediag3(1).i(2:len+1,end,[2 5 8]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8]),3) ); %total water change
        %xdat(2).x = ( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        xdat(3).x = f*( ( m(11).m(1:len)  ) )./ (rho(1:len) .*dz(1:len)); %microphysics from ALL_DQ01                             
        
        %xdat(4).x = f*icediag3(1).i(1:len,1,11),1;
        %xdat(5).x = f*icediag3(1).i(1:len,88,11),1;
        
        xdat(4).x =  f* ( m(9).m(1:len)  ) ./ (rho(1:len) .*dz(1:len)); %fall speed flux                               
        xdat(5).x = - f* ( m(38).m(1:len) ) ./ (rho(1:len) .*dz(1:len)); %flux of ice+snow+graupel
        xdat(6).x = - f* ( m(18+5).m(1:len) + m(18+7).m(1:len) + m(18+9).m(1:len) + m(18+11).m(1:len) + m(18+13).m(1:len) + m(18+15).m(1:len) ) ./ (rho(1:len) .*dz(1:len)); %up 
        xdat(7).x = - f* ( m(19+5).m(1:len) + m(19+7).m(1:len) + m(19+9).m(1:len) + m(19+11).m(1:len) + m(19+13).m(1:len) + m(19+15).m(1:len) ) ./ (rho(1:len) .*dz(1:len)); %down   
        xdat(8).x = - f* ( m(1).m(1:len) ) ./ (rho(1:len) .*dz(1:len));
        xdat(9).x = xdat(4).x + xdat(5).x;

    
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        %xdat(1).x(len-i+1) = xdat(1).x(len-i+1) + sumice ;    
       
    
    
    
    ydat(1).y=Grid.Z(2:len+1)/1000;
    labs(1).l='Total Water';
    
    ydat(2).y=Grid.Z(2:len+1)/1000;
    labs(2).l='Vapour';
    
    ydat(3).y=Grid.Z(2:len+1)/1000;
    labs(3).l='Microphysics';
    
    ydat(4).y=Grid.Z(2:len+1)/1000;
    labs(4).l='Fall Speed Flux';
    
    ydat(5).y=Grid.Z(2:len+1)/1000;
    labs(5).l='Ice Flux';
    
    ydat(6).y=Grid.Z(2:len+1)/1000;
    labs(6).l='Upwards Ice Flux';
    
    ydat(7).y=Grid.Z(2:len+1)/1000;
    labs(7).l='Downwards Ice Flux';
    
    ydat(8).y=Grid.Z(2:len+1)/1000;
    labs(8).l='Net Vapour Flux';
    
    ydat(9).y=Grid.Z(2:len+1)/1000;
    labs(9).l='Ice Fall + Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    case 25
    logflag=0;
    
    xlab='Net Mass Gain (kg/m^2)';
	ylab='Height (km)';
    
    figname='Net Mass Gain';
    
    xlims=1;
    xlimits=[-3e-5 5e-5];
    
    zmin=14.5;  %(km)
    zmax=21;   %z(end)/1000;
    
    len=length(m(1).m);
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); 
    rho=Grid.RHO;
    
    
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
       xdat(1).x = rho(1:len) .*dz(1:len) .* ( sum(icediag3(1).i(2:len+1,end,[2 5 8 11]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8 11]),3) ); %total water change
       xdat(2).x = rho(1:len).*dz(1:len).*( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        %xdat(1).x =  ( sum(icediag3(1).i(2:len+1,end,[2 5 8]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8]),3) ); %total water change
        %xdat(2).x = ( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        xdat(3).x = ( ( m(11).m(1:len)  ) ); %microphysics from ALL_DQ01                             
        xdat(4).x =  ( m(9).m(1:len)  ) ; %fall speed flux                               
        xdat(5).x = - ( m(38).m(1:len) ); %flux of ice+snow+graupel
        xdat(6).x = - ( m(18+5).m(1:len) + m(18+7).m(1:len) + m(18+9).m(1:len) + m(18+11).m(1:len) + m(18+13).m(1:len) + m(18+15).m(1:len) ); %up 
        xdat(7).x = - ( m(19+5).m(1:len) + m(19+7).m(1:len) + m(19+9).m(1:len) + m(19+11).m(1:len) + m(19+13).m(1:len) + m(19+15).m(1:len) ); %down   
        xdat(8).x = - ( m(1).m(1:len) );
        %xdat(9).x = - ( m(12).m + m(13).m + m(14).m );

    
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        %xdat(1).x(len-i+1) = xdat(1).x(len-i+1) + sumice ;    
       
    
    
    
    ydat(1).y=Grid.Z(2:len+1)/1000;
    labs(1).l='Total Water';
    
    ydat(2).y=Grid.Z(2:len+1)/1000;
    labs(2).l='Vapour';
    
    ydat(3).y=Grid.Z(2:len+1)/1000;
    labs(3).l='Microphysics';
    
    ydat(4).y=Grid.Z(2:len+1)/1000;
    labs(4).l='Fall Speed Flux';
    
    ydat(5).y=Grid.Z(2:len+1)/1000;
    labs(5).l='Ice Flux';
    
    ydat(6).y=Grid.Z(2:len+1)/1000;
    labs(6).l='Upwards Ice Flux';
    
    ydat(7).y=Grid.Z(2:len+1)/1000;
    labs(7).l='Downwards Ice Flux';
    
    ydat(8).y=Grid.Z(2:len+1)/1000;
    labs(8).l='Net Vapour Flux';
    
    %ydat(9).y=Grid.Z(2:len+1)/1000;
    %labs(9).l='Net Water Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
case 24
    logflag=0;
    
    xlab='Net Mass Gain (kg/m^2)';
	ylab='Height (km)';
    
    figname='Net Mass Gain';
    
    xlims=1;
    xlimits=[-1e-5 1.5e-5];
    
    zmin=15.8;  %(km)
    zmax=20;   %z(end)/1000;
    
    len=length(m(1).m);
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); 
    rho=Grid.RHO;
    
    
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
       xdat(1).x = rho(1:len) .*dz(1:len) .* ( sum(icediag3(1).i(2:len+1,end,[2 5 8]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8]),3) ); %total water change
       xdat(2).x = rho(1:len).*dz(1:len).*( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        %xdat(1).x =  ( sum(icediag3(1).i(2:len+1,end,[2 5 8]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8]),3) ); %total water change
        %xdat(2).x = ( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        xdat(3).x = ( ( m(11).m(1:len)  ) ); %microphysics from ALL_DQ01                             
        %xdat(4).x =  ( xdat(1).x - xdat(2).x + xdat(3).x  ) ; %fall speed flux                               
        xdat(4).x =  -m(1).m(1:len) + m(11).m(1:len) ; %vapour budget from flux & microphysics                               

        %xdat(5).x =  xdat(4).x .* (  m(9).m(1:len) ./ ( m(38).m(1:len) + m(9).m(1:len) )  )   ; %flux of ice+snow+graupel
        %xdat(5).x = - (m(3).m(1:len) + m(4).m(1:len) + m(5).m(1:len) );
        xdat(5).x =  -m(38).m - m(11).m + m(9).m(1:len); %ice budget from flux
        xdat(6).x =  ( m(9).m(1:len)  ) ; %fall speed flux 
        xdat(7).x =  m(9).m(1:len) - m(38).m(1:len) ; %down
        xdat(8).x =  - m(1).m(1:len) ; %vapour flux gain
        
        %xdat(7).x = - ( m(18+5).m(1:len) + m(18+7).m(1:len) + m(18+9).m(1:len) + m(18+11).m(1:len) + m(18+13).m(1:len) + m(18+15).m(1:len) );
        %xdat(8).x = - ( m(19+5).m(1:len) + m(19+7).m(1:len) + m(19+9).m(1:len) + m(19+11).m(1:len) + m(19+13).m(1:len) + m(19+15).m(1:len) );
        %xdat(9).x = xdat(7).x + xdat(8).x;
    
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        %xdat(1).x(len-i+1) = xdat(1).x(len-i+1) + sumice ;    
       
    
    
    
    ydat(1).y=Grid.Z(2:len+1)/1000;
    labs(1).l='Ice';
    
    ydat(2).y=Grid.Z(2:len+1)/1000;
    labs(2).l='Vapour';
    
    ydat(3).y=Grid.Z(2:len+1)/1000;
    labs(3).l='Microphysics';
    
    ydat(4).y=Grid.Z(2:len+1)/1000;
    labs(4).l='Vapour - flux and microphysics';
    
    ydat(5).y=Grid.Z(2:len+1)/1000;
    labs(5).l='Ice - flux, fall speed & microphysics';
    
    ydat(6).y=Grid.Z(2:len+1)/1000;
    labs(6).l='Fall speed Flux';
    
     ydat(7).y=Grid.Z(2:len+1)/1000;
     labs(7).l='Ice - flux & fall speed flux';
%     
     ydat(8).y=Grid.Z(2:len+1)/1000;
     labs(8).l='Vapour Flux';
%     
%     ydat(9).y=Grid.Z(2:len+1)/1000;
%     labs(9).l='Net Water Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    
case 23
    logflag=0;
    
    xlab='Net Mass Gain (kg/m^2)';
	ylab='Height (km)';
    
    figname='Net Mass Gain';
    
    xlims=1;
    xlimits=[-3e-5 5e-5];
    
    zmin=14.5;  %(km)
    zmax=21;   %z(end)/1000;
    
    len=length(m(1).m);
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); 
    rho=Grid.RHO;
    
    
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
       xdat(1).x = rho(1:len) .*dz(1:len) .* ( sum(icediag3(1).i(2:len+1,end,[2 5 8]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8]),3) ); %total water change
       xdat(2).x = rho(1:len).*dz(1:len).*( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        %xdat(1).x =  ( sum(icediag3(1).i(2:len+1,end,[2 5 8]),3) - sum(icediag3(1).i(2:len+1,1,[2 5 8]),3) ); %total water change
        %xdat(2).x = ( icediag3(1).i(2:len+1,end,11) - icediag3(1).i(2:len+1,1,11) ) ; %difference in end and start vapour diags                                
        xdat(3).x = ( ( m(11).m(1:len)  ) ); %microphysics from ALL_DQ01                             
        xdat(4).x =  ( m(9).m(1:len)  ) ; %fall speed flux                               
        xdat(5).x = - ( m(38).m(1:len) ); %flux of ice+snow+graupel
        xdat(6).x = - ( m(19).m(1:len)  + m(21).m(1:len) ); %up   
        xdat(7).x = - (  m(20).m(1:len) + m(22).m(1:len) ); %down
        xdat(8).x = - ( m(1).m(1:len) );
        %xdat(9).x = - ( m(12).m + m(13).m + m(14).m );

    
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        %xdat(1).x(len-i+1) = xdat(1).x(len-i+1) + sumice ;    
       
    
    
    
    ydat(1).y=Grid.Z(2:len+1)/1000;
    labs(1).l='Total Water';
    
    ydat(2).y=Grid.Z(2:len+1)/1000;
    labs(2).l='Vapour';
    
    ydat(3).y=Grid.Z(2:len+1)/1000;
    labs(3).l='Microphysics';
    
    ydat(4).y=Grid.Z(2:len+1)/1000;
    labs(4).l='Fall Speed Flux';
    
    ydat(5).y=Grid.Z(2:len+1)/1000;
    labs(5).l='Ice Flux';
    
    ydat(6).y=Grid.Z(2:len+1)/1000;
    labs(6).l='Upwards Vapour Flux';
    
    ydat(7).y=Grid.Z(2:len+1)/1000;
    labs(7).l='Downwards Vapour Flux';
    
    ydat(8).y=Grid.Z(2:len+1)/1000;
    labs(8).l='Net Vapour Flux';
    
    %ydat(9).y=Grid.Z(2:len+1)/1000;
    %labs(9).l='Net Water Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    
    
    
    case 22
    logflag=0;
    
    xlab='Net Gain in Vapour (kg/m^2)';
	ylab='Height (km)';
    
    figname='Vapour Gain End-Start';
    
    
    
    zmin=0;  %(km)
    zmax=z(end)/1000;
    
    len=length(icediag3(1).i(:,1,11))-1;
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); 
    rho=Grid.RHO;
    
    
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        xdat(1).x = rho(1:len) .*dz(1:len) .* ( sum(icediag3(1).i(1:len,end,[2 5 8 11]),3) - sum(icediag3(1).i(1:len,1,[2 5 8 11]),3) );
        xdat(2).x = (rho(1:len).*dz(1:len).*( icediag3(1).i(1:len,end,11) - icediag3(1).i(1:len,1,11) ) ); %difference in end and start vapour diags                                
        xdat(3).x = ( ( m(11).m(1:len)  ) ); %difference in end and start vapour diags                                
        xdat(4).x =  ( m(9).m(1:len)  ) ; %difference in end and start vapour diags                                
        xdat(5).x = - ( ( m(10).m(1:len)  ) ); %difference in end and start vapour diags                                
        xdat(6).x = - ( ( m(1).m(1:len)  ) ); %difference in end and start vapour diags                                
    
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        %xdat(1).x(len-i+1) = xdat(1).x(len-i+1) + sumice ;    
       
    
    ydat(2).y=Grid.Z(1:len)/1000;
    labs(2).l='Vapour';
    
    ydat(1).y=Grid.Z(1:len)/1000;
    labs(1).l='Total Water';
    
    ydat(3).y=Grid.Z(1:len)/1000;
    labs(3).l='Microphysics';
    
    ydat(4).y=Grid.Z(1:len)/1000;
    labs(4).l='Fall Speed Flux';
    
    ydat(5).y=Grid.Z(1:len)/1000;
    labs(5).l='Ice Flux';
    
    ydat(6).y=Grid.Z(1:len)/1000;
    labs(6).l='Vapour Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    %xlims=1;
    xlimits=[-2e-4 6e-4];
    
    case 21
    logflag=0;
    
    xlab='Cumulative Net Gain in Vapour (kg/m^2)';
	ylab='Height (km)';
    
    figname='Vapour Gain End-Start';
    
    
    
    zmin=0;  %(km)
    zmax=z(end)/1000;
    
    len=length(icediag3(1).i(:,1,11))-1;
    
    dz=Grid.Z(2:end)-Grid.Z(1:end-1); 
    rho=Grid.RHO;
    
    for i=1:len
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( sum(icediag3(1).i(len-i+1:len,end,[2 5 8 11]),3) - sum(icediag3(1).i(len-i+1:len,1,[2 5 8 11]),3) ) );
        xdat(2).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        xdat(3).x(len-i+1) = sum( ( m(11).m(len-i+1:len)  ) ); %difference in end and start vapour diags                                
        xdat(4).x(len-i+1) = sum( ( m(9).m(len-i+1:len)  ) ); %difference in end and start vapour diags                                
        xdat(5).x(len-i+1) = - sum( ( m(10).m(len-i+1:len)  ) ); %difference in end and start vapour diags                                
        xdat(6).x(len-i+1) = - sum( ( m(1).m(len-i+1:len)  ) ); %difference in end and start vapour diags                                
        xdat(7).x(len-i+1) = - sum( ( m(19).m(len-i+1:len) + m(21).m(len-i+1:len)  ) ); 
        xdat(8).x(len-i+1) = - sum( ( m(20).m(len-i+1:len) + m(22).m(len-i+1:len) ) ); 
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                
        %xdat(1).x(len-i+1) = xdat(1).x(len-i+1) + sumice ;    
    end
    
    ydat(2).y=Grid.Z(1:len)/1000;
    labs(2).l='Vapour';
    
    ydat(1).y=Grid.Z(1:len)/1000;
    labs(1).l='Total Water';
    
    ydat(3).y=Grid.Z(1:len)/1000;
    labs(3).l='Microphysics';
    
    ydat(4).y=Grid.Z(1:len)/1000;
    labs(4).l='Fall Speed Flux';
    
    ydat(5).y=Grid.Z(1:len)/1000;
    labs(5).l='Ice Flux';
    
    ydat(6).y=Grid.Z(1:len)/1000;
    labs(6).l='Vapour Flux';
    
    ydat(7).y=Grid.Z(1:len)/1000;
    labs(7).l='Upwards Vapour Flux';
    
    ydat(8).y=Grid.Z(1:len)/1000;
    labs(8).l='Downwards Vapour Flux';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    %stuff for additional pressure axis
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    %xlims=1;
    xlimits=[-2e-4 6e-4];
    
    
    case 20
    logflag=0;
    
        
    len=findheight(z,18.2e3);
    len2=findheight(z,30e3);
    
    
    xlab='Cumulative mean mixing ratio down from 19km (ppmv)';
	ylab='Height (km)';
    
    figname='Cumulative mean mixing ratio down from 19km ';
    
    
    
    zmin=13;  %(km)
    zmax=19;

    len=length(z);
    
    for i=1:len
        
        
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        xdat(1).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,2)));
        %xdat(2).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,2)));
        
        xdat(2).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        %xdat(4).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        
        %m2= f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        
        %xdat(1).x(len-i+1)=( m2-xdat(1).x(len-i+1) ) / mean(vap(1).v(len-i+1,:,2));
        
        %xdat(2).x(len2-i+1) = f*mean(mean(vap(1).v(len2-i+1:len2,:,2)));
        %xdat(2).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        %m2= f*mean(mean(vap(1).v(len-i+1:len2,:,88)))  ;
        
        %xdat(2).x(len2-i+1)=( m2-xdat(2).x(len2-i+1) ) / mean(vap(1).v(len2-i+1,:,2)) ;
    end
    
      
    
    ydat(1).y=z(1:len)/1000;
    
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';

    labs(1).l='Start';
    
    ydat(2).y=z(1:len)/1000;
    %ydat(4).y=Grid.PREFN(1:len)/100;
    labs(2).l='End';
    
    dual=1;
    
    xlims=1;
    xlimits=[4.5 6];
    
    case 19
    logflag=0;
    
    
    
    figname='Cumulative mean mixing ratio down from 19km ';
    
    
    
    zmin=13.5;  %(km)
    zmax=30;
    
    %xlims=1;
    xlimits=[4.4 6.3];
    
    %len=findheight(z,z(end));
    len=findheight(z,19.5e3);
    len=length(z);
    
    hstr=num2str(round2(z(len)/1000,1));
    xlab=['Mean mixing ratio down from ',hstr,'km (ppmv)'];
	ylab='Height (km)';
    
    secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';
    dual=1;
    
    for i=1:len
        
        
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        %xdat(1).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,2)));
        %xdat(2).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        
        xdat(1).x(len-i+1) = f*mean(icediag3(1).i(len-i+1:len,1,11),1);
        xdat(2).x(len-i+1) = f*mean(icediag3(1).i(len-i+1:len,88,11),1);
        
        %m2= f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        
        %xdat(1).x(len-i+1)=( m2-xdat(1).x(len-i+1) ) / mean(vap(1).v(len-i+1,:,2));
        
        %xdat(2).x(len2-i+1) = f*mean(mean(vap(1).v(len2-i+1:len2,:,2)));
        %xdat(2).x(len-i+1) = f*mean(mean(vap(1).v(len-i+1:len,:,88)));
        %m2= f*mean(mean(vap(1).v(len-i+1:len2,:,88)))  ;
        
        %xdat(2).x(len2-i+1)=( m2-xdat(2).x(len2-i+1) ) / mean(vap(1).v(len2-i+1,:,2)) ;
    end
    
    xdat(1).x=xdat(2).x-xdat(1).x;
    xdat(2)=[];
    
    ydat(1).y=z(1:len)/1000;
    %ydat(1).y=Grid.PREFN(1:len)/100;

    labs(1).l='Start';
    
    %ydat(2).y=z(1:len)/1000;
    %ydat(2).y=Grid.PREFN(1:len)/100;
    %labs(2).l='End';
 
    
    case 18
    logflag=0;
    
    xlab='Mean Vapour (ppmv)';
	ylab='Height (km)';
    
    figname='Vapour Gain End-Start';
      
    zmin=13.5;  %(km)
    zmax=21;
    
    xlims=1;
    xlimits=[3 8];
    
    j=1;
    %xdat(j).x=f*mean(vap(1).v(:,:,2),2); 
    xdat(j).x=f*icediag3(1).i(:,1,11);
    ydat(j).y=z/1000;
    labs(j).l='Mean Vapour at Start (ppmv)';
    
    j=2;
    %xdat(j).x=f*mean(vap(1).v(:,:,88),2);   
    xdat(j).x=f*icediag3(1).i(:,88,11);
    ydat(j).y=z/1000;
    labs(j).l='Mean Vapour at End (ppmv)';
    
    
%     j=3;
%     xdat(j).x=f*mean(vap(1).v(:,:,10),2);   
%     ydat(j).y=z/1000;
%     labs(j).l='Mean Vapour at Dump 10 (ppmv)';
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';

	secyA=z/1000;
    secyB=Grid.PREFN/100;
    lab2='Pressure (hPa)';
    dual=1;
    
    
    lor=2;
    
    case 17
    logflag=0;
    
    t1=19.75;
    t2=25.167;
    [it1,it2,t1str,t2str]=time_strings(t1,t2,GridDan(idir).t+3)
       
    z=GridDan(idir).Z+620;
    
    
    %len=length(icediag4(idir).i(:,1,35))-1;
    len=findheight(z,18.5e3)+1;
    %len=length(z)-1;
    
    hstr=num2str( round2(z(len)/1000,1) );
%    xlab=['Averaged Net Gain Down from ' hstr 'km (kg/m^{2})'];
    xlab=['Averaged Net Gain Down from ' hstr 'km (ppmv)'];

	ylab='Height (km)';
    
    
    
    figname=['Cumulative net gain down from ' hstr 'km'];
    
    dz=GridDan(idir).Z(2:end)-GridDan(idir).Z(1:end-1); %finds d/dz of flux
    rho=GridDan(idir).RHON;
    
dirs=[1 2];  
  for idat=1:length(dirs)   
		idir=dirs(idat);
      
    for i=1:len
        %me=mean(icediag3(1).i(len-i+1:len,end,11));
        %xdat(1).x(len-i+1) = sum(rho(len-i+1:len).*dz(len-i+1:len).*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ); %difference in end and start vapour diags                                 
        
        airmass=sum( rho(len-i+1:len) .*dz(len-i+1:len) );
        %airmass=1;

        %converted into mixing ratio
        xdat(idat).x(len-i+1) = f * sum( rho(len-i+1:len) .*dz(len-i+1:len) .* ( sum(icediagsALL(idir).i(len-i+1:len,it2,[37:42]),3) - sum(icediagsALL(idir).i(len-i+1:len,1,[37:42]),3) )  ) ./ airmass;
       % xdat(2).x(len-i+1) = sum( rho(len-i+1:len) .*dz(len-i+1:len) .* ( sum(icediag4(idir).i(len-i+1:len,end,[35:36]),3) - sum(icediag4(idir).i(len-i+1:len,3,[35:36]),3) )  ) ./ airmass;
      %  xdat(1).x(len-i+1) = f * (sum(icediagsALL(idir).i(len-i+1,it2,[37:42]),3) - sum(icediagsALL(idir).i(len-i+1,1,[37:42]),3) );

        
        %mass gain
        %xdat(1).x(len-i+1) =  sum( rho(len-i+1:len) .*dz(len-i+1:len) .* ( sum(icediag3(1).i(len-i+1:len,end,[2 5 8 11]),3) - sum(icediag3(1).i(len-i+1:len,1,[2 5 8 11]),3) )  ) ;
        %xdat(2).x(len-i+1) =  sum( rho(len-i+1:len) .*dz(len-i+1:len) .*( icediag3(1).i(len-i+1:len,end,11) - icediag3(1).i(len-i+1:len,1,11) ) ) ; %difference in end and start vapour diags    
    end
        
    ydat(idat).y=z(1:len)/1000;
    labs(idat).l=runName(idir).nam;
    
  end
    

    
    secyA=z/1000;
    secyB=GridDan(idir).PREFN/100;
    lab2='Pressure (hPa)';  
    dual=1;
    
    xlims=0;
    %xlimits=[-1.4 0.4];
    xlimits=[-400/f 400/f];
    
    zmin=15;  %(km)
    %zmax=z(end)/1000;
    zmax=19;
    
    %xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
%     [iz,iz2]=findheight(Grid.Z,0e3,30e3);
%     ydat(2).y=Grid.Z(iz+1:iz2)/1000;
%     labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=1;
    
    case 16
    logflag=0;
    
    xlab='Net Gain in Vapour (kg/m^2)';
	ylab='Height (km)';
    
    figname='Vapour Gain End-Start';
    
    zmin=0;  %(km)
    zmax=30;
    
    
    
    xdat(1).x =f*( icediag3(1).i(:,end,11) - icediag3(1).i(:,1,11) ); %difference in end and start vapour diags                                
    ydat(1).y=Grid.Z/1000;
    labs(1).l='Net Vapour Gain Profiles';
    
    xdat(2).x =f*( -m(1).m + m(11).m(2:end) ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
    [iz,iz2]=findheight(Grid.Z,0e3,30e3);
    ydat(2).y=Grid.Z(iz+1:iz2)/1000;
    labs(2).l='Net Vapour Gain Flux - Microphysics';
    
    
    lor=2;
    
    
    case 15
    logflag=0;
    
    xlab='Net Gain in Vapour (kg/m^2)';
	ylab='Height (km)';
    
    figname='Vapour Gain';
    
    zmin=0;  %(km)
    zmax=30;
    
    
    
    xdat(1).x =f*( -m(1).m + m(11).m ); %vapour gained from detrainment + microphysical sources
                                   %calculated with VapBudget.m
                                   
    [iz,iz2]=findheight(Grid.Z,0e3,30e3);
    ydat(1).y=Grid.Z(iz+1:iz2)/1000;
    labs(1).l='Net Vapour Gain';
    
    lor=2;
    
    case 14
    
    logflag=1;
    
    xlab='Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    
    tt=53;
    figname=strcat('Profiles around clouds - High Updraught Case - Time=',num2str(timesTH(tt-49)),' LT','-dump ',num2str(tt) );
    
    j=1;
    xdat(j).x=sdla(7,:);
    ydat(j).y=sdla(2,:)/1000;
    labs(j).l='SDLA SF4 descent 18:57-21:48 LT';
    
    j=2;
    xdat(j).x=f*pr(1).p(:,10);
    ydat(j).y=pr(1).p(:,1)/1000;
    labs(j).l='DMI 17:15-19:08 LT';
    
    j=3;
    xx=257;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
    

    j=4;
    xx=267;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
    
    j=5;
    xx=247;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
    
     j=6;
    xx=260;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
    
    j=7;
    xx=254;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
    
     j=8;
    xx=251;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
    
    j=9;
    xx=248;
    xdat(j).x=f*vap(2).v(:,xx,tt);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l=strcat('x =',' ',num2str(Grid.Y1(xx)/1000),'km');
  
    
    case 13
    logflag=0;
    
    xlab='Total Water Mass from Flux in 4.5 hrs (kg/m^2)';
	ylab='Height (km)';
    
    figname='Total Water from Flux';
    
    izmin=97;  %115;
    izmax=136;
    dumprange=[50:104];
    
    i=2;
    pdat(i).p =   squeeze(Fluxdiag(i).dg(izmin:izmax,6,dumprange) +Fluxdiag(i).dg(izmin:izmax,6+14,dumprange) - Falldiag(i).dg(izmin:izmax,6,dumprange))...
                + squeeze(Fluxdiag(i).dg(izmin:izmax,4,dumprange) +Fluxdiag(i).dg(izmin:izmax,4+14,dumprange) - Falldiag(i).dg(izmin:izmax,4,dumprange))...
                + squeeze(Fluxdiag(i).dg(izmin:izmax,5,dumprange) +Fluxdiag(i).dg(izmin:izmax,5+14,dumprange) - Falldiag(i).dg(izmin:izmax,5,dumprange))...
                + squeeze(Fluxdiag(i).dg(izmin:izmax,1,dumprange) +Fluxdiag(i).dg(izmin:izmax,1+14,dumprange) - Falldiag(i).dg(izmin:izmax,1,dumprange))...
                + squeeze(Fluxdiag(i).dg(izmin:izmax,2,dumprange) +Fluxdiag(i).dg(izmin:izmax,2+14,dumprange) - Falldiag(i).dg(izmin:izmax,2,dumprange))...
                + squeeze(Fluxdiag(i).dg(izmin:izmax,3,dumprange) +Fluxdiag(i).dg(izmin:izmax,3+14,dumprange) - Falldiag(i).dg(izmin:izmax,3,dumprange));



    
            
    j=1;
    
    %diff=pdat(2).p(2:end,:)-pdat(2).p(1:end-1,:);
    %xdat(j).x=sum(diff(:,1:length(dumprange)),2)*300*length(dumprange);
    xdat(j).x=sum(pdat(2).p(:,1:length(dumprange)),2)*300*length(dumprange);
    ydat(j).y=Grid.Z(izmin:izmax)/1000;
    labs(j).l='High Updraught Case';
    
    zmin=Grid.Z(izmin);
    
    lor=2;
    
    
	case 12
    logflag=1;
    
    xlab='Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='Beginning and end mean profiles';
    
    
    
    j=1;
    xdat(j).x=mean(vap(2).v(:,:,50),2);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l='High Updraught Beginning Mean Vapour';
    

    j=2;
    xdat(j).x=mean(vap(2).v(:,:,end),2);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l='High Updraught End Mean Vapour';
    
%     j=3;
%     xdat(j).x=pcents_icemr(2).p(end,2:end,end);
%     ydat(j).y=Grid.Z(2:end)/1000;
%     labs(j).l='High Updraught End Max Ice Sat';
%     
%     j=4;
%     xdat(j).x=f*mean(vap(2).v(:,:,50),2);
%     ydat(j).y=Grid.Z(1:end)/1000;
%     labs(j).l='High Updraught Beginning Vapour';
    
    case 11
	logflag=1;
    
    xlab='Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='Beginning and end MAX and MIN profiles';
    
    
    
    
    xdat(1).x=pcents_icemr(2).p(50,2:end,1);
    ydat(1).y=Grid.Z(2:end)/1000;
    labs(1).l='High Updraught Beginning Ice Sat';
    

    j=2;
    xdat(j).x=pcents_icemr(2).p(end,2:end,1);
    ydat(j).y=Grid.Z(2:end)/1000;
    labs(j).l='High Updraught End Min Ice Sat';
    
    j=3;
    xdat(j).x=pcents_icemr(2).p(end,2:end,end);
    ydat(j).y=Grid.Z(2:end)/1000;
    labs(j).l='High Updraught End Max Ice Sat';
    
    j=4;
    xdat(j).x=f*mean(vap(2).v(:,:,50),2);
    ydat(j).y=Grid.Z(1:end)/1000;
    labs(j).l='High Updraught Beginning Vapour';
    

 
    
    case 10
          
        
    for i=1:2
        xdat((i-1)*2+1).x=f*max(TwoDDan(i).Q(:,2:end,1),[],2);
        ydat((i-1)*2+1).y=GridDan(i).Z/1000;
     
        xdat((i-1)*2+2).x=f*min(TwoDDan(i).Q(:,2:end,1),[],2);
        ydat((i-1)*2+2).y=GridDan(i).Z/1000;
        
    end
    
    T=tempLES(GridDan(1)); %K
    ei=SatVapPress(T,'goff','ice'); %Pa
    P=GridDan(1).PREFN; %Pa
    
    xdat(5).x=f*0.622*ei./(P-ei);
    ydat(5).y=GridDan(1).Z/1000;
    
    T=tempLES(GridDan(2)); %K
    ei=SatVapPress(T,'goff','ice'); %Pa
    P=GridDan(2).PREFN; %Pa
    
    xdat(6).x=f*0.622*ei./(P-ei);
    ydat(6).y=GridDan(2).Z/1000;
    
    figname='Max/Min Vapour + Ice Sat';
        %ydat(1).y=(sumPosDep-sumPosUnDep)./sumPosDep;    
    
	labs(1).l='Max for Low Updraught Case';
   	labs(2).l='Min for Low Updraught Case';
	labs(3).l='Max for High Updraught Case';
	labs(4).l='Min for High Updraught Case';
    labs(5).l='Ice Sat Mixing Ratio Low Updraught';
    labs(6).l='Ice Sat Mixing Ratio High Updraught';
	
	xlab='Water Vapour Mixing Ratio (ppmv)';
    %xlab='Aerosol mass (kg)';
	ylab='Height (km)';
    
    
    logflag=1;
    lor=1;
    gridon=1;
    
    %set(gca,'xlim',[9e-9 2e-6]); do this after


    
    case 9
        
  
     xlab='Water Vapour Mixing Ratio (ppmv)';
     ylab='Height (km)';
     logflag=1;
     lor=1;
     
%      pcplot3(1,1,[0 25 50 75 100],TwoDDan,GridDan,xlab,'',{'Low Updraught'},f);
%      
%      pcplot3(2,1,[0 25 50 75 100],TwoDDan,GridDan,xlab,'',{'High Updraught'},f);
    
    pcs=[0 25 50 75 100];    

    [xdat,ydat,labs]=getpctdat(GridDan(2),f*TwoDDan(2).Q(:,2:end,1),pcs,' high updraught');    

    j=length(pcs)+1;
    
    
     xdat(j).x=f*pr(1).p(:,10);
     ydat(j).y=pr(1).p(:,1)/1000;
     labs(j).l='Bauru Sounding 17:15';
     
     xdat(j+1).x=f*pr(2).p(:,10);
     ydat(j+1).y=pr(2).p(:,1)/1000;
     labs(j+1).l='Campo Grande Sounding 9am';

     xdat(j+2).x=origVap;
     ydat(j+2).y=GridDan(1).Z/1000;
     labs(j+2).l='Original Sounding';

    case 8
    
    logflag=1;
    figname='Mean Percentiles Vapour Graph 50-104';
    xlab='Water Vapour Mixing Ratio (ppmv)';
    
    for i=50:size(vap(1).v,3)
        
        pcs=[0 25 50 75 100];
        
        for j=1:length(pcs)
            pcents(2).p(i,:,j)=prctile(f*vap(2).v(:,:,i)',pcs(j));
        end
    end
    
    for j=1:length(pcs)
        xdat(j).x=mean(pcents(2).p(:,:,j),1);
        ydat(j).y=GridDan(1).Z/1000;
    end
        
    
    lp=length(pcs);
    for j=1:lp
    
        if pcs(j)==0
            labstr='Min';
        elseif pcs(j)==100
            labstr='Max';
        else
            labstr=strcat( num2str(pcs(j)) , 'th percentile' );
        end
    labs(j).l=strcat(labstr,' for ',' high updraught case');
    end
    
    j=length(pcs)+1;
    xdat(j).x=origVap;
    ydat(j).y=GridDan(1).Z/1000;
    labs(j).l='Original Sounding';
    
     
    case 7
        
    logflag=1;

    xlab='Water Vapour Mixing Ratio (ppmv)';
    ylab='Height (km)';
    
%     for i=50:size(vap(2).v,3)
%         
%         pcs=[0 25 50 75 100];
%         
%         for j=1:length(pcs)
%             pc(i,:,j)=prctile(f*vap(2).v(:,:,i)',pcs(j));
%         end
%     end
    
    pcs=[0 25 50 75 100];

    for j=1:length(pcs)
        xdat(j).x=mean(pcents(1).p(50:104,:,j),1);
        ydat(j).y=620/1000+GridDan(1).Z/1000;
    end
        
    
    lp=length(pcs);
    for j=1:lp
    
        if pcs(j)==0
            labstr='Min';
        elseif pcs(j)==100
            labstr='Max';
        else
            labstr=strcat( num2str(pcs(j)) , 'th percentile' );
        end
    labs(j).l=strcat(labstr,' for ',' high updraught case');
    end
    
    j=length(pcs)+1;
    xdat(j).x=origorig;
    ydat(j).y=620/1000+GridDan(1).Z/1000;
    labs(j).l='Dump 1';
    
    j=length(pcs)+2;
    xdat(j).x=min(pcents(1).p(50:104,:,1),[],1); %minimum value over all times
    ydat(j).y=620/1000+GridDan(1).Z/1000;
    labs(j).l='Overall Min';
    
    j=length(pcs)+3;
    xdat(j).x=max(pcents(1).p(50:104,:,5),[],1); %max value over all times
    ydat(j).y=620/1000+GridDan(1).Z/1000;
    labs(j).l='Overall Max';
    

    
    
    case 6
        
    logflag=1;

    xlab='Water Vapour Mixing Ratio (ppmv)';
    
   
        xdat(1).x=f*mean(TwoDDan(1).Q(:,:,1),2);
        ydat(1).y=GridDan(1).Z/1000;
    
        labs(1).l='Start Water Vapour Profile';
        
        figname='Start Vapour Profile';
    
        
    case 5
     xlab='Water Vapour Mixing Ratio (ppmv)';
     ylab='Height (km)';
     logflag=1;
     lor=1;
     
%      pcplot3(1,1,[0 25 50 75 100],TwoDDan,GridDan,xlab,'',{'Low Updraught'},f);
%      
%      pcplot3(2,1,[0 25 50 75 100],TwoDDan,GridDan,xlab,'',{'High Updraught'},f);
    
    %pcs=[0 25 50 75 100];    

    %[xdat,ydat,labs]=getpctdat(GridDan(2),f*TwoDDan(2).Q(:,2:end,1),pcs,' high updraught');    

    stats={'Corumba','CG','SP','Curitiba','Bauru'};

    for j=1:length(pro)
       
     xdat(j).x=f*pro(j).p(:,10,1);
     ydat(j).y=pro(j).p(:,1,1)/1000;
     labs(j).l=stats{j};
     
    end
    
    j=length(pro)+1;
%     xdat(j).x=f*mean(vap(1).v(:,:,50),2);
    xdat(j).x=origorig;
    ydat(j).y=620/1000 + GridDan(1).Z/1000; %Bauru 620m above msl
    labs(j).l='dump 1';
    
   
    
    case 4
        
    logflag=1;

    xlab='Water Vapour Mixing Ratio (ppmv)';
    
   
        
    figname='Dump 50 percentiles';
    
    pcs=[0 25 50 75 100];    

    [xdat,ydat,labs]=getpctdat(GridDan(2),f*vap(1).v(:,:,50),pcs,' high updraught');   

    
    
    
    
%     j=length(pro)+1;
%     xdat(j).x=f*mean(vap(1).v(:,:,50),2);
%     ydat(j).y=GridDan(1).Z/1000;
%     labs(j).l='dump 50';

case 399
    %SF4 vapour plots
    %run readsound and set dmi=pr 
    %and get LEM data from loadvapdata
    
    lor=3;
    
    zmin=11;
    zmax=21;
    
    izlim=1;
	
	xlims=1;
	xlimits=[0 20];
    
    
    logflag=1;
    
    xdat(1).x=f*dmi(1).p(:,10);
    ydat(1).y=dmi(1).p(:,1)/1000;
    labs(1).l='Original Sounding 20:15-22:08 UTC';
    
    T=dmi(1).p(:,3)+273.15; %K
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=dmi(1).p(:,2)*100; %Pa
    
    xdat(2).x=f*0.622*ei./(P-ei);
    ydat(2).y=dmi(1).p(:,1)/1000;
    labs(2).l='Ice Saturation';  
    
     xdat(3).x=f*GridDan(1).OLQBAR(:,1);
     ydat(3).y=GridDan(1).Z/1000 + 0.62;
     labs(3).l='LEM water vapour';
    
  
    xlab='Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='24th Feb vapour and ice saturation mixing ratios';
    titlenam=figname;
    savename=figname;
    
    
case 3
    %SF4 vapour plots
    %run readsound and set dmi=pr, readSDLA, readallSAW
    %or get from loadvapdata
    
    lor=3;
    
    zmin=11;
    zmax=21;
    
    izlim=1;
	
	xlims=0;
	xlimits=[0 20];
    
    
    zmin=1;
    zmax=21;
    
    
    logflag=0;
    
    xdat(1).x=sdla(1).s(7,:);
    ydat(1).y=sdla(1).s(2,:)/1000;
    labs(1).l='SDLA 21:57-00:48 UTC';
    
   
    
    
    T=sdla(1).s(6,:)+273.15; %K
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=sdla(1).s(5,:)*100; %Pa
    
    xdat(2).x=f*0.622*ei./(P-ei);
    ydat(2).y=sdla(1).s(2,:)/1000;
    labs(2).l='SDLA Ice Sat';
    
    
%     T=tempLES(GridDan(2)); %K
%     ei=SatVapPress(T,'buck2','ice'); %Pa
%     P=GridDan(2).PREFN; %Pa
%     
%     xdat(3).x=f*0.622*ei./(P-ei);
%     ydat(3).y=GridDan(2).Z/1000;
%     labs(3).l='Ice Sat Mixing Ratio High Updraught';
    
  
    
%     
%     T=tempLES(GridDan(2)); %K
%     ei=SatVapPress(T,'goff','ice'); %Pa
%     P=GridDan(2).PREFN; %Pa
%     
%     xdat(4).x=f*0.622*ei./(P-ei);
    

    xdat(3).x=f*dmi(1).p(:,10);
    ydat(3).y=dmi(1).p(:,1)/1000;
    labs(3).l='DMI 20:15-22:08 UTC';
    
    T=dmi(1).p(:,3)+273.15; %K
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=dmi(1).p(:,2)*100; %Pa
    
    xdat(4).x=f*0.622*ei./(P-ei);
    ydat(4).y=dmi(1).p(:,1)/1000;
    labs(4).l='DMI Ice Sat';
    
%     xdat(5).x=saw(1).s(4).sss(7,:);
%     ydat(5).y=saw(1).s(4).sss(3,:)/1000;
%     labs(5).l='SAW water vapour';
    
    %xdat(6).x=f*origorig;
    %ydat(6).y=620/1000 + GridDan(1).Z/1000; %Bauru 620m above msl
    %labs(6).l='LEM start profile';
    
     xdat(5).x=f*GridDan(1).OLQBAR(:,1);
     ydat(5).y=GridDan(1).Z/1000 + 0.62;
     labs(5).l='LEM water vapour';
    
  
    xlab='Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='24th Feb vapour and ice saturation mixing ratios';
    titlenam=figname;
    savename=figname;
    
    
case 2
    logflag=1;
    
    xlab='Water Vapour Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='LEM anvil and outside profiles dump 85';
    
    x=3;
    xstr=num2str(GridDan(2).Y1(x));
    T=potemp(2).p(:,x,85)./(1e5./GridDan(2).PREFN).^0.286;
    
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=GridDan(2).PREFN; %Pa
    
    j=1;
    xdat(j).x=f*0.622*ei./(P-ei);
    ydat(j).y=GridDan(2).Z/1000;
    
    labs(j).l=strcat('Ice Sat Mixing Ratio x=',xstr,'  km');
    
    
    x=20;
    xstr=num2str(GridDan(2).Y1(x));
    T=potemp(2).p(:,x,85)./(1e5./GridDan(2).PREFN).^0.286;
    
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=GridDan(2).PREFN; %Pa
    
    j=2;
    xdat(j).x=f*0.622*ei./(P-ei);
    ydat(j).y=GridDan(2).Z/1000;
    
    labs(j).l=strcat('Ice Sat Mixing Ratio x=',xstr,'  km');
    
    
    x=40;
    xstr=num2str(GridDan(2).Y1(x));
    T=potemp(2).p(:,x,85)./(1e5./GridDan(2).PREFN).^0.286;
    
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=GridDan(2).PREFN; %Pa
    
    j=3;
    xdat(j).x=f*0.622*ei./(P-ei);
    ydat(j).y=GridDan(2).Z/1000;
    
    labs(j).l=strcat('Ice Sat Mixing Ratio x=',xstr,'  km');
    
    
    x=60;
    xstr=num2str(GridDan(2).Y1(x));
    T=potemp(2).p(:,x,85)./(1e5./GridDan(2).PREFN).^0.286;
    
    ei=SatVapPress(T,'buck2','ice'); %Pa
    P=GridDan(2).PREFN; %Pa
    
    j=4;
    xdat(j).x=f*0.622*ei./(P-ei);
    ydat(j).y=GridDan(2).Z/1000;
    
    labs(j).l=strcat('Ice Sat Mixing Ratio x=',xstr,'  km');
    
    
    

case 1
	logflag=1;
    
    xlab='Water Vapour Mixing Ratio (ppmv)';
	ylab='Height (km)';
    
    figname='Beginning and end min profiles';
    
    
    xdat(1).x=min(vap(2).v(:,:,50),[],2);
    ydat(1).y=Grid.Z/1000;
    labs(1).l='High Updraught Beginning';
    
    j=2;
    xdat(j).x=min(vap(2).v(:,:,end),[],2);
    ydat(j).y=Grid.Z/1000;
    labs(j).l='High Updraught End';
    

end


end

if izlim==0
    zmin='';
    zmax='';
end

if noplot==0
	if subplotting==0    
		hf=figure('name',figname,'Position',posit);
%        fsize=18;
%        fsize=12;
%        fsize=26;
%        fsize=30;        
        ixlab=1;
	else
        if nsub==1
            posit(4)=length(idirs)*posit(4)/2.3;
			hf=figure('name',figname,'Position',posit);
        end
        subplot(xsub,ysub,nsub);
        fsize=12;
        fsize=18;
        if nsub==length(idirs)
            ixlab=1;
        else
            ixlab=0;
        end
    end

    

zline=0; %to plot a solid line at x=0
if iplot_3D==0
[h,ax,ax2]=plotXY6(xdat,ydat,labs,nmark,lwidth,lor,logflag,xlab,ylab,[zmin zmax],...
    zline,dual,secyA,secyB,lab2,fsize,ixlab,ixdir,iydir,xloc,time_highlight_path,highlight_type);
%function [H1,ax2]=plotXY3(xdat,ydat,labs,nmark,lwidth,leglor,logflag,xlab,ylab,ylims,zline) %xdat(1:n).x, ydat(1:n).y & labs(1:n).l nmark=no markers
%put nmark as -1 for markers for all points
% LEGEND(...,Pos) places the legend in the specified
%     location:
%         0 = Automatic "best" placement (least conflict with data)
%         1 = Upper right-hand corner (default)
%         2 = Upper left-hand corner
%         3 = Lower left-hand corner
%         4 = Lower right-hand corner
%        -1 = To the right of the plot
else
    [h,ax,ax2]=plotXY6_3D(xdat,yydat,ydat,labs,nmark,lwidth,lor,logflag,xlab,ylab,yylab,[zmin zmax],...
    zline,dual,secyA,secyB,lab2,fsize,ixlab,ixdir,iydir,xloc,time_highlight_path,highlight_type);


    if exist('iset_3D_view_properties')==1 & iset_3D_view_properties==1
        set(gca,'View',View);
        set(gca,'CameraPosition', CameraPosition);
        set(gca,'CameraPositionMode', CameraPositionMode);
        set(gca,'CameraTarget', CameraTarget);
        set(gca,'CameraTargetMode', CameraTargetMode);
        set(gca,'CameraUpVector', CameraUpVector);
        set(gca,'CameraUpVectorMode', CameraUpVectorMode);
        set(gca,'CameraViewAngle', CameraViewAngle);
        set(gca,'CameraViewAngleMode', CameraViewAngleMode);
        
    end
        
        
end

set(gca, 'layer', 'top'); %this puts the tick marks on top and so over the 
%timeseries highlighting box - make sure to do this before grid on



if xlims==1
    set(gca,'xlim',xlimits);
end



if gridon==1
    grid on;
end



if (ixtime==1)
    xx=get(gca,'xticklabels');
    xx=str2num(xx);
    xx=num2str(mod(xx,24));
    set(gca,'xticklabels',xx);
end

if (ititle==1)
%    title(titlenam,'fontsize',18,'verticalalignment','middle');

    htit=title(titlenam,'fontsize',fsize,'verticalalignment','baseline');
    
    if dual==2
        ptit=get(htit,'position');
        set(htit,'position',[ptit(1) ptit(2)*1.015]);
    end
%        title(titlenam,'fontsize',18,'verticalalignment','top');

%    title(titlenam,'fontsize',18);
end

if idirlabel==1
    xlims=get(gca,'xlim');
    ylims=get(gca,'ylim');
    text(xlims(1),ylims(1)-(ylims(2)-ylims(1))/13,direcDan(idir).dir);
end

if add_points==1
    add_points_to_plot(xpos,ypos,point_labs,8,11)
end

if iaxis_square==1;
    axis square
elseif iplot_3D==1
    dasp=daspect;
    daspect([1 1 dasp(3)]); 
end
    
switch x_axis_type        
    case {'log10_matlab'} %log10_matlab is when the 'yscale' is set to 'log' using matlab built in feature
        set(gca,'xscale','log');
end

switch y_axis_type        
    case {'log10_matlab'} %log10_matlab is when the 'yscale' is set to 'log' using matlab built in feature
        set(gca,'yscale','log');
end

if iadd_line==1
    line(addlineX,addlineY);
end

if ixtick_relabel==1
    ticklabels = get(gca,'xticklabel');
    tick_nums = str2num(ticklabels);
    
    switch x_axis_type        
        case {'log10','log10_matlab'}
            new_tick_nums = 10.^tick_nums;            
    end
    
    clear new_xtick_text
    
    for itick=1:length(new_tick_nums)
        xtick_text_i = num2str(new_tick_nums(itick));
        new_xtick_text(itick,1:length(xtick_text_i)) = xtick_text_i;
    end
    
    set(gca,'xticklabel',new_xtick_text);
    
end

if iytick_relabel==1
    ticklabels = get(gca,'yticklabel');
    tick_nums = str2num(ticklabels);
    
    switch y_axis_type        
        case {'log10','log10_matlab'}
            new_tick_nums = 10.^tick_nums;            
    end
    
    clear new_ytick_text
    
    for itick=1:length(new_tick_nums)
        ytick_text_i = num2str(new_tick_nums(itick));
        new_ytick_text(itick,1:length(ytick_text_i)) = ytick_text_i;
    end
    
    set(gca,'yticklabel',new_ytick_text);
    
end


iadd_Temperature_yaxis=0;
if iadd_Temperature_yaxis==1
    ax1=gca;
    ylims_1 = get(ax1,'ylim');
    dylim_1=ylims_1(2)-ylims_1(1);

    ax1_pos=get(ax1,'Position');
    ax2_pos=[ax1_pos(1)-ax1_pos(3)*0.14 0.1100 ax1_pos(3)/1000 0.8150];
    ax2 = axes('Position',ax2_pos,...
        'XAxisLocation','top',...
        'YAxisLocation','right',...
        'Color','none',...
        'XColor','k','YColor','k');

    Z=dat_flt(:,col_alt);
    T=dat_flt(:,col_temp);
    P=dat_flt(:,col_press);    

    zgrid=[0:10:max(Z)];
    for iz=1:length(zgrid)-1
        ii=find( Z>zgrid(iz) & Z<zgrid(iz+1) );
        tgrid(iz)=mean(T(ii));
        pgrid(iz)=mean(P(ii));
        if length(ii)==0
            tgrid(iz)=NaN;
        end
    end

    zgrid=zgrid(2:end);

    set(ax2,'ylim',[floor(min(tgrid)) ceil(max(tgrid))]);
    set(ax2,'ydir','reverse');
    ylims_2 = get(ax2,'ylim');
    dylim_2=ylims_2(2)-ylims_2(1);

    yticks=get(ax2,'ytick');
    yticks=fliplr(yticks);


    clear ytickstr
    for jticks=1:length(yticks)
        z_tick = dylim_1*(yticks(jticks)-ylims_2(1))/dylim_2;
        new_tick = interp1(zgrid,tgrid,z_tick);
        if ~isnan(new_tick)
%            te=num2str( sigfig(new_tick,2+ceil(log10(abs(new_tick)))) );            
            te=num2str( sigfig(new_tick,2) );  
            ytickstr(jticks,1:length(te))=te;
        end

    end

    set(ax2,'yticklabel',ytickstr);









end



if i_set_dateticks==1
    set(gca,'xtick',date_ticks);     
end

 if idatetick==1; %flag to say the want the xaxis in proper time format rather than decimal time
        %specify the type with datetick_type (see help datetick)
        datetickzoom('x',datetick_type,'keeplimits','keepticks');
        %    zoomadaptivedateticks('on');
        %note need to plot time in days after day 0 of year 0
    end


if iexecute_script==1
    eval(script_name);
end

end

